
Telemetry_full_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800b0d0  0800b0d0  0001b0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b574  0800b574  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b57c  0800b57c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b57c  0800b57c  0001b57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048d8  200001f4  0800b778  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004acc  0800b778  00024acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e252  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c27  00000000  00000000  0003e476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  000420a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  00043698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266b1  00000000  00000000  00044af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c8d  00000000  00000000  0006b1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd38e  00000000  00000000  00084e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001621c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d28  00000000  00000000  00162218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b0b8 	.word	0x0800b0b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800b0b8 	.word	0x0800b0b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468c      	mov	ip, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8083 	bne.w	8000d6e <__udivmoddi4+0x116>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d947      	bls.n	8000cfe <__udivmoddi4+0xa6>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b142      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	f1c2 0020 	rsb	r0, r2, #32
 8000c78:	fa24 f000 	lsr.w	r0, r4, r0
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4097      	lsls	r7, r2
 8000c80:	ea40 0c01 	orr.w	ip, r0, r1
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c90:	fa1f fe87 	uxth.w	lr, r7
 8000c94:	fb08 c116 	mls	r1, r8, r6, ip
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000caa:	f080 8119 	bcs.w	8000ee0 <__udivmoddi4+0x288>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8116 	bls.w	8000ee0 <__udivmoddi4+0x288>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8105 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8102 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce8:	eba4 040e 	sub.w	r4, r4, lr
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	b902      	cbnz	r2, 8000d02 <__udivmoddi4+0xaa>
 8000d00:	deff      	udf	#255	; 0xff
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d150      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0a:	1bcb      	subs	r3, r1, r7
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	2601      	movs	r6, #1
 8000d16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1a:	0c21      	lsrs	r1, r4, #16
 8000d1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb08 f30c 	mul.w	r3, r8, ip
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0xe2>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	f200 80e9 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x10c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x10a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80d9 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e7bf      	b.n	8000cee <__udivmoddi4+0x96>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80b1 	beq.w	8000eda <__udivmoddi4+0x282>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x1cc>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b8 	bhi.w	8000f08 <__udivmoddi4+0x2b0>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0a8      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000da6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000daa:	e7a5      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f603 	lsr.w	r6, r0, r3
 8000db4:	4097      	lsls	r7, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbe:	40d9      	lsrs	r1, r3
 8000dc0:	4330      	orrs	r0, r6
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb06 f108 	mul.w	r1, r6, r8
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	fa04 f402 	lsl.w	r4, r4, r2
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x19c>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000de6:	f080 808d 	bcs.w	8000f04 <__udivmoddi4+0x2ac>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 808a 	bls.w	8000f04 <__udivmoddi4+0x2ac>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b281      	uxth	r1, r0
 8000df8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb00 f308 	mul.w	r3, r0, r8
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e12:	d273      	bcs.n	8000efc <__udivmoddi4+0x2a4>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d971      	bls.n	8000efc <__udivmoddi4+0x2a4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4439      	add	r1, r7
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e22:	e778      	b.n	8000d16 <__udivmoddi4+0xbe>
 8000e24:	f1c6 0c20 	rsb	ip, r6, #32
 8000e28:	fa03 f406 	lsl.w	r4, r3, r6
 8000e2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0c3b      	lsrs	r3, r7, #16
 8000e46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4a:	fa1f f884 	uxth.w	r8, r4
 8000e4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e56:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5a:	458a      	cmp	sl, r1
 8000e5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e60:	fa00 f306 	lsl.w	r3, r0, r6
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x220>
 8000e66:	1861      	adds	r1, r4, r1
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e6c:	d248      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	d946      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4421      	add	r1, r4
 8000e78:	eba1 010a 	sub.w	r1, r1, sl
 8000e7c:	b2bf      	uxth	r7, r7
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8a:	fb00 f808 	mul.w	r8, r0, r8
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x24a>
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e98:	d22e      	bcs.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9a:	45b8      	cmp	r8, r7
 8000e9c:	d92c      	bls.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4427      	add	r7, r4
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	eba7 0708 	sub.w	r7, r7, r8
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	454f      	cmp	r7, r9
 8000eb0:	46c6      	mov	lr, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	d31a      	bcc.n	8000eec <__udivmoddi4+0x294>
 8000eb6:	d017      	beq.n	8000ee8 <__udivmoddi4+0x290>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x27a>
 8000eba:	ebb3 020e 	subs.w	r2, r3, lr
 8000ebe:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec6:	40f2      	lsrs	r2, r6
 8000ec8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ecc:	40f7      	lsrs	r7, r6
 8000ece:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e70b      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fd      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000ee8:	4543      	cmp	r3, r8
 8000eea:	d2e5      	bcs.n	8000eb8 <__udivmoddi4+0x260>
 8000eec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7df      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e7d2      	b.n	8000ea2 <__udivmoddi4+0x24a>
 8000efc:	4660      	mov	r0, ip
 8000efe:	e78d      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f00:	4681      	mov	r9, r0
 8000f02:	e7b9      	b.n	8000e78 <__udivmoddi4+0x220>
 8000f04:	4666      	mov	r6, ip
 8000f06:	e775      	b.n	8000df4 <__udivmoddi4+0x19c>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e74a      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	4439      	add	r1, r7
 8000f12:	e713      	b.n	8000d3c <__udivmoddi4+0xe4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	e724      	b.n	8000d64 <__udivmoddi4+0x10c>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ICM_ReadOneByte>:

	}

	// LEITURA DE UM BYTE DOS REGISTOS DO ICM, SPI
	void ICM_ReadOneByte(uint8_t reg, uint8_t* pData) // ***
	{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
		reg = reg | 0x80;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4812      	ldr	r0, [pc, #72]	; (8000f84 <ICM_ReadOneByte+0x64>)
 8000f3c:	f003 feea 	bl	8004d14 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(SPI_BUS, &reg, 1);
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	4810      	ldr	r0, [pc, #64]	; (8000f88 <ICM_ReadOneByte+0x68>)
 8000f48:	f004 ff46 	bl	8005dd8 <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8000f4c:	bf00      	nop
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <ICM_ReadOneByte+0x68>)
 8000f50:	f005 f9f8 	bl	8006344 <HAL_SPI_GetState>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d1f9      	bne.n	8000f4e <ICM_ReadOneByte+0x2e>
			;
		HAL_SPI_Receive_DMA(SPI_BUS, pData, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <ICM_ReadOneByte+0x68>)
 8000f60:	f004 ffe8 	bl	8005f34 <HAL_SPI_Receive_DMA>
		while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8000f64:	bf00      	nop
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <ICM_ReadOneByte+0x68>)
 8000f68:	f005 f9ec 	bl	8006344 <HAL_SPI_GetState>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d1f9      	bne.n	8000f66 <ICM_ReadOneByte+0x46>
			;
		HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2101      	movs	r1, #1
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <ICM_ReadOneByte+0x64>)
 8000f78:	f003 fecc 	bl	8004d14 <HAL_GPIO_WritePin>
	}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020400 	.word	0x40020400
 8000f88:	20000474 	.word	0x20000474

08000f8c <ICM_WriteOneByte>:

	// ESCRITA DE UM BYTE NOS REGISTOS DO ICM, SPI
	void ICM_WriteOneByte(uint8_t reg, uint8_t Data) // ***
	{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	460a      	mov	r2, r1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
		reg = reg & 0x7F;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <ICM_WriteOneByte+0x78>)
 8000fac:	f003 feb2 	bl	8004d14 <HAL_GPIO_WritePin>
		while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8000fb0:	bf00      	nop
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <ICM_WriteOneByte+0x7c>)
 8000fb4:	f005 f9c6 	bl	8006344 <HAL_SPI_GetState>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d1f9      	bne.n	8000fb2 <ICM_WriteOneByte+0x26>
			;
		HAL_SPI_Transmit_DMA(SPI_BUS, &reg, 1);
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <ICM_WriteOneByte+0x7c>)
 8000fc6:	f004 ff07 	bl	8005dd8 <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8000fca:	bf00      	nop
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <ICM_WriteOneByte+0x7c>)
 8000fce:	f005 f9b9 	bl	8006344 <HAL_SPI_GetState>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d1f9      	bne.n	8000fcc <ICM_WriteOneByte+0x40>
			;
		HAL_SPI_Transmit_DMA(SPI_BUS, &Data, 1);
 8000fd8:	1dbb      	adds	r3, r7, #6
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480a      	ldr	r0, [pc, #40]	; (8001008 <ICM_WriteOneByte+0x7c>)
 8000fe0:	f004 fefa 	bl	8005dd8 <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8000fe4:	bf00      	nop
 8000fe6:	4808      	ldr	r0, [pc, #32]	; (8001008 <ICM_WriteOneByte+0x7c>)
 8000fe8:	f005 f9ac 	bl	8006344 <HAL_SPI_GetState>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d1f9      	bne.n	8000fe6 <ICM_WriteOneByte+0x5a>
			;
		HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <ICM_WriteOneByte+0x78>)
 8000ff8:	f003 fe8c 	bl	8004d14 <HAL_GPIO_WritePin>
	}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40020400 	.word	0x40020400
 8001008:	20000474 	.word	0x20000474

0800100c <i2c_Mag_write>:

	// ESCRITRA EM SO UM REGISTO DO SENSOR AUXILIAR MAGNETOMERO, ABSTRACAO DE I2C PARA SPI
	void i2c_Mag_write(uint8_t reg,uint8_t value)
	{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
		ICM_WriteOneByte(0x7F, 0x30);
 800101c:	2130      	movs	r1, #48	; 0x30
 800101e:	207f      	movs	r0, #127	; 0x7f
 8001020:	f7ff ffb4 	bl	8000f8c <ICM_WriteOneByte>

		HAL_Delay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f001 ff5d 	bl	8002ee4 <HAL_Delay>
		ICM_WriteOneByte(0x03 ,0x0C);//mode: write
 800102a:	210c      	movs	r1, #12
 800102c:	2003      	movs	r0, #3
 800102e:	f7ff ffad 	bl	8000f8c <ICM_WriteOneByte>

		HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f001 ff56 	bl	8002ee4 <HAL_Delay>
		ICM_WriteOneByte(0x04 ,reg);//set reg addr
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4619      	mov	r1, r3
 800103c:	2004      	movs	r0, #4
 800103e:	f7ff ffa5 	bl	8000f8c <ICM_WriteOneByte>

		HAL_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f001 ff4e 	bl	8002ee4 <HAL_Delay>
		ICM_WriteOneByte(0x06 ,value);//send value
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	4619      	mov	r1, r3
 800104c:	2006      	movs	r0, #6
 800104e:	f7ff ff9d 	bl	8000f8c <ICM_WriteOneByte>

		HAL_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f001 ff46 	bl	8002ee4 <HAL_Delay>
	}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <ICM_PowerOn>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCAO PRINCIPAL COMUM A AMBOS ///////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ICM_PowerOn(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

	//RESET THE ICM
	ICM_SelectBank(USER_BANK_0);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f8a6 	bl	80011b8 <ICM_SelectBank>
	ICM_WriteOneByte(PWR_MGMT_1 , 0x80);
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	2006      	movs	r0, #6
 8001070:	f7ff ff8c 	bl	8000f8c <ICM_WriteOneByte>
	HAL_Delay(10);
 8001074:	200a      	movs	r0, #10
 8001076:	f001 ff35 	bl	8002ee4 <HAL_Delay>
	ICM_SelectBank(USER_BANK_0);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f89c 	bl	80011b8 <ICM_SelectBank>
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f001 ff2f 	bl	8002ee4 <HAL_Delay>
	uint8_t whoami = 0xEA;
 8001086:	23ea      	movs	r3, #234	; 0xea
 8001088:	71fb      	strb	r3, [r7, #7]
	uint8_t test = ICM_WHOAMI();
 800108a:	f000 f8d5 	bl	8001238 <ICM_WHOAMI>
 800108e:	4603      	mov	r3, r0
 8001090:	71bb      	strb	r3, [r7, #6]

	if (test == whoami) {
 8001092:	79ba      	ldrb	r2, [r7, #6]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	429a      	cmp	r2, r3
 8001098:	d125      	bne.n	80010e6 <ICM_PowerOn+0x86>
			ICM_Magnetometer_Init();
			ICM_Magnetometer_Calibrate(magBias,magScale);
		}
#elif defined(CORYCLINE)*/

		ICM_CSHigh();
 800109a:	f000 f8a3 	bl	80011e4 <ICM_CSHigh>
		HAL_Delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f001 ff20 	bl	8002ee4 <HAL_Delay>
		ICM_SelectBank(USER_BANK_0);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 f887 	bl	80011b8 <ICM_SelectBank>
		HAL_Delay(10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f001 ff1a 	bl	8002ee4 <HAL_Delay>
		ICM_Disable_I2C();
 80010b0:	f000 f890 	bl	80011d4 <ICM_Disable_I2C>
		HAL_Delay(10);
 80010b4:	200a      	movs	r0, #10
 80010b6:	f001 ff15 	bl	8002ee4 <HAL_Delay>
		ICM_SetClock((uint8_t)CLK_BEST_AVAIL);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 f89e 	bl	80011fc <ICM_SetClock>
		HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f001 ff0f 	bl	8002ee4 <HAL_Delay>
		ICM_AccelGyroOff();
 80010c6:	f000 f8a7 	bl	8001218 <ICM_AccelGyroOff>
		HAL_Delay(20);
 80010ca:	2014      	movs	r0, #20
 80010cc:	f001 ff0a 	bl	8002ee4 <HAL_Delay>
		ICM_AccelGyroOn();
 80010d0:	f000 f8aa 	bl	8001228 <ICM_AccelGyroOn>
		HAL_Delay(10);
 80010d4:	200a      	movs	r0, #10
 80010d6:	f001 ff05 	bl	8002ee4 <HAL_Delay>
		ICM_Initialize();
 80010da:	f000 f813 	bl	8001104 <ICM_Initialize>
		HAL_Delay(10);
 80010de:	200a      	movs	r0, #10
 80010e0:	f001 ff00 	bl	8002ee4 <HAL_Delay>
//#endif
	} else {
		printf("Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		HAL_Delay(100);
	}
}
 80010e4:	e007      	b.n	80010f6 <ICM_PowerOn+0x96>
		printf("Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <ICM_PowerOn+0xa0>)
 80010ec:	f008 f958 	bl	80093a0 <iprintf>
		HAL_Delay(100);
 80010f0:	2064      	movs	r0, #100	; 0x64
 80010f2:	f001 fef7 	bl	8002ee4 <HAL_Delay>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800b0d0 	.word	0x0800b0d0

08001104 <ICM_Initialize>:
//////////////////////////  FUNCOES DE FUNCIONAMENTO PARA O (2)  ////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// INICIALIZACAO DO ICM/MAG PARA O (2) NAO FAZ CALIBRACAO, SO SET OS RANGES E SPECS
	uint16_t ICM_Initialize(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
		ICM_SelectBank(USER_BANK_2);
 8001108:	2020      	movs	r0, #32
 800110a:	f000 f855 	bl	80011b8 <ICM_SelectBank>
		HAL_Delay(20);
 800110e:	2014      	movs	r0, #20
 8001110:	f001 fee8 	bl	8002ee4 <HAL_Delay>
		ICM_SetGyroRateLPF(GYRO_RATE_250, GYRO_LPF_17HZ);
 8001114:	2129      	movs	r1, #41	; 0x29
 8001116:	2000      	movs	r0, #0
 8001118:	f000 f89d 	bl	8001256 <ICM_SetGyroRateLPF>
		HAL_Delay(10);
 800111c:	200a      	movs	r0, #10
 800111e:	f001 fee1 	bl	8002ee4 <HAL_Delay>

		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(0x00, 0x0A);
 8001122:	210a      	movs	r1, #10
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff ff31 	bl	8000f8c <ICM_WriteOneByte>
		HAL_Delay(10);
 800112a:	200a      	movs	r0, #10
 800112c:	f001 feda 	bl	8002ee4 <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(0x14, (0x04 | 0x11));
 8001130:	2115      	movs	r1, #21
 8001132:	2014      	movs	r0, #20
 8001134:	f7ff ff2a 	bl	8000f8c <ICM_WriteOneByte>

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(0x10, 0x00);
 8001138:	2100      	movs	r1, #0
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff ff26 	bl	8000f8c <ICM_WriteOneByte>
		HAL_Delay(10);
 8001140:	200a      	movs	r0, #10
 8001142:	f001 fecf 	bl	8002ee4 <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(0x11, 0x0A);
 8001146:	210a      	movs	r1, #10
 8001148:	2011      	movs	r0, #17
 800114a:	f7ff ff1f 	bl	8000f8c <ICM_WriteOneByte>
		HAL_Delay(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f001 fec8 	bl	8002ee4 <HAL_Delay>

		ICM_SelectBank(USER_BANK_2);
 8001154:	2020      	movs	r0, #32
 8001156:	f000 f82f 	bl	80011b8 <ICM_SelectBank>
		HAL_Delay(20);
 800115a:	2014      	movs	r0, #20
 800115c:	f001 fec2 	bl	8002ee4 <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(0x7F, 0x00); // Select user bank 0
 8001160:	2100      	movs	r1, #0
 8001162:	207f      	movs	r0, #127	; 0x7f
 8001164:	f7ff ff12 	bl	8000f8c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8001168:	2130      	movs	r1, #48	; 0x30
 800116a:	200f      	movs	r0, #15
 800116c:	f7ff ff0e 	bl	8000f8c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x03, 0x20); // I2C_MST_EN
 8001170:	2120      	movs	r1, #32
 8001172:	2003      	movs	r0, #3
 8001174:	f7ff ff0a 	bl	8000f8c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x7F, 0x30); // Select user bank 3
 8001178:	2130      	movs	r1, #48	; 0x30
 800117a:	207f      	movs	r0, #127	; 0x7f
 800117c:	f7ff ff06 	bl	8000f8c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8001180:	214d      	movs	r1, #77	; 0x4d
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff ff02 	bl	8000f8c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8001188:	2101      	movs	r1, #1
 800118a:	2002      	movs	r0, #2
 800118c:	f7ff fefe 	bl	8000f8c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8001190:	2181      	movs	r1, #129	; 0x81
 8001192:	2005      	movs	r0, #5
 8001194:	f7ff fefa 	bl	8000f8c <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(0x32, 0x01); // Reset AK8963
 8001198:	2101      	movs	r1, #1
 800119a:	2032      	movs	r0, #50	; 0x32
 800119c:	f7ff ff36 	bl	800100c <i2c_Mag_write>
		HAL_Delay(1000);
 80011a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a4:	f001 fe9e 	bl	8002ee4 <HAL_Delay>
		i2c_Mag_write(0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 80011a8:	2102      	movs	r1, #2
 80011aa:	2031      	movs	r0, #49	; 0x31
 80011ac:	f7ff ff2e 	bl	800100c <i2c_Mag_write>

		return 1337;
 80011b0:	f240 5339 	movw	r3, #1337	; 0x539
	}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <ICM_SelectBank>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCOES UTEIS ORIGINALMENTES USADAS SO PARA (2) NO ENTANTO ALGUMAS FORAM APROVEITADAS PARA (1) ///////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ICM_SelectBank(uint8_t bank) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(USER_BANK_SEL, bank);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4619      	mov	r1, r3
 80011c6:	207f      	movs	r0, #127	; 0x7f
 80011c8:	f7ff fee0 	bl	8000f8c <ICM_WriteOneByte>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <ICM_Disable_I2C>:
void ICM_Disable_I2C(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x03, 0x78);
 80011d8:	2178      	movs	r1, #120	; 0x78
 80011da:	2003      	movs	r0, #3
 80011dc:	f7ff fed6 	bl	8000f8c <ICM_WriteOneByte>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <ICM_CSHigh>:
void ICM_CSHigh(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2101      	movs	r1, #1
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <ICM_CSHigh+0x14>)
 80011ee:	f003 fd91 	bl	8004d14 <HAL_GPIO_WritePin>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020400 	.word	0x40020400

080011fc <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(uint8_t clk) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(PWR_MGMT_1, clk);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4619      	mov	r1, r3
 800120a:	2006      	movs	r0, #6
 800120c:	f7ff febe 	bl	8000f8c <ICM_WriteOneByte>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(PWR_MGMT_2, (0x38 | 0x07));
 800121c:	213f      	movs	r1, #63	; 0x3f
 800121e:	2007      	movs	r0, #7
 8001220:	f7ff feb4 	bl	8000f8c <ICM_WriteOneByte>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x07, (0x00 | 0x00));
 800122c:	2100      	movs	r1, #0
 800122e:	2007      	movs	r0, #7
 8001230:	f7ff feac 	bl	8000f8c <ICM_WriteOneByte>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	uint8_t spiData = 0x01;
 800123e:	2301      	movs	r3, #1
 8001240:	71fb      	strb	r3, [r7, #7]
	ICM_ReadOneByte(0x00, &spiData);
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	4619      	mov	r1, r3
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fe6a 	bl	8000f20 <ICM_ReadOneByte>
	return spiData;
 800124c:	79fb      	ldrb	r3, [r7, #7]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(uint8_t rate, uint8_t lpf) {
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	460a      	mov	r2, r1
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	4613      	mov	r3, r2
 8001264:	71bb      	strb	r3, [r7, #6]
	ICM_WriteOneByte(GYRO_CONFIG_1, (rate|lpf));
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	4313      	orrs	r3, r2
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fe8b 	bl	8000f8c <ICM_WriteOneByte>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2120      	movs	r1, #32
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <SELECT+0x18>)
 800128a:	f003 fd43 	bl	8004d14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f001 fe28 	bl	8002ee4 <HAL_Delay>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40020800 	.word	0x40020800

0800129c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2120      	movs	r1, #32
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <DESELECT+0x18>)
 80012a6:	f003 fd35 	bl	8004d14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f001 fe1a 	bl	8002ee4 <HAL_Delay>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40020800 	.word	0x40020800

080012b8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012c2:	bf00      	nop
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <SPI_TxByte+0x30>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d1f8      	bne.n	80012c4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80012d2:	1df9      	adds	r1, r7, #7
 80012d4:	2364      	movs	r3, #100	; 0x64
 80012d6:	2201      	movs	r2, #1
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <SPI_TxByte+0x30>)
 80012da:	f004 faa7 	bl	800582c <HAL_SPI_Transmit>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000474 	.word	0x20000474

080012ec <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012f8:	bf00      	nop
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <SPI_TxBuffer+0x30>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b02      	cmp	r3, #2
 8001306:	d1f8      	bne.n	80012fa <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001308:	887a      	ldrh	r2, [r7, #2]
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4803      	ldr	r0, [pc, #12]	; (800131c <SPI_TxBuffer+0x30>)
 8001310:	f004 fa8c 	bl	800582c <HAL_SPI_Transmit>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000474 	.word	0x20000474

08001320 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001326:	23ff      	movs	r3, #255	; 0xff
 8001328:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800132a:	bf00      	nop
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <SPI_RxByte+0x34>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d1f8      	bne.n	800132c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800133a:	1dba      	adds	r2, r7, #6
 800133c:	1df9      	adds	r1, r7, #7
 800133e:	2364      	movs	r3, #100	; 0x64
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <SPI_RxByte+0x34>)
 8001346:	f004 fba5 	bl	8005a94 <HAL_SPI_TransmitReceive>

	return data;
 800134a:	79bb      	ldrb	r3, [r7, #6]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000474 	.word	0x20000474

08001358 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001360:	f7ff ffde 	bl	8001320 <SPI_RxByte>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	701a      	strb	r2, [r3, #0]
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <SD_ReadyWait+0x30>)
 800137c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001380:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001382:	f7ff ffcd 	bl	8001320 <SPI_RxByte>
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2bff      	cmp	r3, #255	; 0xff
 800138e:	d004      	beq.n	800139a <SD_ReadyWait+0x26>
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SD_ReadyWait+0x30>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f3      	bne.n	8001382 <SD_ReadyWait+0xe>

	return res;
 800139a:	79fb      	ldrb	r3, [r7, #7]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20002a44 	.word	0x20002a44

080013a8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80013ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013b2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80013b4:	f7ff ff72 	bl	800129c <DESELECT>
	for(int i = 0; i < 10; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	e005      	b.n	80013ca <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80013be:	20ff      	movs	r0, #255	; 0xff
 80013c0:	f7ff ff7a 	bl	80012b8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	ddf6      	ble.n	80013be <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80013d0:	f7ff ff56 	bl	8001280 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80013e8:	2395      	movs	r3, #149	; 0x95
 80013ea:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80013ec:	463b      	mov	r3, r7
 80013ee:	2106      	movs	r1, #6
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff7b 	bl	80012ec <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80013f6:	e002      	b.n	80013fe <SD_PowerOn+0x56>
	{
		cnt--;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80013fe:	f7ff ff8f 	bl	8001320 <SPI_RxByte>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d002      	beq.n	800140e <SD_PowerOn+0x66>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f4      	bne.n	80013f8 <SD_PowerOn+0x50>
	}

	DESELECT();
 800140e:	f7ff ff45 	bl	800129c <DESELECT>
	SPI_TxByte(0XFF);
 8001412:	20ff      	movs	r0, #255	; 0xff
 8001414:	f7ff ff50 	bl	80012b8 <SPI_TxByte>

	PowerFlag = 1;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <SD_PowerOn+0x80>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000211 	.word	0x20000211

0800142c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <SD_PowerOff+0x14>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000211 	.word	0x20000211

08001444 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <SD_CheckPower+0x14>)
 800144a:	781b      	ldrb	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000211 	.word	0x20000211

0800145c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <SD_RxDataBlock+0x5c>)
 8001468:	22c8      	movs	r2, #200	; 0xc8
 800146a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800146c:	f7ff ff58 	bl	8001320 <SPI_RxByte>
 8001470:	4603      	mov	r3, r0
 8001472:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d104      	bne.n	8001484 <SD_RxDataBlock+0x28>
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <SD_RxDataBlock+0x5c>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f3      	bne.n	800146c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2bfe      	cmp	r3, #254	; 0xfe
 8001488:	d001      	beq.n	800148e <SD_RxDataBlock+0x32>
 800148a:	2300      	movs	r3, #0
 800148c:	e00f      	b.n	80014ae <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <SPI_RxBytePtr>
	} while(len--);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	603a      	str	r2, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f4      	bne.n	800148e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80014a4:	f7ff ff3c 	bl	8001320 <SPI_RxByte>
	SPI_RxByte();
 80014a8:	f7ff ff3a 	bl	8001320 <SPI_RxByte>

	return TRUE;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20002a46 	.word	0x20002a46

080014bc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80014cc:	f7ff ff52 	bl	8001374 <SD_ReadyWait>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2bff      	cmp	r3, #255	; 0xff
 80014d4:	d001      	beq.n	80014da <SD_TxDataBlock+0x1e>
 80014d6:	2300      	movs	r3, #0
 80014d8:	e02f      	b.n	800153a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff feeb 	bl	80012b8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	2bfd      	cmp	r3, #253	; 0xfd
 80014e6:	d020      	beq.n	800152a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fefd 	bl	80012ec <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80014f2:	f7ff ff15 	bl	8001320 <SPI_RxByte>
		SPI_RxByte();
 80014f6:	f7ff ff13 	bl	8001320 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80014fa:	e00b      	b.n	8001514 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80014fc:	f7ff ff10 	bl	8001320 <SPI_RxByte>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2b05      	cmp	r3, #5
 800150c:	d006      	beq.n	800151c <SD_TxDataBlock+0x60>
			i++;
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	3301      	adds	r3, #1
 8001512:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	2b40      	cmp	r3, #64	; 0x40
 8001518:	d9f0      	bls.n	80014fc <SD_TxDataBlock+0x40>
 800151a:	e000      	b.n	800151e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800151c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800151e:	bf00      	nop
 8001520:	f7ff fefe 	bl	8001320 <SPI_RxByte>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0fa      	beq.n	8001520 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b05      	cmp	r3, #5
 8001532:	d101      	bne.n	8001538 <SD_TxDataBlock+0x7c>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	6039      	str	r1, [r7, #0]
 800154c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800154e:	f7ff ff11 	bl	8001374 <SD_ReadyWait>
 8001552:	4603      	mov	r3, r0
 8001554:	2bff      	cmp	r3, #255	; 0xff
 8001556:	d001      	beq.n	800155c <SD_SendCmd+0x1a>
 8001558:	23ff      	movs	r3, #255	; 0xff
 800155a:	e042      	b.n	80015e2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff feaa 	bl	80012b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	0e1b      	lsrs	r3, r3, #24
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fea4 	bl	80012b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	0c1b      	lsrs	r3, r3, #16
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe9e 	bl	80012b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fe98 	bl	80012b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fe93 	bl	80012b8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b40      	cmp	r3, #64	; 0x40
 8001596:	d102      	bne.n	800159e <SD_SendCmd+0x5c>
 8001598:	2395      	movs	r3, #149	; 0x95
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e007      	b.n	80015ae <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b48      	cmp	r3, #72	; 0x48
 80015a2:	d102      	bne.n	80015aa <SD_SendCmd+0x68>
 80015a4:	2387      	movs	r3, #135	; 0x87
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e001      	b.n	80015ae <SD_SendCmd+0x6c>
	else crc = 1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fe81 	bl	80012b8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b4c      	cmp	r3, #76	; 0x4c
 80015ba:	d101      	bne.n	80015c0 <SD_SendCmd+0x7e>
 80015bc:	f7ff feb0 	bl	8001320 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80015c0:	230a      	movs	r3, #10
 80015c2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80015c4:	f7ff feac 	bl	8001320 <SPI_RxByte>
 80015c8:	4603      	mov	r3, r0
 80015ca:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80015cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da05      	bge.n	80015e0 <SD_SendCmd+0x9e>
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	73bb      	strb	r3, [r7, #14]
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f1      	bne.n	80015c4 <SD_SendCmd+0x82>

	return res;
 80015e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SD_disk_initialize+0x14>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0d6      	b.n	80017ae <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001600:	4b6d      	ldr	r3, [pc, #436]	; (80017b8 <SD_disk_initialize+0x1cc>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <SD_disk_initialize+0x2a>
 800160e:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <SD_disk_initialize+0x1cc>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	e0cb      	b.n	80017ae <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001616:	f7ff fec7 	bl	80013a8 <SD_PowerOn>

	/* slave select */
	SELECT();
 800161a:	f7ff fe31 	bl	8001280 <SELECT>

	/* check disk type */
	type = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001622:	2100      	movs	r1, #0
 8001624:	2040      	movs	r0, #64	; 0x40
 8001626:	f7ff ff8c 	bl	8001542 <SD_SendCmd>
 800162a:	4603      	mov	r3, r0
 800162c:	2b01      	cmp	r3, #1
 800162e:	f040 80a6 	bne.w	800177e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <SD_disk_initialize+0x1d0>)
 8001634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001638:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800163a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800163e:	2048      	movs	r0, #72	; 0x48
 8001640:	f7ff ff7f 	bl	8001542 <SD_SendCmd>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d158      	bne.n	80016fc <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e00c      	b.n	800166a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001650:	7bfc      	ldrb	r4, [r7, #15]
 8001652:	f7ff fe65 	bl	8001320 <SPI_RxByte>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	4423      	add	r3, r4
 8001660:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	3301      	adds	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d9ef      	bls.n	8001650 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001670:	7abb      	ldrb	r3, [r7, #10]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f040 8083 	bne.w	800177e <SD_disk_initialize+0x192>
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	2baa      	cmp	r3, #170	; 0xaa
 800167c:	d17f      	bne.n	800177e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800167e:	2100      	movs	r1, #0
 8001680:	2077      	movs	r0, #119	; 0x77
 8001682:	f7ff ff5e 	bl	8001542 <SD_SendCmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	d807      	bhi.n	800169c <SD_disk_initialize+0xb0>
 800168c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001690:	2069      	movs	r0, #105	; 0x69
 8001692:	f7ff ff56 	bl	8001542 <SD_SendCmd>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800169c:	4b47      	ldr	r3, [pc, #284]	; (80017bc <SD_disk_initialize+0x1d0>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1eb      	bne.n	800167e <SD_disk_initialize+0x92>
 80016a6:	e000      	b.n	80016aa <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80016a8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <SD_disk_initialize+0x1d0>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d064      	beq.n	800177e <SD_disk_initialize+0x192>
 80016b4:	2100      	movs	r1, #0
 80016b6:	207a      	movs	r0, #122	; 0x7a
 80016b8:	f7ff ff43 	bl	8001542 <SD_SendCmd>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d15d      	bne.n	800177e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e00c      	b.n	80016e2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80016c8:	7bfc      	ldrb	r4, [r7, #15]
 80016ca:	f7ff fe29 	bl	8001320 <SPI_RxByte>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4423      	add	r3, r4
 80016d8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d9ef      	bls.n	80016c8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80016e8:	7a3b      	ldrb	r3, [r7, #8]
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SD_disk_initialize+0x10a>
 80016f2:	230c      	movs	r3, #12
 80016f4:	e000      	b.n	80016f8 <SD_disk_initialize+0x10c>
 80016f6:	2304      	movs	r3, #4
 80016f8:	73bb      	strb	r3, [r7, #14]
 80016fa:	e040      	b.n	800177e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80016fc:	2100      	movs	r1, #0
 80016fe:	2077      	movs	r0, #119	; 0x77
 8001700:	f7ff ff1f 	bl	8001542 <SD_SendCmd>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d808      	bhi.n	800171c <SD_disk_initialize+0x130>
 800170a:	2100      	movs	r1, #0
 800170c:	2069      	movs	r0, #105	; 0x69
 800170e:	f7ff ff18 	bl	8001542 <SD_SendCmd>
 8001712:	4603      	mov	r3, r0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d801      	bhi.n	800171c <SD_disk_initialize+0x130>
 8001718:	2302      	movs	r3, #2
 800171a:	e000      	b.n	800171e <SD_disk_initialize+0x132>
 800171c:	2301      	movs	r3, #1
 800171e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001720:	7bbb      	ldrb	r3, [r7, #14]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d10e      	bne.n	8001744 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001726:	2100      	movs	r1, #0
 8001728:	2077      	movs	r0, #119	; 0x77
 800172a:	f7ff ff0a 	bl	8001542 <SD_SendCmd>
 800172e:	4603      	mov	r3, r0
 8001730:	2b01      	cmp	r3, #1
 8001732:	d80e      	bhi.n	8001752 <SD_disk_initialize+0x166>
 8001734:	2100      	movs	r1, #0
 8001736:	2069      	movs	r0, #105	; 0x69
 8001738:	f7ff ff03 	bl	8001542 <SD_SendCmd>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d107      	bne.n	8001752 <SD_disk_initialize+0x166>
 8001742:	e00d      	b.n	8001760 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001744:	2100      	movs	r1, #0
 8001746:	2041      	movs	r0, #65	; 0x41
 8001748:	f7ff fefb 	bl	8001542 <SD_SendCmd>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <SD_disk_initialize+0x1d0>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e1      	bne.n	8001720 <SD_disk_initialize+0x134>
 800175c:	e000      	b.n	8001760 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800175e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <SD_disk_initialize+0x1d0>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <SD_disk_initialize+0x18e>
 800176a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176e:	2050      	movs	r0, #80	; 0x50
 8001770:	f7ff fee7 	bl	8001542 <SD_SendCmd>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SD_disk_initialize+0x192>
 800177a:	2300      	movs	r3, #0
 800177c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <SD_disk_initialize+0x1d4>)
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001784:	f7ff fd8a 	bl	800129c <DESELECT>
	SPI_RxByte();
 8001788:	f7ff fdca 	bl	8001320 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <SD_disk_initialize+0x1cc>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SD_disk_initialize+0x1cc>)
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e001      	b.n	80017a8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80017a4:	f7ff fe42 	bl	800142c <SD_PowerOff>
	}

	return Stat;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <SD_disk_initialize+0x1cc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20002a46 	.word	0x20002a46
 80017c0:	20000210 	.word	0x20000210

080017c4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SD_disk_status+0x14>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e002      	b.n	80017de <SD_disk_status+0x1a>
	return Stat;
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SD_disk_status+0x28>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000000 	.word	0x20000000

080017f0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <SD_disk_read+0x1c>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <SD_disk_read+0x20>
 800180c:	2304      	movs	r3, #4
 800180e:	e051      	b.n	80018b4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <SD_disk_read+0xcc>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SD_disk_read+0x32>
 800181e:	2303      	movs	r3, #3
 8001820:	e048      	b.n	80018b4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <SD_disk_read+0xd0>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <SD_disk_read+0x44>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	025b      	lsls	r3, r3, #9
 8001832:	607b      	str	r3, [r7, #4]

	SELECT();
 8001834:	f7ff fd24 	bl	8001280 <SELECT>

	if (count == 1)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d111      	bne.n	8001862 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	2051      	movs	r0, #81	; 0x51
 8001842:	f7ff fe7e 	bl	8001542 <SD_SendCmd>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d129      	bne.n	80018a0 <SD_disk_read+0xb0>
 800184c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001850:	68b8      	ldr	r0, [r7, #8]
 8001852:	f7ff fe03 	bl	800145c <SD_RxDataBlock>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d021      	beq.n	80018a0 <SD_disk_read+0xb0>
 800185c:	2300      	movs	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	e01e      	b.n	80018a0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	2052      	movs	r0, #82	; 0x52
 8001866:	f7ff fe6c 	bl	8001542 <SD_SendCmd>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d117      	bne.n	80018a0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001874:	68b8      	ldr	r0, [r7, #8]
 8001876:	f7ff fdf1 	bl	800145c <SD_RxDataBlock>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00a      	beq.n	8001896 <SD_disk_read+0xa6>
				buff += 512;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001886:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	3b01      	subs	r3, #1
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ed      	bne.n	8001870 <SD_disk_read+0x80>
 8001894:	e000      	b.n	8001898 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001896:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001898:	2100      	movs	r1, #0
 800189a:	204c      	movs	r0, #76	; 0x4c
 800189c:	f7ff fe51 	bl	8001542 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80018a0:	f7ff fcfc 	bl	800129c <DESELECT>
	SPI_RxByte();
 80018a4:	f7ff fd3c 	bl	8001320 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000210 	.word	0x20000210

080018c4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <SD_disk_write+0x1c>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <SD_disk_write+0x20>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e06b      	b.n	80019bc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018e4:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <SD_disk_write+0x100>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SD_disk_write+0x32>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e062      	b.n	80019bc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <SD_disk_write+0x100>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SD_disk_write+0x44>
 8001904:	2302      	movs	r3, #2
 8001906:	e059      	b.n	80019bc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <SD_disk_write+0x104>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <SD_disk_write+0x56>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	607b      	str	r3, [r7, #4]

	SELECT();
 800191a:	f7ff fcb1 	bl	8001280 <SELECT>

	if (count == 1)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d110      	bne.n	8001946 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	2058      	movs	r0, #88	; 0x58
 8001928:	f7ff fe0b 	bl	8001542 <SD_SendCmd>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d13a      	bne.n	80019a8 <SD_disk_write+0xe4>
 8001932:	21fe      	movs	r1, #254	; 0xfe
 8001934:	68b8      	ldr	r0, [r7, #8]
 8001936:	f7ff fdc1 	bl	80014bc <SD_TxDataBlock>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d033      	beq.n	80019a8 <SD_disk_write+0xe4>
			count = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	e030      	b.n	80019a8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <SD_disk_write+0x104>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001952:	2100      	movs	r1, #0
 8001954:	2077      	movs	r0, #119	; 0x77
 8001956:	f7ff fdf4 	bl	8001542 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	2057      	movs	r0, #87	; 0x57
 800195e:	f7ff fdf0 	bl	8001542 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	2059      	movs	r0, #89	; 0x59
 8001966:	f7ff fdec 	bl	8001542 <SD_SendCmd>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d11b      	bne.n	80019a8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001970:	21fc      	movs	r1, #252	; 0xfc
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	f7ff fda2 	bl	80014bc <SD_TxDataBlock>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00a      	beq.n	8001994 <SD_disk_write+0xd0>
				buff += 512;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001984:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ee      	bne.n	8001970 <SD_disk_write+0xac>
 8001992:	e000      	b.n	8001996 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001994:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001996:	21fd      	movs	r1, #253	; 0xfd
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fd8f 	bl	80014bc <SD_TxDataBlock>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <SD_disk_write+0xe4>
			{
				count = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80019a8:	f7ff fc78 	bl	800129c <DESELECT>
	SPI_RxByte();
 80019ac:	f7ff fcb8 	bl	8001320 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000210 	.word	0x20000210

080019cc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b08b      	sub	sp, #44	; 0x2c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	603a      	str	r2, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
 80019d8:	460b      	mov	r3, r1
 80019da:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SD_disk_ioctl+0x1e>
 80019e6:	2304      	movs	r3, #4
 80019e8:	e115      	b.n	8001c16 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d124      	bne.n	8001a40 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d012      	beq.n	8001a24 <SD_disk_ioctl+0x58>
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	dc1a      	bgt.n	8001a38 <SD_disk_ioctl+0x6c>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <SD_disk_ioctl+0x40>
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d006      	beq.n	8001a18 <SD_disk_ioctl+0x4c>
 8001a0a:	e015      	b.n	8001a38 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001a0c:	f7ff fd0e 	bl	800142c <SD_PowerOff>
			res = RES_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a16:	e0fc      	b.n	8001c12 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001a18:	f7ff fcc6 	bl	80013a8 <SD_PowerOn>
			res = RES_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a22:	e0f6      	b.n	8001c12 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	1c5c      	adds	r4, r3, #1
 8001a28:	f7ff fd0c 	bl	8001444 <SD_CheckPower>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a36:	e0ec      	b.n	8001c12 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a3e:	e0e8      	b.n	8001c12 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a40:	4b77      	ldr	r3, [pc, #476]	; (8001c20 <SD_disk_ioctl+0x254>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SD_disk_ioctl+0x86>
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e0e1      	b.n	8001c16 <SD_disk_ioctl+0x24a>

		SELECT();
 8001a52:	f7ff fc15 	bl	8001280 <SELECT>

		switch (ctrl)
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	2b0d      	cmp	r3, #13
 8001a5a:	f200 80cb 	bhi.w	8001bf4 <SD_disk_ioctl+0x228>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <SD_disk_ioctl+0x98>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001b5f 	.word	0x08001b5f
 8001a68:	08001a9d 	.word	0x08001a9d
 8001a6c:	08001b4f 	.word	0x08001b4f
 8001a70:	08001bf5 	.word	0x08001bf5
 8001a74:	08001bf5 	.word	0x08001bf5
 8001a78:	08001bf5 	.word	0x08001bf5
 8001a7c:	08001bf5 	.word	0x08001bf5
 8001a80:	08001bf5 	.word	0x08001bf5
 8001a84:	08001bf5 	.word	0x08001bf5
 8001a88:	08001bf5 	.word	0x08001bf5
 8001a8c:	08001bf5 	.word	0x08001bf5
 8001a90:	08001b71 	.word	0x08001b71
 8001a94:	08001b95 	.word	0x08001b95
 8001a98:	08001bb9 	.word	0x08001bb9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2049      	movs	r0, #73	; 0x49
 8001aa0:	f7ff fd4f 	bl	8001542 <SD_SendCmd>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 80a8 	bne.w	8001bfc <SD_disk_ioctl+0x230>
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fcd2 	bl	800145c <SD_RxDataBlock>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 809e 	beq.w	8001bfc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10e      	bne.n	8001ae8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001aca:	7d7b      	ldrb	r3, [r7, #21]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	7d3b      	ldrb	r3, [r7, #20]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001ade:	8bfb      	ldrh	r3, [r7, #30]
 8001ae0:	029a      	lsls	r2, r3, #10
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e02e      	b.n	8001b46 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ae8:	7c7b      	ldrb	r3, [r7, #17]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	7dbb      	ldrb	r3, [r7, #22]
 8001af2:	09db      	lsrs	r3, r3, #7
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	7d7b      	ldrb	r3, [r7, #21]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f003 0306 	and.w	r3, r3, #6
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b10:	7d3b      	ldrb	r3, [r7, #20]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	7cfb      	ldrb	r3, [r7, #19]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	7cbb      	ldrb	r3, [r7, #18]
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b38:	8bfa      	ldrh	r2, [r7, #30]
 8001b3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b3e:	3b09      	subs	r3, #9
 8001b40:	409a      	lsls	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001b4c:	e056      	b.n	8001bfc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b54:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b5c:	e055      	b.n	8001c0a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001b5e:	f7ff fc09 	bl	8001374 <SD_ReadyWait>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2bff      	cmp	r3, #255	; 0xff
 8001b66:	d14b      	bne.n	8001c00 <SD_disk_ioctl+0x234>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b6e:	e047      	b.n	8001c00 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b70:	2100      	movs	r1, #0
 8001b72:	2049      	movs	r0, #73	; 0x49
 8001b74:	f7ff fce5 	bl	8001542 <SD_SendCmd>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d142      	bne.n	8001c04 <SD_disk_ioctl+0x238>
 8001b7e:	2110      	movs	r1, #16
 8001b80:	6a38      	ldr	r0, [r7, #32]
 8001b82:	f7ff fc6b 	bl	800145c <SD_RxDataBlock>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d03b      	beq.n	8001c04 <SD_disk_ioctl+0x238>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b92:	e037      	b.n	8001c04 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b94:	2100      	movs	r1, #0
 8001b96:	204a      	movs	r0, #74	; 0x4a
 8001b98:	f7ff fcd3 	bl	8001542 <SD_SendCmd>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d132      	bne.n	8001c08 <SD_disk_ioctl+0x23c>
 8001ba2:	2110      	movs	r1, #16
 8001ba4:	6a38      	ldr	r0, [r7, #32]
 8001ba6:	f7ff fc59 	bl	800145c <SD_RxDataBlock>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d02b      	beq.n	8001c08 <SD_disk_ioctl+0x23c>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001bb6:	e027      	b.n	8001c08 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	207a      	movs	r0, #122	; 0x7a
 8001bbc:	f7ff fcc1 	bl	8001542 <SD_SendCmd>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bcc:	e00b      	b.n	8001be6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001bce:	6a3c      	ldr	r4, [r7, #32]
 8001bd0:	1c63      	adds	r3, r4, #1
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	f7ff fba4 	bl	8001320 <SPI_RxByte>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001be0:	3301      	adds	r3, #1
 8001be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001be6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d9ef      	bls.n	8001bce <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bfa:	e006      	b.n	8001c0a <SD_disk_ioctl+0x23e>
			break;
 8001bfc:	bf00      	nop
 8001bfe:	e004      	b.n	8001c0a <SD_disk_ioctl+0x23e>
			break;
 8001c00:	bf00      	nop
 8001c02:	e002      	b.n	8001c0a <SD_disk_ioctl+0x23e>
			break;
 8001c04:	bf00      	nop
 8001c06:	e000      	b.n	8001c0a <SD_disk_ioctl+0x23e>
			break;
 8001c08:	bf00      	nop
		}

		DESELECT();
 8001c0a:	f7ff fb47 	bl	800129c <DESELECT>
		SPI_RxByte();
 8001c0e:	f7ff fb87 	bl	8001320 <SPI_RxByte>
	}

	return res;
 8001c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	372c      	adds	r7, #44	; 0x2c
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c30:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c40:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c44:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00b      	beq.n	8001c64 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c4c:	e000      	b.n	8001c50 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c4e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f9      	beq.n	8001c4e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c5a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_write>:
  * @brief  The application entry point.
  * @retval int
  */

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e009      	b.n	8001c98 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ffc9 	bl	8001c24 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf1      	blt.n	8001c84 <_write+0x12>
    }
    return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <main>:

int main(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	f5ad 6dfd 	sub.w	sp, sp, #2024	; 0x7e8
 8001cb2:	af00      	add	r7, sp, #0
	uint8_t buff[1200];
	char buffStr[600];
	char nmeaSnt[80];
	uint8_t intSum;
	char hex[2];
	int i,j, file=0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
	////////////////////////////////////////////////////////////////////////////////////

	char *rawSum;
	char smNmbr[3];

	uint8_t cnt = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 37df 	strb.w	r3, [r7, #2015]	; 0x7df
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc0:	f001 f89e 	bl	8002e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc4:	f000 f90c 	bl	8001ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc8:	f000 fb5e 	bl	8002388 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ccc:	f000 fb16 	bl	80022fc <MX_DMA_Init>
  MX_CAN1_Init();
 8001cd0:	f000 f9c6 	bl	8002060 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001cd4:	f000 f9f8 	bl	80020c8 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001cd8:	f000 fa2c 	bl	8002134 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001cdc:	f000 f960 	bl	8001fa0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001ce0:	f000 fa5e 	bl	80021a0 <MX_TIM2_Init>
  MX_UART4_Init();
 8001ce4:	f000 fab6 	bl	8002254 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001ce8:	f000 fade 	bl	80022a8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001cec:	f005 fd2c 	bl	8007748 <MX_FATFS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	// CAN Initiations ///////////////////////////////////////////////////////////////////////////////////////
  	HAL_CAN_Start(&hcan2);
 8001cf0:	4867      	ldr	r0, [pc, #412]	; (8001e90 <main+0x1e4>)
 8001cf2:	f001 fd69 	bl	80037c8 <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4865      	ldr	r0, [pc, #404]	; (8001e90 <main+0x1e4>)
 8001cfa:	f001 ff96 	bl	8003c2a <HAL_CAN_ActivateNotification>
  	//HAL_CAN_DeactivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
	CAN_filter1.FilterBank = 14;
 8001cfe:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <main+0x1e8>)
 8001d00:	220e      	movs	r2, #14
 8001d02:	615a      	str	r2, [r3, #20]
	CAN_filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <main+0x1e8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
	CAN_filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d0a:	4b62      	ldr	r3, [pc, #392]	; (8001e94 <main+0x1e8>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	61da      	str	r2, [r3, #28]
	CAN_filter1.FilterIdHigh = 0x0000;
 8001d10:	4b60      	ldr	r3, [pc, #384]	; (8001e94 <main+0x1e8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
	CAN_filter1.FilterIdLow = 0x0000; //00FF
 8001d16:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <main+0x1e8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
	CAN_filter1.FilterMaskIdHigh = 0x0000; //FFFF
 8001d1c:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <main+0x1e8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
	CAN_filter1.FilterMaskIdLow = 0x0000; //FF00
 8001d22:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <main+0x1e8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
	CAN_filter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d28:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <main+0x1e8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
	CAN_filter1.FilterActivation = ENABLE;
 8001d2e:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <main+0x1e8>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	621a      	str	r2, [r3, #32]
	CAN_filter1.SlaveStartFilterBank = 14;
 8001d34:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <main+0x1e8>)
 8001d36:	220e      	movs	r2, #14
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan2, &CAN_filter1);
 8001d3a:	4956      	ldr	r1, [pc, #344]	; (8001e94 <main+0x1e8>)
 8001d3c:	4854      	ldr	r0, [pc, #336]	; (8001e90 <main+0x1e4>)
 8001d3e:	f001 fc63 	bl	8003608 <HAL_CAN_ConfigFilter>
	//HAL_UART_Receive_DMA(&huart4, buff, 1200);
	////////////////////////////////////////////

	// ICM INITIALIZATIONS ///////////////////////////////////////////////////////////////////////////////////
#if defined(ICM_Enable)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET); // SDCard
 8001d42:	2201      	movs	r2, #1
 8001d44:	2120      	movs	r1, #32
 8001d46:	4854      	ldr	r0, [pc, #336]	; (8001e98 <main+0x1ec>)
 8001d48:	f002 ffe4 	bl	8004d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET); // IMU
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4852      	ldr	r0, [pc, #328]	; (8001e9c <main+0x1f0>)
 8001d52:	f002 ffdf 	bl	8004d14 <HAL_GPIO_WritePin>
	ICM_PowerOn();
 8001d56:	f7ff f983 	bl	8001060 <ICM_PowerOn>
	HAL_Delay(10); // Ainda falta ver se estes valores do ICM são normais antes de estar a ler.
 8001d5a:	200a      	movs	r0, #10
 8001d5c:	f001 f8c2 	bl	8002ee4 <HAL_Delay>
#endif
	//////////////////////////////////////////////////////////////////////////////////////////////////////////

	//SD CARD INIT ///////////////////////////////////////////////////////////////////////////////////////////
	fresult = f_mount(&fs, "/", 1);
 8001d60:	2201      	movs	r2, #1
 8001d62:	494f      	ldr	r1, [pc, #316]	; (8001ea0 <main+0x1f4>)
 8001d64:	484f      	ldr	r0, [pc, #316]	; (8001ea4 <main+0x1f8>)
 8001d66:	f006 fac1 	bl	80082ec <f_mount>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <main+0x1fc>)
 8001d70:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001d72:	4b4d      	ldr	r3, [pc, #308]	; (8001ea8 <main+0x1fc>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <main+0xd6>
	{

		printf("Error 2: Mounting SDCARD.\r\n");
 8001d7a:	484c      	ldr	r0, [pc, #304]	; (8001eac <main+0x200>)
 8001d7c:	f007 fb96 	bl	80094ac <puts>
		while(1)
 8001d80:	e7fe      	b.n	8001d80 <main+0xd4>
		{

		}
	}

	f_getfree("", &fre_clust, &pfs);
 8001d82:	4a4b      	ldr	r2, [pc, #300]	; (8001eb0 <main+0x204>)
 8001d84:	494b      	ldr	r1, [pc, #300]	; (8001eb4 <main+0x208>)
 8001d86:	484c      	ldr	r0, [pc, #304]	; (8001eb8 <main+0x20c>)
 8001d88:	f006 faf6 	bl	8008378 <f_getfree>
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <main+0x204>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	3b02      	subs	r3, #2
 8001d94:	4a46      	ldr	r2, [pc, #280]	; (8001eb0 <main+0x204>)
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	8952      	ldrh	r2, [r2, #10]
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbd0 	bl	8000544 <__aeabi_ui2d>
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <main+0x210>)
 8001daa:	f7fe fc45 	bl	8000638 <__aeabi_dmul>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe ff17 	bl	8000be8 <__aeabi_d2uiz>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <main+0x214>)
 8001dbe:	6013      	str	r3, [r2, #0]
	printf("SD CARD Total Size: \t%lu\n",total);
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <main+0x214>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	483f      	ldr	r0, [pc, #252]	; (8001ec4 <main+0x218>)
 8001dc8:	f007 faea 	bl	80093a0 <iprintf>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001dcc:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <main+0x204>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	895b      	ldrh	r3, [r3, #10]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <main+0x208>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fb03 f302 	mul.w	r3, r3, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fbb1 	bl	8000544 <__aeabi_ui2d>
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <main+0x210>)
 8001de8:	f7fe fc26 	bl	8000638 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe fef8 	bl	8000be8 <__aeabi_d2uiz>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a33      	ldr	r2, [pc, #204]	; (8001ec8 <main+0x21c>)
 8001dfc:	6013      	str	r3, [r2, #0]
	printf("SD CARD Free Space: \t%lu\n\n",free_space);
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <main+0x21c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4619      	mov	r1, r3
 8001e04:	4831      	ldr	r0, [pc, #196]	; (8001ecc <main+0x220>)
 8001e06:	f007 facb 	bl	80093a0 <iprintf>

	if(free_space < total/8)
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <main+0x214>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <main+0x21c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d903      	bls.n	8001e20 <main+0x174>
	{
		printf("Error 3: 1/8 left. \r\n");
 8001e18:	482d      	ldr	r0, [pc, #180]	; (8001ed0 <main+0x224>)
 8001e1a:	f007 fb47 	bl	80094ac <puts>
		while(1){
 8001e1e:	e7fe      	b.n	8001e1e <main+0x172>

	/*while(1){

	}*/
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	int var=0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
	while(1){
		pTxHeader.DLC=1;
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <main+0x228>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	611a      	str	r2, [r3, #16]
		pTxHeader.IDE=CAN_ID_STD;
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <main+0x228>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
		pTxHeader.RTR=CAN_RTR_DATA;
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <main+0x228>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
		pTxHeader.StdId=Especial;
 8001e38:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <main+0x228>)
 8001e3a:	2232      	movs	r2, #50	; 0x32
 8001e3c:	601a      	str	r2, [r3, #0]
		tx_union.bytes[0]=224;
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <main+0x22c>)
 8001e40:	22e0      	movs	r2, #224	; 0xe0
 8001e42:	701a      	strb	r2, [r3, #0]
		tx_union.bytes[1]=250;
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <main+0x22c>)
 8001e46:	22fa      	movs	r2, #250	; 0xfa
 8001e48:	705a      	strb	r2, [r3, #1]
		tx_union.bytes[2]=260;
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <main+0x22c>)
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	709a      	strb	r2, [r3, #2]
		tx_union.bytes[3]=180;
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <main+0x22c>)
 8001e52:	22b4      	movs	r2, #180	; 0xb4
 8001e54:	70da      	strb	r2, [r3, #3]
		tx_union.bytes[4]=165;
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <main+0x22c>)
 8001e58:	22a5      	movs	r2, #165	; 0xa5
 8001e5a:	711a      	strb	r2, [r3, #4]
		tx_union.bytes[5]=165;
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <main+0x22c>)
 8001e5e:	22a5      	movs	r2, #165	; 0xa5
 8001e60:	715a      	strb	r2, [r3, #5]
		HAL_CAN_AddTxMessage(&hcan2, &pTxHeader, &tx_union, &pTxMailbox);
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <main+0x230>)
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <main+0x22c>)
 8001e66:	491b      	ldr	r1, [pc, #108]	; (8001ed4 <main+0x228>)
 8001e68:	4809      	ldr	r0, [pc, #36]	; (8001e90 <main+0x1e4>)
 8001e6a:	f001 fcf1 	bl	8003850 <HAL_CAN_AddTxMessage>
		while(1){
			for (var=0; var < 1000; var++ ) {
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8001e74:	e004      	b.n	8001e80 <main+0x1d4>
 8001e76:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8001e80:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8001e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e88:	dbf5      	blt.n	8001e76 <main+0x1ca>

			}
			break;
 8001e8a:	bf00      	nop
		pTxHeader.DLC=1;
 8001e8c:	e7cb      	b.n	8001e26 <main+0x17a>
 8001e8e:	bf00      	nop
 8001e90:	200016f4 	.word	0x200016f4
 8001e94:	20001814 	.word	0x20001814
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	0800b0f4 	.word	0x0800b0f4
 8001ea4:	20000654 	.word	0x20000654
 8001ea8:	20001880 	.word	0x20001880
 8001eac:	0800b0f8 	.word	0x0800b0f8
 8001eb0:	2000187c 	.word	0x2000187c
 8001eb4:	200004d4 	.word	0x200004d4
 8001eb8:	0800b114 	.word	0x0800b114
 8001ebc:	3fe00000 	.word	0x3fe00000
 8001ec0:	200019b0 	.word	0x200019b0
 8001ec4:	0800b118 	.word	0x0800b118
 8001ec8:	2000171c 	.word	0x2000171c
 8001ecc:	0800b134 	.word	0x0800b134
 8001ed0:	0800b150 	.word	0x0800b150
 8001ed4:	20001694 	.word	0x20001694
 8001ed8:	200018c4 	.word	0x200018c4
 8001edc:	20000538 	.word	0x20000538

08001ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b094      	sub	sp, #80	; 0x50
 8001ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	2234      	movs	r2, #52	; 0x34
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f006 fd39 	bl	8008966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <SystemClock_Config+0xb8>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <SystemClock_Config+0xb8>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
 8001f14:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <SystemClock_Config+0xb8>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f20:	2300      	movs	r3, #0
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <SystemClock_Config+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <SystemClock_Config+0xbc>)
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <SystemClock_Config+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f44:	2301      	movs	r3, #1
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 f9ab 	bl	80052b0 <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001f60:	f000 fa90 	bl	8002484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 ff20 	bl	8004dc4 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f8a:	f000 fa7b 	bl	8002484 <Error_Handler>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3750      	adds	r7, #80	; 0x50
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fb4:	4a28      	ldr	r2, [pc, #160]	; (8002058 <MX_ADC1_Init+0xb8>)
 8001fb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	; (800205c <MX_ADC1_Init+0xbc>)
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001fec:	2202      	movs	r2, #2
 8001fee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_ADC1_Init+0xb4>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ffe:	4815      	ldr	r0, [pc, #84]	; (8002054 <MX_ADC1_Init+0xb4>)
 8002000:	f000 ff94 	bl	8002f2c <HAL_ADC_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800200a:	f000 fa3b 	bl	8002484 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800200e:	2309      	movs	r3, #9
 8002010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002016:	2307      	movs	r3, #7
 8002018:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800201a:	463b      	mov	r3, r7
 800201c:	4619      	mov	r1, r3
 800201e:	480d      	ldr	r0, [pc, #52]	; (8002054 <MX_ADC1_Init+0xb4>)
 8002020:	f000 ffc8 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800202a:	f000 fa2b 	bl	8002484 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800202e:	230b      	movs	r3, #11
 8002030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002032:	2302      	movs	r3, #2
 8002034:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002036:	463b      	mov	r3, r7
 8002038:	4619      	mov	r1, r3
 800203a:	4806      	ldr	r0, [pc, #24]	; (8002054 <MX_ADC1_Init+0xb4>)
 800203c:	f000 ffba 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002046:	f000 fa1d 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200016ac 	.word	0x200016ac
 8002058:	40012000 	.word	0x40012000
 800205c:	0f000001 	.word	0x0f000001

08002060 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_CAN1_Init+0x60>)
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <MX_CAN1_Init+0x64>)
 8002068:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_CAN1_Init+0x60>)
 800206c:	2210      	movs	r2, #16
 800206e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <MX_CAN1_Init+0x60>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_CAN1_Init+0x60>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_CAN1_Init+0x60>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_CAN1_Init+0x60>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <MX_CAN1_Init+0x60>)
 800208a:	2200      	movs	r2, #0
 800208c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_CAN1_Init+0x60>)
 8002090:	2200      	movs	r2, #0
 8002092:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <MX_CAN1_Init+0x60>)
 8002096:	2200      	movs	r2, #0
 8002098:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_CAN1_Init+0x60>)
 800209c:	2200      	movs	r2, #0
 800209e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <MX_CAN1_Init+0x60>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_CAN1_Init+0x60>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_CAN1_Init+0x60>)
 80020ae:	f001 f9af 	bl	8003410 <HAL_CAN_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80020b8:	f000 f9e4 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20001988 	.word	0x20001988
 80020c4:	40006400 	.word	0x40006400

080020c8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80020cc:	4b17      	ldr	r3, [pc, #92]	; (800212c <MX_CAN2_Init+0x64>)
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <MX_CAN2_Init+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <MX_CAN2_Init+0x64>)
 80020d4:	2202      	movs	r2, #2
 80020d6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <MX_CAN2_Init+0x64>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <MX_CAN2_Init+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <MX_CAN2_Init+0x64>)
 80020e6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80020ea:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <MX_CAN2_Init+0x64>)
 80020ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020f2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <MX_CAN2_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_CAN2_Init+0x64>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <MX_CAN2_Init+0x64>)
 8002102:	2200      	movs	r2, #0
 8002104:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_CAN2_Init+0x64>)
 8002108:	2200      	movs	r2, #0
 800210a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <MX_CAN2_Init+0x64>)
 800210e:	2200      	movs	r2, #0
 8002110:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_CAN2_Init+0x64>)
 8002114:	2200      	movs	r2, #0
 8002116:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <MX_CAN2_Init+0x64>)
 800211a:	f001 f979 	bl	8003410 <HAL_CAN_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002124:	f000 f9ae 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200016f4 	.word	0x200016f4
 8002130:	40006800 	.word	0x40006800

08002134 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_SPI1_Init+0x64>)
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <MX_SPI1_Init+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_SPI1_Init+0x64>)
 8002140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002144:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_SPI1_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_SPI1_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_SPI1_Init+0x64>)
 8002154:	2202      	movs	r2, #2
 8002156:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_SPI1_Init+0x64>)
 800215a:	2201      	movs	r2, #1
 800215c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_SPI1_Init+0x64>)
 8002160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002164:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_SPI1_Init+0x64>)
 8002168:	2210      	movs	r2, #16
 800216a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <MX_SPI1_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_SPI1_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <MX_SPI1_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_SPI1_Init+0x64>)
 8002180:	220a      	movs	r2, #10
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	; (8002198 <MX_SPI1_Init+0x64>)
 8002186:	f003 faed 	bl	8005764 <HAL_SPI_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002190:	f000 f978 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000474 	.word	0x20000474
 800219c:	40013000 	.word	0x40013000

080021a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <MX_TIM2_Init+0xb0>)
 80021c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <MX_TIM2_Init+0xb0>)
 80021cc:	f240 3283 	movw	r2, #899	; 0x383
 80021d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <MX_TIM2_Init+0xb0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <MX_TIM2_Init+0xb0>)
 80021da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <MX_TIM2_Init+0xb0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_TIM2_Init+0xb0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021ec:	4818      	ldr	r0, [pc, #96]	; (8002250 <MX_TIM2_Init+0xb0>)
 80021ee:	f004 fb03 	bl	80067f8 <HAL_TIM_PWM_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80021f8:	f000 f944 	bl	8002484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002204:	f107 0320 	add.w	r3, r7, #32
 8002208:	4619      	mov	r1, r3
 800220a:	4811      	ldr	r0, [pc, #68]	; (8002250 <MX_TIM2_Init+0xb0>)
 800220c:	f004 fe36 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002216:	f000 f935 	bl	8002484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800221a:	2360      	movs	r3, #96	; 0x60
 800221c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2204      	movs	r2, #4
 800222e:	4619      	mov	r1, r3
 8002230:	4807      	ldr	r0, [pc, #28]	; (8002250 <MX_TIM2_Init+0xb0>)
 8002232:	f004 fb0d 	bl	8006850 <HAL_TIM_PWM_ConfigChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800223c:	f000 f922 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002240:	4803      	ldr	r0, [pc, #12]	; (8002250 <MX_TIM2_Init+0xb0>)
 8002242:	f000 fb57 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 8002246:	bf00      	nop
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20001884 	.word	0x20001884

08002254 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_UART4_Init+0x4c>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <MX_UART4_Init+0x50>)
 800225c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <MX_UART4_Init+0x4c>)
 8002260:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002264:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_UART4_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <MX_UART4_Init+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_UART4_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_UART4_Init+0x4c>)
 800227a:	220c      	movs	r2, #12
 800227c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <MX_UART4_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MX_UART4_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_UART4_Init+0x4c>)
 800228c:	f004 fe72 	bl	8006f74 <HAL_UART_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002296:	f000 f8f5 	bl	8002484 <Error_Handler>

  //Sempre que mexer no ficheiro .ioc lembrar-se de alterar Baudrate para huart4.Init.BaudRate = GPS_BR;

  /* USER CODE END UART4_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000183c 	.word	0x2000183c
 80022a4:	40004c00 	.word	0x40004c00

080022a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <MX_USART2_UART_Init+0x50>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <MX_USART2_UART_Init+0x4c>)
 80022e0:	f004 fe48 	bl	8006f74 <HAL_UART_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022ea:	f000 f8cb 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200018e8 	.word	0x200018e8
 80022f8:	40004400 	.word	0x40004400

080022fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <MX_DMA_Init+0x88>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <MX_DMA_Init+0x88>)
 800230c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <MX_DMA_Init+0x88>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <MX_DMA_Init+0x88>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <MX_DMA_Init+0x88>)
 8002328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <MX_DMA_Init+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	200d      	movs	r0, #13
 8002340:	f001 ffad 	bl	800429e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002344:	200d      	movs	r0, #13
 8002346:	f001 ffc6 	bl	80042d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2038      	movs	r0, #56	; 0x38
 8002350:	f001 ffa5 	bl	800429e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002354:	2038      	movs	r0, #56	; 0x38
 8002356:	f001 ffbe 	bl	80042d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	203b      	movs	r0, #59	; 0x3b
 8002360:	f001 ff9d 	bl	800429e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002364:	203b      	movs	r0, #59	; 0x3b
 8002366:	f001 ffb6 	bl	80042d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	203c      	movs	r0, #60	; 0x3c
 8002370:	f001 ff95 	bl	800429e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002374:	203c      	movs	r0, #60	; 0x3c
 8002376:	f001 ffae 	bl	80042d6 <HAL_NVIC_EnableIRQ>

}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	4b33      	ldr	r3, [pc, #204]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a32      	ldr	r2, [pc, #200]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a24      	ldr	r2, [pc, #144]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <MX_GPIO_Init+0xe8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2120      	movs	r1, #32
 80023f6:	481f      	ldr	r0, [pc, #124]	; (8002474 <MX_GPIO_Init+0xec>)
 80023f8:	f002 fc8c 	bl	8004d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2121      	movs	r1, #33	; 0x21
 8002400:	481d      	ldr	r0, [pc, #116]	; (8002478 <MX_GPIO_Init+0xf0>)
 8002402:	f002 fc87 	bl	8004d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002406:	2320      	movs	r3, #32
 8002408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240a:	2301      	movs	r3, #1
 800240c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	4619      	mov	r1, r3
 800241c:	4815      	ldr	r0, [pc, #84]	; (8002474 <MX_GPIO_Init+0xec>)
 800241e:	f002 fae5 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8002422:	2321      	movs	r3, #33	; 0x21
 8002424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002426:	2301      	movs	r3, #1
 8002428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	4619      	mov	r1, r3
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <MX_GPIO_Init+0xf0>)
 800243a:	f002 fad7 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800243e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <MX_GPIO_Init+0xf4>)
 8002446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	4619      	mov	r1, r3
 8002452:	480b      	ldr	r0, [pc, #44]	; (8002480 <MX_GPIO_Init+0xf8>)
 8002454:	f002 faca 	bl	80049ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	2028      	movs	r0, #40	; 0x28
 800245e:	f001 ff1e 	bl	800429e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002462:	2028      	movs	r0, #40	; 0x28
 8002464:	f001 ff37 	bl	80042d6 <HAL_NVIC_EnableIRQ>

}
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40020800 	.word	0x40020800
 8002478:	40020400 	.word	0x40020400
 800247c:	10110000 	.word	0x10110000
 8002480:	40020000 	.word	0x40020000

08002484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002488:	b672      	cpsid	i
}
 800248a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800248c:	e7fe      	b.n	800248c <Error_Handler+0x8>
	...

08002490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_MspInit+0x4c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <HAL_MspInit+0x4c>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_MspInit+0x4c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_MspInit+0x4c>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_MspInit+0x4c>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_MspInit+0x4c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a3c      	ldr	r2, [pc, #240]	; (80025f0 <HAL_ADC_MspInit+0x110>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d171      	bne.n	80025e6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <HAL_ADC_MspInit+0x114>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002556:	2302      	movs	r3, #2
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255a:	2303      	movs	r3, #3
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4823      	ldr	r0, [pc, #140]	; (80025f8 <HAL_ADC_MspInit+0x118>)
 800256a:	f002 fa3f 	bl	80049ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800256e:	2302      	movs	r3, #2
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002572:	2303      	movs	r3, #3
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	481e      	ldr	r0, [pc, #120]	; (80025fc <HAL_ADC_MspInit+0x11c>)
 8002582:	f002 fa33 	bl	80049ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_ADC_MspInit+0x120>)
 8002588:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_ADC_MspInit+0x124>)
 800258a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_ADC_MspInit+0x120>)
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_ADC_MspInit+0x120>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_ADC_MspInit+0x120>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800259e:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025cc:	f001 fe9e 	bl	800430c <HAL_DMA_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80025d6:	f7ff ff55 	bl	8002484 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a08      	ldr	r2, [pc, #32]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_ADC_MspInit+0x120>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40012000 	.word	0x40012000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020400 	.word	0x40020400
 8002600:	200017a8 	.word	0x200017a8
 8002604:	40026470 	.word	0x40026470

08002608 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_CAN_MspInit+0x13c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d136      	bne.n	8002698 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_CAN_MspInit+0x140>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_CAN_MspInit+0x140>)
 8002632:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002634:	4b44      	ldr	r3, [pc, #272]	; (8002748 <HAL_CAN_MspInit+0x140>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d10d      	bne.n	8002658 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_CAN_MspInit+0x144>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4a41      	ldr	r2, [pc, #260]	; (800274c <HAL_CAN_MspInit+0x144>)
 8002646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800264a:	6413      	str	r3, [r2, #64]	; 0x40
 800264c:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_CAN_MspInit+0x144>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_CAN_MspInit+0x144>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	4a3a      	ldr	r2, [pc, #232]	; (800274c <HAL_CAN_MspInit+0x144>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6313      	str	r3, [r2, #48]	; 0x30
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_CAN_MspInit+0x144>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002674:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267e:	2301      	movs	r3, #1
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002686:	2309      	movs	r3, #9
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4619      	mov	r1, r3
 8002690:	482f      	ldr	r0, [pc, #188]	; (8002750 <HAL_CAN_MspInit+0x148>)
 8002692:	f002 f9ab 	bl	80049ec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002696:	e050      	b.n	800273a <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2d      	ldr	r2, [pc, #180]	; (8002754 <HAL_CAN_MspInit+0x14c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d14b      	bne.n	800273a <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a28      	ldr	r2, [pc, #160]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <HAL_CAN_MspInit+0x140>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3301      	adds	r3, #1
 80026c4:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_CAN_MspInit+0x140>)
 80026c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_CAN_MspInit+0x140>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10d      	bne.n	80026ec <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026de:	6413      	str	r3, [r2, #64]	; 0x40
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	6313      	str	r3, [r2, #48]	; 0x30
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_CAN_MspInit+0x144>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002708:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800271a:	2309      	movs	r3, #9
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <HAL_CAN_MspInit+0x150>)
 8002726:	f002 f961 	bl	80049ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	2040      	movs	r0, #64	; 0x40
 8002730:	f001 fdb5 	bl	800429e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002734:	2040      	movs	r0, #64	; 0x40
 8002736:	f001 fdce 	bl	80042d6 <HAL_NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3730      	adds	r7, #48	; 0x30
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40006400 	.word	0x40006400
 8002748:	2000021c 	.word	0x2000021c
 800274c:	40023800 	.word	0x40023800
 8002750:	40020000 	.word	0x40020000
 8002754:	40006800 	.word	0x40006800
 8002758:	40020400 	.word	0x40020400

0800275c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a47      	ldr	r2, [pc, #284]	; (8002898 <HAL_SPI_MspInit+0x13c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	f040 8088 	bne.w	8002890 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	4b45      	ldr	r3, [pc, #276]	; (800289c <HAL_SPI_MspInit+0x140>)
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	4a44      	ldr	r2, [pc, #272]	; (800289c <HAL_SPI_MspInit+0x140>)
 800278a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800278e:	6453      	str	r3, [r2, #68]	; 0x44
 8002790:	4b42      	ldr	r3, [pc, #264]	; (800289c <HAL_SPI_MspInit+0x140>)
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_SPI_MspInit+0x140>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4a3d      	ldr	r2, [pc, #244]	; (800289c <HAL_SPI_MspInit+0x140>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6313      	str	r3, [r2, #48]	; 0x30
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_SPI_MspInit+0x140>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027b8:	23e0      	movs	r3, #224	; 0xe0
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027c8:	2305      	movs	r3, #5
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	4833      	ldr	r0, [pc, #204]	; (80028a0 <HAL_SPI_MspInit+0x144>)
 80027d4:	f002 f90a 	bl	80049ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80027d8:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 80027da:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <HAL_SPI_MspInit+0x14c>)
 80027dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80027de:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 80027e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80027e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e6:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 80027f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 800280e:	2200      	movs	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002818:	4822      	ldr	r0, [pc, #136]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 800281a:	f001 fd77 	bl	800430c <HAL_DMA_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002824:	f7ff fe2e 	bl	8002484 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 800282c:	64da      	str	r2, [r3, #76]	; 0x4c
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <HAL_SPI_MspInit+0x148>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_SPI_MspInit+0x150>)
 8002836:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_SPI_MspInit+0x154>)
 8002838:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_SPI_MspInit+0x150>)
 800283c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002840:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_SPI_MspInit+0x150>)
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_SPI_MspInit+0x150>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <HAL_SPI_MspInit+0x150>)
 8002850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002854:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_SPI_MspInit+0x150>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_SPI_MspInit+0x150>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_SPI_MspInit+0x150>)
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_SPI_MspInit+0x150>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_SPI_MspInit+0x150>)
 8002870:	2200      	movs	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002874:	480d      	ldr	r0, [pc, #52]	; (80028ac <HAL_SPI_MspInit+0x150>)
 8002876:	f001 fd49 	bl	800430c <HAL_DMA_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002880:	f7ff fe00 	bl	8002484 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_SPI_MspInit+0x150>)
 8002888:	649a      	str	r2, [r3, #72]	; 0x48
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_SPI_MspInit+0x150>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002890:	bf00      	nop
 8002892:	3728      	adds	r7, #40	; 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40013000 	.word	0x40013000
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	20001928 	.word	0x20001928
 80028a8:	40026410 	.word	0x40026410
 80028ac:	200029e4 	.word	0x200029e4
 80028b0:	40026458 	.word	0x40026458

080028b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d10d      	bne.n	80028e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d11e      	bne.n	8002954 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_TIM_MspPostInit+0x68>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_TIM_MspPostInit+0x68>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_TIM_MspPostInit+0x68>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002936:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002944:	2301      	movs	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	4619      	mov	r1, r3
 800294e:	4804      	ldr	r0, [pc, #16]	; (8002960 <HAL_TIM_MspPostInit+0x6c>)
 8002950:	f002 f84c 	bl	80049ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002954:	bf00      	nop
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	40020400 	.word	0x40020400

08002964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a49      	ldr	r2, [pc, #292]	; (8002aa8 <HAL_UART_MspInit+0x144>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d15b      	bne.n	8002a3e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	4b48      	ldr	r3, [pc, #288]	; (8002aac <HAL_UART_MspInit+0x148>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a47      	ldr	r2, [pc, #284]	; (8002aac <HAL_UART_MspInit+0x148>)
 8002990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b45      	ldr	r3, [pc, #276]	; (8002aac <HAL_UART_MspInit+0x148>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	4b41      	ldr	r3, [pc, #260]	; (8002aac <HAL_UART_MspInit+0x148>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a40      	ldr	r2, [pc, #256]	; (8002aac <HAL_UART_MspInit+0x148>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_UART_MspInit+0x148>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029be:	2303      	movs	r3, #3
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029ce:	2308      	movs	r3, #8
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	4835      	ldr	r0, [pc, #212]	; (8002ab0 <HAL_UART_MspInit+0x14c>)
 80029da:	f002 f807 	bl	80049ec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80029de:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 80029e0:	4a35      	ldr	r2, [pc, #212]	; (8002ab8 <HAL_UART_MspInit+0x154>)
 80029e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80029e4:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 80029e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ea:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ec:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 80029fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a06:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 8002a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a12:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002a20:	4824      	ldr	r0, [pc, #144]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 8002a22:	f001 fc73 	bl	800430c <HAL_DMA_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002a2c:	f7ff fd2a 	bl	8002484 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
 8002a36:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_UART_MspInit+0x150>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a3c:	e030      	b.n	8002aa0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_UART_MspInit+0x158>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d12b      	bne.n	8002aa0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_UART_MspInit+0x148>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4a16      	ldr	r2, [pc, #88]	; (8002aac <HAL_UART_MspInit+0x148>)
 8002a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a56:	6413      	str	r3, [r2, #64]	; 0x40
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_UART_MspInit+0x148>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_UART_MspInit+0x148>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <HAL_UART_MspInit+0x148>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6313      	str	r3, [r2, #48]	; 0x30
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_UART_MspInit+0x148>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a80:	230c      	movs	r3, #12
 8002a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a90:	2307      	movs	r3, #7
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <HAL_UART_MspInit+0x14c>)
 8002a9c:	f001 ffa6 	bl	80049ec <HAL_GPIO_Init>
}
 8002aa0:	bf00      	nop
 8002aa2:	3730      	adds	r7, #48	; 0x30
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40004c00 	.word	0x40004c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	200004d8 	.word	0x200004d8
 8002ab8:	40026040 	.word	0x40026040
 8002abc:	40004400 	.word	0x40004400

08002ac0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <SDTimer_Handler+0x40>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <SDTimer_Handler+0x1c>
    Timer1--;
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <SDTimer_Handler+0x40>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <SDTimer_Handler+0x40>)
 8002ada:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <SDTimer_Handler+0x44>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <SDTimer_Handler+0x34>
    Timer2--;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <SDTimer_Handler+0x44>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SDTimer_Handler+0x44>)
 8002af2:	801a      	strh	r2, [r3, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20002a46 	.word	0x20002a46
 8002b04:	20002a44 	.word	0x20002a44

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <SysTick_Handler+0x38>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <SysTick_Handler+0x38>)
 8002b60:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <SysTick_Handler+0x38>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	d904      	bls.n	8002b76 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <SysTick_Handler+0x38>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002b72:	f7ff ffa5 	bl	8002ac0 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b76:	f000 f995 	bl	8002ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  time_count++;
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SysTick_Handler+0x3c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	4a02      	ldr	r2, [pc, #8]	; (8002b8c <SysTick_Handler+0x3c>)
 8002b82:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000220 	.word	0x20000220
 8002b8c:	20000214 	.word	0x20000214

08002b90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <DMA1_Stream2_IRQHandler+0x10>)
 8002b96:	f001 fcbf 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200004d8 	.word	0x200004d8

08002ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002ba8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bac:	f002 f8e6 	bl	8004d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <DMA2_Stream0_IRQHandler+0x10>)
 8002bba:	f001 fcad 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20001928 	.word	0x20001928

08002bc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <DMA2_Stream3_IRQHandler+0x10>)
 8002bce:	f001 fca3 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200029e4 	.word	0x200029e4

08002bdc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <DMA2_Stream4_IRQHandler+0x10>)
 8002be2:	f001 fc99 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200017a8 	.word	0x200017a8

08002bf0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002bf4:	4808      	ldr	r0, [pc, #32]	; (8002c18 <CAN2_RX0_IRQHandler+0x28>)
 8002bf6:	f001 f83e 	bl	8003c76 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &pRxHeader, &rx_union);
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <CAN2_RX0_IRQHandler+0x2c>)
 8002bfc:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <CAN2_RX0_IRQHandler+0x30>)
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4805      	ldr	r0, [pc, #20]	; (8002c18 <CAN2_RX0_IRQHandler+0x28>)
 8002c02:	f000 ff00 	bl	8003a06 <HAL_CAN_GetRxMessage>
  can_m_received=1;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <CAN2_RX0_IRQHandler+0x34>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8002c0c:	2120      	movs	r1, #32
 8002c0e:	4806      	ldr	r0, [pc, #24]	; (8002c28 <CAN2_RX0_IRQHandler+0x38>)
 8002c10:	f002 f899 	bl	8004d46 <HAL_GPIO_TogglePin>
  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200016f4 	.word	0x200016f4
 8002c1c:	200017a0 	.word	0x200017a0
 8002c20:	200018cc 	.word	0x200018cc
 8002c24:	20000218 	.word	0x20000218
 8002c28:	40020400 	.word	0x40020400

08002c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
	return 1;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_kill>:

int _kill(int pid, int sig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c46:	f005 fca9 	bl	800859c <__errno>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2216      	movs	r2, #22
 8002c4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_exit>:

void _exit (int status)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ffe7 	bl	8002c3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c6e:	e7fe      	b.n	8002c6e <_exit+0x12>

08002c70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e00a      	b.n	8002c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c82:	f3af 8000 	nop.w
 8002c86:	4601      	mov	r1, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	60ba      	str	r2, [r7, #8]
 8002c8e:	b2ca      	uxtb	r2, r1
 8002c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dbf0      	blt.n	8002c82 <_read+0x12>
	}

return len;
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_close>:
	}
	return len;
}

int _close(int file)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_isatty>:

int _isatty(int file)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cea:	2301      	movs	r3, #1
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <_sbrk+0x5c>)
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <_sbrk+0x60>)
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <_sbrk+0x64>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <_sbrk+0x68>)
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d207      	bcs.n	8002d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d44:	f005 fc2a 	bl	800859c <__errno>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	e009      	b.n	8002d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <_sbrk+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <_sbrk+0x64>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <_sbrk+0x64>)
 8002d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20020000 	.word	0x20020000
 8002d74:	00000400 	.word	0x00000400
 8002d78:	20000224 	.word	0x20000224
 8002d7c:	20004ad0 	.word	0x20004ad0

08002d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <SystemInit+0x28>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <SystemInit+0x28>)
 8002d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <SystemInit+0x28>)
 8002d96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d9a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002db0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002db2:	e003      	b.n	8002dbc <LoopCopyDataInit>

08002db4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002db6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002db8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dba:	3104      	adds	r1, #4

08002dbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dbc:	480b      	ldr	r0, [pc, #44]	; (8002dec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dc4:	d3f6      	bcc.n	8002db4 <CopyDataInit>
  ldr  r2, =_sbss
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dc8:	e002      	b.n	8002dd0 <LoopFillZerobss>

08002dca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dcc:	f842 3b04 	str.w	r3, [r2], #4

08002dd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dd4:	d3f9      	bcc.n	8002dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dd6:	f7ff ffd3 	bl	8002d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dda:	f005 fd9d 	bl	8008918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dde:	f7fe ff65 	bl	8001cac <main>
  bx  lr    
 8002de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002de4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002de8:	0800b584 	.word	0x0800b584
  ldr  r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002df0:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002df4:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8002df8:	20004acc 	.word	0x20004acc

08002dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_Init+0x40>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_Init+0x40>)
 8002e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_Init+0x40>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f001 fa2d 	bl	8004288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f000 f808 	bl	8002e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e34:	f7ff fb2c 	bl	8002490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x54>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_InitTick+0x58>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 fa45 	bl	80042f2 <HAL_SYSTICK_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00e      	b.n	8002e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d80a      	bhi.n	8002e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f001 fa0d 	bl	800429e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <HAL_InitTick+0x5c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	2000000c 	.word	0x2000000c
 8002ea0:	20000008 	.word	0x20000008

08002ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_IncTick+0x20>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	2000000c 	.word	0x2000000c
 8002ec8:	20002a48 	.word	0x20002a48

08002ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_GetTick+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20002a48 	.word	0x20002a48

08002ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff ffee 	bl	8002ecc <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d005      	beq.n	8002f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_Delay+0x44>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f0a:	bf00      	nop
 8002f0c:	f7ff ffde 	bl	8002ecc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d8f7      	bhi.n	8002f0c <HAL_Delay+0x28>
  {
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e033      	b.n	8002faa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fac8 	bl	80024e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d118      	bne.n	8002f9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f72:	f023 0302 	bic.w	r3, r3, #2
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f94a 	bl	8003218 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
 8002f9a:	e001      	b.n	8002fa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x1c>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e113      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x244>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d925      	bls.n	800302c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b1e      	subs	r3, #30
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	400a      	ands	r2, r1
 8003004:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68d9      	ldr	r1, [r3, #12]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	4603      	mov	r3, r0
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4403      	add	r3, r0
 800301e:	3b1e      	subs	r3, #30
 8003020:	409a      	lsls	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	e022      	b.n	8003072 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6919      	ldr	r1, [r3, #16]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	2207      	movs	r2, #7
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	4618      	mov	r0, r3
 8003062:	4603      	mov	r3, r0
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4403      	add	r3, r0
 8003068:	409a      	lsls	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d824      	bhi.n	80030c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	3b05      	subs	r3, #5
 800308c:	221f      	movs	r2, #31
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	400a      	ands	r2, r1
 800309a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	3b05      	subs	r3, #5
 80030b6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	635a      	str	r2, [r3, #52]	; 0x34
 80030c2:	e04c      	b.n	800315e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d824      	bhi.n	8003116 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b23      	subs	r3, #35	; 0x23
 80030de:	221f      	movs	r2, #31
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43da      	mvns	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	400a      	ands	r2, r1
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	3b23      	subs	r3, #35	; 0x23
 8003108:	fa00 f203 	lsl.w	r2, r0, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
 8003114:	e023      	b.n	800315e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	3b41      	subs	r3, #65	; 0x41
 8003128:	221f      	movs	r2, #31
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	400a      	ands	r2, r1
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4618      	mov	r0, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	3b41      	subs	r3, #65	; 0x41
 8003152:	fa00 f203 	lsl.w	r2, r0, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_ADC_ConfigChannel+0x250>)
 8003160:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a28      	ldr	r2, [pc, #160]	; (8003208 <HAL_ADC_ConfigChannel+0x254>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d10f      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d8>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b12      	cmp	r3, #18
 8003172:	d10b      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <HAL_ADC_ConfigChannel+0x254>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d12b      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x23a>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1c      	ldr	r2, [pc, #112]	; (800320c <HAL_ADC_ConfigChannel+0x258>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x1f4>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b11      	cmp	r3, #17
 80031a6:	d122      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a11      	ldr	r2, [pc, #68]	; (800320c <HAL_ADC_ConfigChannel+0x258>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d111      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_ADC_ConfigChannel+0x25c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a11      	ldr	r2, [pc, #68]	; (8003214 <HAL_ADC_ConfigChannel+0x260>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	0c9a      	lsrs	r2, r3, #18
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031e0:	e002      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f9      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40012300 	.word	0x40012300
 8003208:	40012000 	.word	0x40012000
 800320c:	10000012 	.word	0x10000012
 8003210:	20000004 	.word	0x20000004
 8003214:	431bde83 	.word	0x431bde83

08003218 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003220:	4b79      	ldr	r3, [pc, #484]	; (8003408 <ADC_Init+0x1f0>)
 8003222:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800324c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	021a      	lsls	r2, r3, #8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003292:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	4a58      	ldr	r2, [pc, #352]	; (800340c <ADC_Init+0x1f4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	e00f      	b.n	8003316 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003314:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0202 	bic.w	r2, r2, #2
 8003324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6899      	ldr	r1, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7e1b      	ldrb	r3, [r3, #24]
 8003330:	005a      	lsls	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003352:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003362:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	3b01      	subs	r3, #1
 8003370:	035a      	lsls	r2, r3, #13
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	e007      	b.n	800338c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800338a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	051a      	lsls	r2, r3, #20
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6899      	ldr	r1, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ce:	025a      	lsls	r2, r3, #9
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	029a      	lsls	r2, r3, #10
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	40012300 	.word	0x40012300
 800340c:	0f000001 	.word	0x0f000001

08003410 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0ed      	b.n	80035fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff f8ea 	bl	8002608 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0202 	bic.w	r2, r2, #2
 8003442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003444:	f7ff fd42 	bl	8002ecc <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800344a:	e012      	b.n	8003472 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800344c:	f7ff fd3e 	bl	8002ecc <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b0a      	cmp	r3, #10
 8003458:	d90b      	bls.n	8003472 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2205      	movs	r2, #5
 800346a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0c5      	b.n	80035fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e5      	bne.n	800344c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003490:	f7ff fd1c 	bl	8002ecc <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003496:	e012      	b.n	80034be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003498:	f7ff fd18 	bl	8002ecc <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b0a      	cmp	r3, #10
 80034a4:	d90b      	bls.n	80034be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2205      	movs	r2, #5
 80034b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e09f      	b.n	80035fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0e5      	beq.n	8003498 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d108      	bne.n	80034e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e007      	b.n	80034f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7e5b      	ldrb	r3, [r3, #25]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d108      	bne.n	8003510 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e007      	b.n	8003520 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7e9b      	ldrb	r3, [r3, #26]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0220 	orr.w	r2, r2, #32
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e007      	b.n	800354a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0220 	bic.w	r2, r2, #32
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7edb      	ldrb	r3, [r3, #27]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d108      	bne.n	8003564 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0210 	bic.w	r2, r2, #16
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e007      	b.n	8003574 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0210 	orr.w	r2, r2, #16
 8003572:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7f1b      	ldrb	r3, [r3, #28]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d108      	bne.n	800358e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0208 	orr.w	r2, r2, #8
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e007      	b.n	800359e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0208 	bic.w	r2, r2, #8
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7f5b      	ldrb	r3, [r3, #29]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d108      	bne.n	80035b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0204 	orr.w	r2, r2, #4
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e007      	b.n	80035c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0204 	bic.w	r2, r2, #4
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	1e5a      	subs	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800361e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d003      	beq.n	800362e <HAL_CAN_ConfigFilter+0x26>
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b02      	cmp	r3, #2
 800362a:	f040 80be 	bne.w	80037aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003630:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003648:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	431a      	orrs	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2201      	movs	r2, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	43db      	mvns	r3, r3
 8003680:	401a      	ands	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d123      	bne.n	80036d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	43db      	mvns	r3, r3
 800369a:	401a      	ands	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3248      	adds	r2, #72	; 0x48
 80036b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	3348      	adds	r3, #72	; 0x48
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d122      	bne.n	8003726 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003700:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3248      	adds	r2, #72	; 0x48
 8003706:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800371a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800371c:	6979      	ldr	r1, [r7, #20]
 800371e:	3348      	adds	r3, #72	; 0x48
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	401a      	ands	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003740:	e007      	b.n	8003752 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	431a      	orrs	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43db      	mvns	r3, r3
 8003764:	401a      	ands	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800376c:	e007      	b.n	800377e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	431a      	orrs	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	431a      	orrs	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800379c:	f023 0201 	bic.w	r2, r3, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e006      	b.n	80037b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40006400 	.word	0x40006400

080037c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d12e      	bne.n	800383a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037f4:	f7ff fb6a 	bl	8002ecc <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037fa:	e012      	b.n	8003822 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037fc:	f7ff fb66 	bl	8002ecc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b0a      	cmp	r3, #10
 8003808:	d90b      	bls.n	8003822 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2205      	movs	r2, #5
 800381a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e012      	b.n	8003848 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e006      	b.n	8003848 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003864:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d003      	beq.n	800387c <HAL_CAN_AddTxMessage+0x2c>
 8003874:	7ffb      	ldrb	r3, [r7, #31]
 8003876:	2b02      	cmp	r3, #2
 8003878:	f040 80b8 	bne.w	80039ec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80a0 	beq.w	80039dc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d907      	bls.n	80038bc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e09e      	b.n	80039fa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80038bc:	2201      	movs	r2, #1
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	409a      	lsls	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	6809      	ldr	r1, [r1, #0]
 80038dc:	431a      	orrs	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	3318      	adds	r3, #24
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	440b      	add	r3, r1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e00f      	b.n	800390a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038f4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80038fe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3318      	adds	r3, #24
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	440b      	add	r3, r1
 8003908:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3318      	adds	r3, #24
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	440b      	add	r3, r1
 800391a:	3304      	adds	r3, #4
 800391c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	7d1b      	ldrb	r3, [r3, #20]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d111      	bne.n	800394a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	3318      	adds	r3, #24
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4413      	add	r3, r2
 8003932:	3304      	adds	r3, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	6811      	ldr	r1, [r2, #0]
 800393a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3318      	adds	r3, #24
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	440b      	add	r3, r1
 8003946:	3304      	adds	r3, #4
 8003948:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3307      	adds	r3, #7
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	061a      	lsls	r2, r3, #24
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3306      	adds	r3, #6
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3305      	adds	r3, #5
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	4313      	orrs	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	3204      	adds	r2, #4
 800396a:	7812      	ldrb	r2, [r2, #0]
 800396c:	4610      	mov	r0, r2
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	6811      	ldr	r1, [r2, #0]
 8003972:	ea43 0200 	orr.w	r2, r3, r0
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	440b      	add	r3, r1
 800397c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003980:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3303      	adds	r3, #3
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	061a      	lsls	r2, r3, #24
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3302      	adds	r3, #2
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3301      	adds	r3, #1
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	4313      	orrs	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	7812      	ldrb	r2, [r2, #0]
 80039a2:	4610      	mov	r0, r2
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6811      	ldr	r1, [r2, #0]
 80039a8:	ea43 0200 	orr.w	r2, r3, r0
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	440b      	add	r3, r1
 80039b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80039b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	3318      	adds	r3, #24
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	4413      	add	r3, r2
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6811      	ldr	r1, [r2, #0]
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	3318      	adds	r3, #24
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	440b      	add	r3, r1
 80039d6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e00e      	b.n	80039fa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e006      	b.n	80039fa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a1a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d003      	beq.n	8003a2a <HAL_CAN_GetRxMessage+0x24>
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	f040 80f3 	bne.w	8003c10 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10e      	bne.n	8003a4e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d116      	bne.n	8003a6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e0e7      	b.n	8003c1e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0d8      	b.n	8003c1e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	331b      	adds	r3, #27
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0204 	and.w	r2, r3, #4
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10c      	bne.n	8003aa4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	331b      	adds	r3, #27
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	4413      	add	r3, r2
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0d5b      	lsrs	r3, r3, #21
 8003a9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	331b      	adds	r3, #27
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4413      	add	r3, r2
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	08db      	lsrs	r3, r3, #3
 8003ab4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	331b      	adds	r3, #27
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	4413      	add	r3, r2
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0202 	and.w	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	331b      	adds	r3, #27
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	4413      	add	r3, r2
 8003ade:	3304      	adds	r3, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	331b      	adds	r3, #27
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	331b      	adds	r3, #27
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	0a1a      	lsrs	r2, r3, #8
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	0c1a      	lsrs	r2, r3, #16
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	3302      	adds	r3, #2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0e1a      	lsrs	r2, r3, #24
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	3303      	adds	r3, #3
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	3304      	adds	r3, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	0a1a      	lsrs	r2, r3, #8
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	3305      	adds	r3, #5
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0c1a      	lsrs	r2, r3, #16
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	3306      	adds	r3, #6
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	0e1a      	lsrs	r2, r3, #24
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	3307      	adds	r3, #7
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0220 	orr.w	r2, r2, #32
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	e007      	b.n	8003c0c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0220 	orr.w	r2, r2, #32
 8003c0a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e006      	b.n	8003c1e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d002      	beq.n	8003c48 <HAL_CAN_ActivateNotification+0x1e>
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d109      	bne.n	8003c5c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6959      	ldr	r1, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e006      	b.n	8003c6a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b08a      	sub	sp, #40	; 0x28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d07c      	beq.n	8003db6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d023      	beq.n	8003d0e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f983 	bl	8003fe4 <HAL_CAN_TxMailbox0CompleteCallback>
 8003cde:	e016      	b.n	8003d0e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf2:	e00c      	b.n	8003d0e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
 8003d06:	e002      	b.n	8003d0e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f989 	bl	8004020 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d024      	beq.n	8003d62 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f963 	bl	8003ff8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003d32:	e016      	b.n	8003d62 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	e00c      	b.n	8003d62 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	e002      	b.n	8003d62 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f969 	bl	8004034 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d024      	beq.n	8003db6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f943 	bl	800400c <HAL_CAN_TxMailbox2CompleteCallback>
 8003d86:	e016      	b.n	8003db6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	e00c      	b.n	8003db6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	e002      	b.n	8003db6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f949 	bl	8004048 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00c      	beq.n	8003dda <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2208      	movs	r2, #8
 8003df4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f93a 	bl	8004070 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f921 	bl	800405c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2208      	movs	r2, #8
 8003e58:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f91c 	bl	8004098 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f903 	bl	8004084 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00b      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d006      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2210      	movs	r2, #16
 8003e98:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f906 	bl	80040ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2208      	movs	r2, #8
 8003eba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f8ff 	bl	80040c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d07b      	beq.n	8003fc4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d072      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f043 0302 	orr.w	r3, r3, #2
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d043      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d03e      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f44:	2b60      	cmp	r3, #96	; 0x60
 8003f46:	d02b      	beq.n	8003fa0 <HAL_CAN_IRQHandler+0x32a>
 8003f48:	2b60      	cmp	r3, #96	; 0x60
 8003f4a:	d82e      	bhi.n	8003faa <HAL_CAN_IRQHandler+0x334>
 8003f4c:	2b50      	cmp	r3, #80	; 0x50
 8003f4e:	d022      	beq.n	8003f96 <HAL_CAN_IRQHandler+0x320>
 8003f50:	2b50      	cmp	r3, #80	; 0x50
 8003f52:	d82a      	bhi.n	8003faa <HAL_CAN_IRQHandler+0x334>
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d019      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x316>
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d826      	bhi.n	8003faa <HAL_CAN_IRQHandler+0x334>
 8003f5c:	2b30      	cmp	r3, #48	; 0x30
 8003f5e:	d010      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x30c>
 8003f60:	2b30      	cmp	r3, #48	; 0x30
 8003f62:	d822      	bhi.n	8003faa <HAL_CAN_IRQHandler+0x334>
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d002      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x2f8>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d005      	beq.n	8003f78 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f6c:	e01d      	b.n	8003faa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f76:	e019      	b.n	8003fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f043 0310 	orr.w	r3, r3, #16
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f80:	e014      	b.n	8003fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f043 0320 	orr.w	r3, r3, #32
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f8a:	e00f      	b.n	8003fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f94:	e00a      	b.n	8003fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f9e:	e005      	b.n	8003fac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fa8:	e000      	b.n	8003fac <HAL_CAN_IRQHandler+0x336>
            break;
 8003faa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f87c 	bl	80040d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003fdc:	bf00      	nop
 8003fde:	3728      	adds	r7, #40	; 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <__NVIC_SetPriorityGrouping>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <__NVIC_SetPriorityGrouping+0x44>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004104:	4013      	ands	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800411a:	4a04      	ldr	r2, [pc, #16]	; (800412c <__NVIC_SetPriorityGrouping+0x44>)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	60d3      	str	r3, [r2, #12]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <__NVIC_GetPriorityGrouping>:
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <__NVIC_GetPriorityGrouping+0x18>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	f003 0307 	and.w	r3, r3, #7
}
 800413e:	4618      	mov	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <__NVIC_EnableIRQ>:
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	2b00      	cmp	r3, #0
 800415c:	db0b      	blt.n	8004176 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	f003 021f 	and.w	r2, r3, #31
 8004164:	4907      	ldr	r1, [pc, #28]	; (8004184 <__NVIC_EnableIRQ+0x38>)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2001      	movs	r0, #1
 800416e:	fa00 f202 	lsl.w	r2, r0, r2
 8004172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	e000e100 	.word	0xe000e100

08004188 <__NVIC_SetPriority>:
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	6039      	str	r1, [r7, #0]
 8004192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004198:	2b00      	cmp	r3, #0
 800419a:	db0a      	blt.n	80041b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	490c      	ldr	r1, [pc, #48]	; (80041d4 <__NVIC_SetPriority+0x4c>)
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	0112      	lsls	r2, r2, #4
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	440b      	add	r3, r1
 80041ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041b0:	e00a      	b.n	80041c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4908      	ldr	r1, [pc, #32]	; (80041d8 <__NVIC_SetPriority+0x50>)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	3b04      	subs	r3, #4
 80041c0:	0112      	lsls	r2, r2, #4
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	440b      	add	r3, r1
 80041c6:	761a      	strb	r2, [r3, #24]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000e100 	.word	0xe000e100
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <NVIC_EncodePriority>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	bf28      	it	cs
 80041fa:	2304      	movcs	r3, #4
 80041fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3304      	adds	r3, #4
 8004202:	2b06      	cmp	r3, #6
 8004204:	d902      	bls.n	800420c <NVIC_EncodePriority+0x30>
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3b03      	subs	r3, #3
 800420a:	e000      	b.n	800420e <NVIC_EncodePriority+0x32>
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	f04f 32ff 	mov.w	r2, #4294967295
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43da      	mvns	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	401a      	ands	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004224:	f04f 31ff 	mov.w	r1, #4294967295
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	43d9      	mvns	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004234:	4313      	orrs	r3, r2
}
 8004236:	4618      	mov	r0, r3
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <SysTick_Config>:
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3b01      	subs	r3, #1
 8004250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004254:	d301      	bcc.n	800425a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004256:	2301      	movs	r3, #1
 8004258:	e00f      	b.n	800427a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800425a:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <SysTick_Config+0x40>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004262:	210f      	movs	r1, #15
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	f7ff ff8e 	bl	8004188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <SysTick_Config+0x40>)
 800426e:	2200      	movs	r2, #0
 8004270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <SysTick_Config+0x40>)
 8004274:	2207      	movs	r2, #7
 8004276:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	e000e010 	.word	0xe000e010

08004288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff29 	bl	80040e8 <__NVIC_SetPriorityGrouping>
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	4603      	mov	r3, r0
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042b0:	f7ff ff3e 	bl	8004130 <__NVIC_GetPriorityGrouping>
 80042b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f7ff ff8e 	bl	80041dc <NVIC_EncodePriority>
 80042c0:	4602      	mov	r2, r0
 80042c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff5d 	bl	8004188 <__NVIC_SetPriority>
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4603      	mov	r3, r0
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff31 	bl	800414c <__NVIC_EnableIRQ>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ffa2 	bl	8004244 <SysTick_Config>
 8004300:	4603      	mov	r3, r0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004318:	f7fe fdd8 	bl	8002ecc <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e099      	b.n	800445c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004348:	e00f      	b.n	800436a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800434a:	f7fe fdbf 	bl	8002ecc <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b05      	cmp	r3, #5
 8004356:	d908      	bls.n	800436a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2203      	movs	r2, #3
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e078      	b.n	800445c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e8      	bne.n	800434a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4b38      	ldr	r3, [pc, #224]	; (8004464 <HAL_DMA_Init+0x158>)
 8004384:	4013      	ands	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004396:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d107      	bne.n	80043d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	4313      	orrs	r3, r2
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f023 0307 	bic.w	r3, r3, #7
 80043ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d117      	bne.n	800442e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00e      	beq.n	800442e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fa6f 	bl	80048f4 <DMA_CheckFifoParam>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2240      	movs	r2, #64	; 0x40
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800442a:	2301      	movs	r3, #1
 800442c:	e016      	b.n	800445c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa26 	bl	8004888 <DMA_CalcBaseAndBitshift>
 800443c:	4603      	mov	r3, r0
 800443e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004444:	223f      	movs	r2, #63	; 0x3f
 8004446:	409a      	lsls	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	f010803f 	.word	0xf010803f

08004468 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_DMA_Start_IT+0x26>
 800448a:	2302      	movs	r3, #2
 800448c:	e040      	b.n	8004510 <HAL_DMA_Start_IT+0xa8>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d12f      	bne.n	8004502 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f9b8 	bl	800482c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	223f      	movs	r2, #63	; 0x3f
 80044c2:	409a      	lsls	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0216 	orr.w	r2, r2, #22
 80044d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0208 	orr.w	r2, r2, #8
 80044ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e005      	b.n	800450e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800450a:	2302      	movs	r3, #2
 800450c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004524:	4b92      	ldr	r3, [pc, #584]	; (8004770 <HAL_DMA_IRQHandler+0x258>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a92      	ldr	r2, [pc, #584]	; (8004774 <HAL_DMA_IRQHandler+0x25c>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	2208      	movs	r2, #8
 8004544:	409a      	lsls	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01a      	beq.n	8004584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0204 	bic.w	r2, r2, #4
 800456a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	2208      	movs	r2, #8
 8004572:	409a      	lsls	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f043 0201 	orr.w	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a6:	2201      	movs	r2, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	2204      	movs	r2, #4
 80045c0:	409a      	lsls	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045dc:	2204      	movs	r2, #4
 80045de:	409a      	lsls	r2, r3
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f043 0204 	orr.w	r2, r3, #4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	2210      	movs	r2, #16
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d043      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d03c      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	2210      	movs	r2, #16
 8004614:	409a      	lsls	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d018      	beq.n	800465a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d024      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
 8004646:	e01f      	b.n	8004688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	4798      	blx	r3
 8004658:	e016      	b.n	8004688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d107      	bne.n	8004678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0208 	bic.w	r2, r2, #8
 8004676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2220      	movs	r2, #32
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 808e 	beq.w	80047b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8086 	beq.w	80047b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	2220      	movs	r2, #32
 80046b0:	409a      	lsls	r2, r3
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d136      	bne.n	8004730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0216 	bic.w	r2, r2, #22
 80046d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_DMA_IRQHandler+0x1da>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0208 	bic.w	r2, r2, #8
 8004700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004706:	223f      	movs	r2, #63	; 0x3f
 8004708:	409a      	lsls	r2, r3
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004722:	2b00      	cmp	r3, #0
 8004724:	d07d      	beq.n	8004822 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
        }
        return;
 800472e:	e078      	b.n	8004822 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01c      	beq.n	8004778 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	2b00      	cmp	r3, #0
 8004752:	d030      	beq.n	80047b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	e02b      	b.n	80047b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d027      	beq.n	80047b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
 800476e:	e022      	b.n	80047b6 <HAL_DMA_IRQHandler+0x29e>
 8004770:	20000004 	.word	0x20000004
 8004774:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0210 	bic.w	r2, r2, #16
 8004794:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d032      	beq.n	8004824 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d022      	beq.n	8004810 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2205      	movs	r2, #5
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d307      	bcc.n	80047fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f2      	bne.n	80047e2 <HAL_DMA_IRQHandler+0x2ca>
 80047fc:	e000      	b.n	8004800 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80047fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	4798      	blx	r3
 8004820:	e000      	b.n	8004824 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004822:	bf00      	nop
    }
  }
}
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop

0800482c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004848:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d108      	bne.n	800486c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800486a:	e007      	b.n	800487c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	3b10      	subs	r3, #16
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <DMA_CalcBaseAndBitshift+0x64>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <DMA_CalcBaseAndBitshift+0x68>)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d909      	bls.n	80048ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	659a      	str	r2, [r3, #88]	; 0x58
 80048c8:	e007      	b.n	80048da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	aaaaaaab 	.word	0xaaaaaaab
 80048f0:	0800b18c 	.word	0x0800b18c

080048f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11f      	bne.n	800494e <DMA_CheckFifoParam+0x5a>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b03      	cmp	r3, #3
 8004912:	d856      	bhi.n	80049c2 <DMA_CheckFifoParam+0xce>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <DMA_CheckFifoParam+0x28>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	0800492d 	.word	0x0800492d
 8004920:	0800493f 	.word	0x0800493f
 8004924:	0800492d 	.word	0x0800492d
 8004928:	080049c3 	.word	0x080049c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d046      	beq.n	80049c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493c:	e043      	b.n	80049c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004946:	d140      	bne.n	80049ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494c:	e03d      	b.n	80049ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004956:	d121      	bne.n	800499c <DMA_CheckFifoParam+0xa8>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b03      	cmp	r3, #3
 800495c:	d837      	bhi.n	80049ce <DMA_CheckFifoParam+0xda>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <DMA_CheckFifoParam+0x70>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004975 	.word	0x08004975
 8004968:	0800497b 	.word	0x0800497b
 800496c:	08004975 	.word	0x08004975
 8004970:	0800498d 	.word	0x0800498d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e030      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d025      	beq.n	80049d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498a:	e022      	b.n	80049d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004994:	d11f      	bne.n	80049d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800499a:	e01c      	b.n	80049d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d903      	bls.n	80049aa <DMA_CheckFifoParam+0xb6>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d003      	beq.n	80049b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049a8:	e018      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
      break;
 80049ae:	e015      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00e      	beq.n	80049da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e00b      	b.n	80049da <DMA_CheckFifoParam+0xe6>
      break;
 80049c2:	bf00      	nop
 80049c4:	e00a      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049c6:	bf00      	nop
 80049c8:	e008      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049ca:	bf00      	nop
 80049cc:	e006      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049ce:	bf00      	nop
 80049d0:	e004      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;   
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049da:	bf00      	nop
    }
  } 
  
  return status; 
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop

080049ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b089      	sub	sp, #36	; 0x24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	e165      	b.n	8004cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	f040 8154 	bne.w	8004cce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d00b      	beq.n	8004a46 <HAL_GPIO_Init+0x5a>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d007      	beq.n	8004a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a3a:	2b11      	cmp	r3, #17
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b12      	cmp	r3, #18
 8004a44:	d130      	bne.n	8004aa8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 0201 	and.w	r2, r3, #1
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d003      	beq.n	8004ae8 <HAL_GPIO_Init+0xfc>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b12      	cmp	r3, #18
 8004ae6:	d123      	bne.n	8004b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	08da      	lsrs	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3208      	adds	r2, #8
 8004af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	220f      	movs	r2, #15
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	08da      	lsrs	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3208      	adds	r2, #8
 8004b2a:	69b9      	ldr	r1, [r7, #24]
 8004b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0203 	and.w	r2, r3, #3
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80ae 	beq.w	8004cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	4b5d      	ldr	r3, [pc, #372]	; (8004cec <HAL_GPIO_Init+0x300>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	4a5c      	ldr	r2, [pc, #368]	; (8004cec <HAL_GPIO_Init+0x300>)
 8004b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b80:	6453      	str	r3, [r2, #68]	; 0x44
 8004b82:	4b5a      	ldr	r3, [pc, #360]	; (8004cec <HAL_GPIO_Init+0x300>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b8e:	4a58      	ldr	r2, [pc, #352]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	3302      	adds	r3, #2
 8004b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	220f      	movs	r2, #15
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a4f      	ldr	r2, [pc, #316]	; (8004cf4 <HAL_GPIO_Init+0x308>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d025      	beq.n	8004c06 <HAL_GPIO_Init+0x21a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a4e      	ldr	r2, [pc, #312]	; (8004cf8 <HAL_GPIO_Init+0x30c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01f      	beq.n	8004c02 <HAL_GPIO_Init+0x216>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a4d      	ldr	r2, [pc, #308]	; (8004cfc <HAL_GPIO_Init+0x310>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d019      	beq.n	8004bfe <HAL_GPIO_Init+0x212>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a4c      	ldr	r2, [pc, #304]	; (8004d00 <HAL_GPIO_Init+0x314>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_GPIO_Init+0x20e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a4b      	ldr	r2, [pc, #300]	; (8004d04 <HAL_GPIO_Init+0x318>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00d      	beq.n	8004bf6 <HAL_GPIO_Init+0x20a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a4a      	ldr	r2, [pc, #296]	; (8004d08 <HAL_GPIO_Init+0x31c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <HAL_GPIO_Init+0x206>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a49      	ldr	r2, [pc, #292]	; (8004d0c <HAL_GPIO_Init+0x320>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <HAL_GPIO_Init+0x202>
 8004bea:	2306      	movs	r3, #6
 8004bec:	e00c      	b.n	8004c08 <HAL_GPIO_Init+0x21c>
 8004bee:	2307      	movs	r3, #7
 8004bf0:	e00a      	b.n	8004c08 <HAL_GPIO_Init+0x21c>
 8004bf2:	2305      	movs	r3, #5
 8004bf4:	e008      	b.n	8004c08 <HAL_GPIO_Init+0x21c>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	e006      	b.n	8004c08 <HAL_GPIO_Init+0x21c>
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e004      	b.n	8004c08 <HAL_GPIO_Init+0x21c>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e002      	b.n	8004c08 <HAL_GPIO_Init+0x21c>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_GPIO_Init+0x21c>
 8004c06:	2300      	movs	r3, #0
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	f002 0203 	and.w	r2, r2, #3
 8004c0e:	0092      	lsls	r2, r2, #2
 8004c10:	4093      	lsls	r3, r2
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c18:	4935      	ldr	r1, [pc, #212]	; (8004cf0 <HAL_GPIO_Init+0x304>)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	3302      	adds	r3, #2
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c26:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c4a:	4a31      	ldr	r2, [pc, #196]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c50:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c74:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c7a:	4b25      	ldr	r3, [pc, #148]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cc8:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	f67f ae96 	bls.w	8004a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3724      	adds	r7, #36	; 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	40020000 	.word	0x40020000
 8004cf8:	40020400 	.word	0x40020400
 8004cfc:	40020800 	.word	0x40020800
 8004d00:	40020c00 	.word	0x40020c00
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40021400 	.word	0x40021400
 8004d0c:	40021800 	.word	0x40021800
 8004d10:	40013c00 	.word	0x40013c00

08004d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
 8004d20:	4613      	mov	r3, r2
 8004d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d24:	787b      	ldrb	r3, [r7, #1]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d2a:	887a      	ldrh	r2, [r7, #2]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d30:	e003      	b.n	8004d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d32:	887b      	ldrh	r3, [r7, #2]
 8004d34:	041a      	lsls	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	619a      	str	r2, [r3, #24]
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	401a      	ands	r2, r3
 8004d5a:	887b      	ldrh	r3, [r7, #2]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d104      	bne.n	8004d6a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d60:	887b      	ldrh	r3, [r7, #2]
 8004d62:	041a      	lsls	r2, r3, #16
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d68:	e002      	b.n	8004d70 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d6a:	887a      	ldrh	r2, [r7, #2]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	619a      	str	r2, [r3, #24]
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d006      	beq.n	8004da0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d92:	4a05      	ldr	r2, [pc, #20]	; (8004da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f806 	bl	8004dac <HAL_GPIO_EXTI_Callback>
  }
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40013c00 	.word	0x40013c00

08004dac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0cc      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b68      	ldr	r3, [pc, #416]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d90c      	bls.n	8004e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b65      	ldr	r3, [pc, #404]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0b8      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e18:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4a58      	ldr	r2, [pc, #352]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e30:	4b53      	ldr	r3, [pc, #332]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4a52      	ldr	r2, [pc, #328]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e3c:	4b50      	ldr	r3, [pc, #320]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	494d      	ldr	r1, [pc, #308]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d044      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	4b47      	ldr	r3, [pc, #284]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d119      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e07f      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d003      	beq.n	8004e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d107      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e06f      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e92:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e067      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ea2:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 0203 	bic.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4934      	ldr	r1, [pc, #208]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb4:	f7fe f80a 	bl	8002ecc <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7fe f806 	bl	8002ecc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e04f      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 020c 	and.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d1eb      	bne.n	8004ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d20c      	bcs.n	8004f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e032      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4916      	ldr	r1, [pc, #88]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	490e      	ldr	r1, [pc, #56]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f4a:	f000 f855 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	490a      	ldr	r1, [pc, #40]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004f5c:	5ccb      	ldrb	r3, [r1, r3]
 8004f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_RCC_ClockConfig+0x1c8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd ff6a 	bl	8002e44 <HAL_InitTick>

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023c00 	.word	0x40023c00
 8004f80:	40023800 	.word	0x40023800
 8004f84:	0800b174 	.word	0x0800b174
 8004f88:	20000004 	.word	0x20000004
 8004f8c:	20000008 	.word	0x20000008

08004f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f96:	681b      	ldr	r3, [r3, #0]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000004 	.word	0x20000004

08004fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fac:	f7ff fff0 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0a9b      	lsrs	r3, r3, #10
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4903      	ldr	r1, [pc, #12]	; (8004fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	0800b184 	.word	0x0800b184

08004fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fd4:	f7ff ffdc 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0b5b      	lsrs	r3, r3, #13
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4903      	ldr	r1, [pc, #12]	; (8004ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	0800b184 	.word	0x0800b184

08004ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ffc:	b087      	sub	sp, #28
 8004ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005000:	2600      	movs	r6, #0
 8005002:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8005004:	2600      	movs	r6, #0
 8005006:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8005008:	2600      	movs	r6, #0
 800500a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 800500c:	2600      	movs	r6, #0
 800500e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005010:	2600      	movs	r6, #0
 8005012:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005014:	4ea3      	ldr	r6, [pc, #652]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005016:	68b6      	ldr	r6, [r6, #8]
 8005018:	f006 060c 	and.w	r6, r6, #12
 800501c:	2e0c      	cmp	r6, #12
 800501e:	f200 8137 	bhi.w	8005290 <HAL_RCC_GetSysClockFreq+0x298>
 8005022:	f20f 0c08 	addw	ip, pc, #8
 8005026:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005061 	.word	0x08005061
 8005030:	08005291 	.word	0x08005291
 8005034:	08005291 	.word	0x08005291
 8005038:	08005291 	.word	0x08005291
 800503c:	08005067 	.word	0x08005067
 8005040:	08005291 	.word	0x08005291
 8005044:	08005291 	.word	0x08005291
 8005048:	08005291 	.word	0x08005291
 800504c:	0800506d 	.word	0x0800506d
 8005050:	08005291 	.word	0x08005291
 8005054:	08005291 	.word	0x08005291
 8005058:	08005291 	.word	0x08005291
 800505c:	08005183 	.word	0x08005183
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b91      	ldr	r3, [pc, #580]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005062:	613b      	str	r3, [r7, #16]
       break;
 8005064:	e117      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005066:	4b91      	ldr	r3, [pc, #580]	; (80052ac <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005068:	613b      	str	r3, [r7, #16]
      break;
 800506a:	e114      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506c:	4b8d      	ldr	r3, [pc, #564]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005074:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005076:	4b8b      	ldr	r3, [pc, #556]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d024      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b88      	ldr	r3, [pc, #544]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	461a      	mov	r2, r3
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005092:	f04f 0500 	mov.w	r5, #0
 8005096:	ea02 0004 	and.w	r0, r2, r4
 800509a:	ea03 0105 	and.w	r1, r3, r5
 800509e:	4b83      	ldr	r3, [pc, #524]	; (80052ac <HAL_RCC_GetSysClockFreq+0x2b4>)
 80050a0:	fb03 f201 	mul.w	r2, r3, r1
 80050a4:	2300      	movs	r3, #0
 80050a6:	fb03 f300 	mul.w	r3, r3, r0
 80050aa:	4413      	add	r3, r2
 80050ac:	4a7f      	ldr	r2, [pc, #508]	; (80052ac <HAL_RCC_GetSysClockFreq+0x2b4>)
 80050ae:	fba0 0102 	umull	r0, r1, r0, r2
 80050b2:	440b      	add	r3, r1
 80050b4:	4619      	mov	r1, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	f7fb fdb3 	bl	8000c28 <__aeabi_uldivmod>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4613      	mov	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e04c      	b.n	8005166 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050cc:	4b75      	ldr	r3, [pc, #468]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	099b      	lsrs	r3, r3, #6
 80050d2:	461a      	mov	r2, r3
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050dc:	f04f 0100 	mov.w	r1, #0
 80050e0:	ea02 0800 	and.w	r8, r2, r0
 80050e4:	ea03 0901 	and.w	r9, r3, r1
 80050e8:	4640      	mov	r0, r8
 80050ea:	4649      	mov	r1, r9
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	014b      	lsls	r3, r1, #5
 80050f6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050fa:	0142      	lsls	r2, r0, #5
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	ebb0 0008 	subs.w	r0, r0, r8
 8005104:	eb61 0109 	sbc.w	r1, r1, r9
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	018b      	lsls	r3, r1, #6
 8005112:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005116:	0182      	lsls	r2, r0, #6
 8005118:	1a12      	subs	r2, r2, r0
 800511a:	eb63 0301 	sbc.w	r3, r3, r1
 800511e:	f04f 0000 	mov.w	r0, #0
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	00d9      	lsls	r1, r3, #3
 8005128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800512c:	00d0      	lsls	r0, r2, #3
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	eb12 0208 	adds.w	r2, r2, r8
 8005136:	eb43 0309 	adc.w	r3, r3, r9
 800513a:	f04f 0000 	mov.w	r0, #0
 800513e:	f04f 0100 	mov.w	r1, #0
 8005142:	0299      	lsls	r1, r3, #10
 8005144:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005148:	0290      	lsls	r0, r2, #10
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4610      	mov	r0, r2
 8005150:	4619      	mov	r1, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	461a      	mov	r2, r3
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	f7fb fd65 	bl	8000c28 <__aeabi_uldivmod>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4613      	mov	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005166:	4b4f      	ldr	r3, [pc, #316]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	0c1b      	lsrs	r3, r3, #16
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	3301      	adds	r3, #1
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	613b      	str	r3, [r7, #16]
      break;
 8005180:	e089      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005182:	4948      	ldr	r1, [pc, #288]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005184:	6849      	ldr	r1, [r1, #4]
 8005186:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800518a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800518c:	4945      	ldr	r1, [pc, #276]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800518e:	6849      	ldr	r1, [r1, #4]
 8005190:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005194:	2900      	cmp	r1, #0
 8005196:	d024      	beq.n	80051e2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005198:	4942      	ldr	r1, [pc, #264]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800519a:	6849      	ldr	r1, [r1, #4]
 800519c:	0989      	lsrs	r1, r1, #6
 800519e:	4608      	mov	r0, r1
 80051a0:	f04f 0100 	mov.w	r1, #0
 80051a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80051a8:	f04f 0500 	mov.w	r5, #0
 80051ac:	ea00 0204 	and.w	r2, r0, r4
 80051b0:	ea01 0305 	and.w	r3, r1, r5
 80051b4:	493d      	ldr	r1, [pc, #244]	; (80052ac <HAL_RCC_GetSysClockFreq+0x2b4>)
 80051b6:	fb01 f003 	mul.w	r0, r1, r3
 80051ba:	2100      	movs	r1, #0
 80051bc:	fb01 f102 	mul.w	r1, r1, r2
 80051c0:	1844      	adds	r4, r0, r1
 80051c2:	493a      	ldr	r1, [pc, #232]	; (80052ac <HAL_RCC_GetSysClockFreq+0x2b4>)
 80051c4:	fba2 0101 	umull	r0, r1, r2, r1
 80051c8:	1863      	adds	r3, r4, r1
 80051ca:	4619      	mov	r1, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	f7fb fd28 	bl	8000c28 <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4613      	mov	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e04a      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e2:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	461a      	mov	r2, r3
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	ea02 0400 	and.w	r4, r2, r0
 80051fa:	ea03 0501 	and.w	r5, r3, r1
 80051fe:	4620      	mov	r0, r4
 8005200:	4629      	mov	r1, r5
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	014b      	lsls	r3, r1, #5
 800520c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005210:	0142      	lsls	r2, r0, #5
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	1b00      	subs	r0, r0, r4
 8005218:	eb61 0105 	sbc.w	r1, r1, r5
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	018b      	lsls	r3, r1, #6
 8005226:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800522a:	0182      	lsls	r2, r0, #6
 800522c:	1a12      	subs	r2, r2, r0
 800522e:	eb63 0301 	sbc.w	r3, r3, r1
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	00d9      	lsls	r1, r3, #3
 800523c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005240:	00d0      	lsls	r0, r2, #3
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	1912      	adds	r2, r2, r4
 8005248:	eb45 0303 	adc.w	r3, r5, r3
 800524c:	f04f 0000 	mov.w	r0, #0
 8005250:	f04f 0100 	mov.w	r1, #0
 8005254:	0299      	lsls	r1, r3, #10
 8005256:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800525a:	0290      	lsls	r0, r2, #10
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	461a      	mov	r2, r3
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	f7fb fcdc 	bl	8000c28 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0f1b      	lsrs	r3, r3, #28
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	613b      	str	r3, [r7, #16]
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005292:	613b      	str	r3, [r7, #16]
      break;
 8005294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005296:	693b      	ldr	r3, [r7, #16]
}
 8005298:	4618      	mov	r0, r3
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052a2:	bf00      	nop
 80052a4:	40023800 	.word	0x40023800
 80052a8:	00f42400 	.word	0x00f42400
 80052ac:	017d7840 	.word	0x017d7840

080052b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8083 	beq.w	80053d0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80052ca:	4b95      	ldr	r3, [pc, #596]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d019      	beq.n	800530a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052d6:	4b92      	ldr	r3, [pc, #584]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d106      	bne.n	80052f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052e2:	4b8f      	ldr	r3, [pc, #572]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ee:	d00c      	beq.n	800530a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f0:	4b8b      	ldr	r3, [pc, #556]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	d112      	bne.n	8005322 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052fc:	4b88      	ldr	r3, [pc, #544]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005308:	d10b      	bne.n	8005322 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530a:	4b85      	ldr	r3, [pc, #532]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d05b      	beq.n	80053ce <HAL_RCC_OscConfig+0x11e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d157      	bne.n	80053ce <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e216      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x8a>
 800532c:	4b7c      	ldr	r3, [pc, #496]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7b      	ldr	r2, [pc, #492]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e01d      	b.n	8005376 <HAL_RCC_OscConfig+0xc6>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005342:	d10c      	bne.n	800535e <HAL_RCC_OscConfig+0xae>
 8005344:	4b76      	ldr	r3, [pc, #472]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a75      	ldr	r2, [pc, #468]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800534a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	4b73      	ldr	r3, [pc, #460]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a72      	ldr	r2, [pc, #456]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	e00b      	b.n	8005376 <HAL_RCC_OscConfig+0xc6>
 800535e:	4b70      	ldr	r3, [pc, #448]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a6f      	ldr	r2, [pc, #444]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4b6d      	ldr	r3, [pc, #436]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6c      	ldr	r2, [pc, #432]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005374:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d013      	beq.n	80053a6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fd fda5 	bl	8002ecc <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005386:	f7fd fda1 	bl	8002ecc <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b64      	cmp	r3, #100	; 0x64
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e1db      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005398:	4b61      	ldr	r3, [pc, #388]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0xd6>
 80053a4:	e014      	b.n	80053d0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fd fd91 	bl	8002ecc <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ae:	f7fd fd8d 	bl	8002ecc <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b64      	cmp	r3, #100	; 0x64
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e1c7      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c0:	4b57      	ldr	r3, [pc, #348]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f0      	bne.n	80053ae <HAL_RCC_OscConfig+0xfe>
 80053cc:	e000      	b.n	80053d0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d06f      	beq.n	80054bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053dc:	4b50      	ldr	r3, [pc, #320]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d017      	beq.n	8005418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053e8:	4b4d      	ldr	r3, [pc, #308]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d105      	bne.n	8005400 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053f4:	4b4a      	ldr	r3, [pc, #296]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005400:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d11c      	bne.n	8005446 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800540c:	4b44      	ldr	r3, [pc, #272]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005418:	4b41      	ldr	r3, [pc, #260]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_RCC_OscConfig+0x180>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d001      	beq.n	8005430 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e18f      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005430:	4b3b      	ldr	r3, [pc, #236]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	4938      	ldr	r1, [pc, #224]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005440:	4313      	orrs	r3, r2
 8005442:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005444:	e03a      	b.n	80054bc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800544e:	4b35      	ldr	r3, [pc, #212]	; (8005524 <HAL_RCC_OscConfig+0x274>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fd fd3a 	bl	8002ecc <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800545c:	f7fd fd36 	bl	8002ecc <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e170      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4925      	ldr	r1, [pc, #148]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]
 800548e:	e015      	b.n	80054bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005490:	4b24      	ldr	r3, [pc, #144]	; (8005524 <HAL_RCC_OscConfig+0x274>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fd fd19 	bl	8002ecc <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549e:	f7fd fd15 	bl	8002ecc <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e14f      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b0:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f0      	bne.n	800549e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d037      	beq.n	8005538 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d016      	beq.n	80054fe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d0:	4b15      	ldr	r3, [pc, #84]	; (8005528 <HAL_RCC_OscConfig+0x278>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d6:	f7fd fcf9 	bl	8002ecc <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054de:	f7fd fcf5 	bl	8002ecc <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e12f      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_RCC_OscConfig+0x270>)
 80054f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x22e>
 80054fc:	e01c      	b.n	8005538 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_RCC_OscConfig+0x278>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fd fce2 	bl	8002ecc <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800550a:	e00f      	b.n	800552c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800550c:	f7fd fcde 	bl	8002ecc <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d908      	bls.n	800552c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e118      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	42470000 	.word	0x42470000
 8005528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800552c:	4b8a      	ldr	r3, [pc, #552]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 800552e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e9      	bne.n	800550c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8097 	beq.w	8005674 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005546:	2300      	movs	r3, #0
 8005548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554a:	4b83      	ldr	r3, [pc, #524]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10f      	bne.n	8005576 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	4b7f      	ldr	r3, [pc, #508]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	4a7e      	ldr	r2, [pc, #504]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
 8005566:	4b7c      	ldr	r3, [pc, #496]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005576:	4b79      	ldr	r3, [pc, #484]	; (800575c <HAL_RCC_OscConfig+0x4ac>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d118      	bne.n	80055b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005582:	4b76      	ldr	r3, [pc, #472]	; (800575c <HAL_RCC_OscConfig+0x4ac>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a75      	ldr	r2, [pc, #468]	; (800575c <HAL_RCC_OscConfig+0x4ac>)
 8005588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558e:	f7fd fc9d 	bl	8002ecc <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005596:	f7fd fc99 	bl	8002ecc <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e0d3      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a8:	4b6c      	ldr	r3, [pc, #432]	; (800575c <HAL_RCC_OscConfig+0x4ac>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d106      	bne.n	80055ca <HAL_RCC_OscConfig+0x31a>
 80055bc:	4b66      	ldr	r3, [pc, #408]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	4a65      	ldr	r2, [pc, #404]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	6713      	str	r3, [r2, #112]	; 0x70
 80055c8:	e01c      	b.n	8005604 <HAL_RCC_OscConfig+0x354>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d10c      	bne.n	80055ec <HAL_RCC_OscConfig+0x33c>
 80055d2:	4b61      	ldr	r3, [pc, #388]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	4a60      	ldr	r2, [pc, #384]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055d8:	f043 0304 	orr.w	r3, r3, #4
 80055dc:	6713      	str	r3, [r2, #112]	; 0x70
 80055de:	4b5e      	ldr	r3, [pc, #376]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	4a5d      	ldr	r2, [pc, #372]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ea:	e00b      	b.n	8005604 <HAL_RCC_OscConfig+0x354>
 80055ec:	4b5a      	ldr	r3, [pc, #360]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	4a59      	ldr	r2, [pc, #356]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055f2:	f023 0301 	bic.w	r3, r3, #1
 80055f6:	6713      	str	r3, [r2, #112]	; 0x70
 80055f8:	4b57      	ldr	r3, [pc, #348]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	4a56      	ldr	r2, [pc, #344]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80055fe:	f023 0304 	bic.w	r3, r3, #4
 8005602:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d015      	beq.n	8005638 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fd fc5e 	bl	8002ecc <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005612:	e00a      	b.n	800562a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fd fc5a 	bl	8002ecc <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e092      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562a:	4b4b      	ldr	r3, [pc, #300]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0ee      	beq.n	8005614 <HAL_RCC_OscConfig+0x364>
 8005636:	e014      	b.n	8005662 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005638:	f7fd fc48 	bl	8002ecc <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563e:	e00a      	b.n	8005656 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005640:	f7fd fc44 	bl	8002ecc <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f241 3288 	movw	r2, #5000	; 0x1388
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e07c      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005656:	4b40      	ldr	r3, [pc, #256]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1ee      	bne.n	8005640 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d105      	bne.n	8005674 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005668:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	4a3a      	ldr	r2, [pc, #232]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 800566e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005672:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d068      	beq.n	800574e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800567c:	4b36      	ldr	r3, [pc, #216]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 030c 	and.w	r3, r3, #12
 8005684:	2b08      	cmp	r3, #8
 8005686:	d060      	beq.n	800574a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d145      	bne.n	800571c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005690:	4b33      	ldr	r3, [pc, #204]	; (8005760 <HAL_RCC_OscConfig+0x4b0>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fd fc19 	bl	8002ecc <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800569e:	f7fd fc15 	bl	8002ecc <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e04f      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b0:	4b29      	ldr	r3, [pc, #164]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	019b      	lsls	r3, r3, #6
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	3b01      	subs	r3, #1
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	061b      	lsls	r3, r3, #24
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	071b      	lsls	r3, r3, #28
 80056e8:	491b      	ldr	r1, [pc, #108]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ee:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <HAL_RCC_OscConfig+0x4b0>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fd fbea 	bl	8002ecc <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fc:	f7fd fbe6 	bl	8002ecc <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e020      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570e:	4b12      	ldr	r3, [pc, #72]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x44c>
 800571a:	e018      	b.n	800574e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571c:	4b10      	ldr	r3, [pc, #64]	; (8005760 <HAL_RCC_OscConfig+0x4b0>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005722:	f7fd fbd3 	bl	8002ecc <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572a:	f7fd fbcf 	bl	8002ecc <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e009      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_RCC_OscConfig+0x4a8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f0      	bne.n	800572a <HAL_RCC_OscConfig+0x47a>
 8005748:	e001      	b.n	800574e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	40007000 	.word	0x40007000
 8005760:	42470060 	.word	0x42470060

08005764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e056      	b.n	8005824 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fc ffe3 	bl	800275c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	ea42 0103 	orr.w	r1, r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	f003 0104 	and.w	r1, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69da      	ldr	r2, [r3, #28]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005812:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_SPI_Transmit+0x22>
 800584a:	2302      	movs	r3, #2
 800584c:	e11e      	b.n	8005a8c <HAL_SPI_Transmit+0x260>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005856:	f7fd fb39 	bl	8002ecc <HAL_GetTick>
 800585a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d002      	beq.n	8005872 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800586c:	2302      	movs	r3, #2
 800586e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005870:	e103      	b.n	8005a7a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_SPI_Transmit+0x52>
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005882:	e0fa      	b.n	8005a7a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2203      	movs	r2, #3
 8005888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	88fa      	ldrh	r2, [r7, #6]
 80058a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	d107      	bne.n	80058dc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d007      	beq.n	80058fa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005902:	d14b      	bne.n	800599c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_SPI_Transmit+0xe6>
 800590c:	8afb      	ldrh	r3, [r7, #22]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d13e      	bne.n	8005990 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	881a      	ldrh	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	1c9a      	adds	r2, r3, #2
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005936:	e02b      	b.n	8005990 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d112      	bne.n	800596c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	881a      	ldrh	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	1c9a      	adds	r2, r3, #2
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	86da      	strh	r2, [r3, #54]	; 0x36
 800596a:	e011      	b.n	8005990 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800596c:	f7fd faae 	bl	8002ecc <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d803      	bhi.n	8005984 <HAL_SPI_Transmit+0x158>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d102      	bne.n	800598a <HAL_SPI_Transmit+0x15e>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800598e:	e074      	b.n	8005a7a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ce      	bne.n	8005938 <HAL_SPI_Transmit+0x10c>
 800599a:	e04c      	b.n	8005a36 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_SPI_Transmit+0x17e>
 80059a4:	8afb      	ldrh	r3, [r7, #22]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d140      	bne.n	8005a2c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	7812      	ldrb	r2, [r2, #0]
 80059b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059d0:	e02c      	b.n	8005a2c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d113      	bne.n	8005a08 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a06:	e011      	b.n	8005a2c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a08:	f7fd fa60 	bl	8002ecc <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d803      	bhi.n	8005a20 <HAL_SPI_Transmit+0x1f4>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d102      	bne.n	8005a26 <HAL_SPI_Transmit+0x1fa>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a2a:	e026      	b.n	8005a7a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1cd      	bne.n	80059d2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fe9a 	bl	8006774 <SPI_EndRxTxTransaction>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a54:	2300      	movs	r3, #0
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	77fb      	strb	r3, [r7, #31]
 8005a76:	e000      	b.n	8005a7a <HAL_SPI_Transmit+0x24e>
  }

error:
 8005a78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08c      	sub	sp, #48	; 0x30
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x26>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e18a      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x33c>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ac2:	f7fd fa03 	bl	8002ecc <HAL_GetTick>
 8005ac6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d00f      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x70>
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aea:	d107      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x68>
 8005af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d003      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b02:	e15b      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x82>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x82>
 8005b10:	887b      	ldrh	r3, [r7, #2]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b1c:	e14e      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d003      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2205      	movs	r2, #5
 8005b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	887a      	ldrh	r2, [r7, #2]
 8005b42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	887a      	ldrh	r2, [r7, #2]
 8005b54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	887a      	ldrh	r2, [r7, #2]
 8005b5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d007      	beq.n	8005b86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8e:	d178      	bne.n	8005c82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_SPI_TransmitReceive+0x10a>
 8005b98:	8b7b      	ldrh	r3, [r7, #26]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d166      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	881a      	ldrh	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	1c9a      	adds	r2, r3, #2
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc2:	e053      	b.n	8005c6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d11b      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x176>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d016      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x176>
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d113      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	1c9a      	adds	r2, r3, #2
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d119      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x1b8>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d014      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	b292      	uxth	r2, r2
 8005c2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	1c9a      	adds	r2, r3, #2
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c4c:	f7fd f93e 	bl	8002ecc <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d807      	bhi.n	8005c6c <HAL_SPI_TransmitReceive+0x1d8>
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d003      	beq.n	8005c6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c6a:	e0a7      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1a6      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x130>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1a1      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x130>
 8005c80:	e07c      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SPI_TransmitReceive+0x1fc>
 8005c8a:	8b7b      	ldrh	r3, [r7, #26]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d16b      	bne.n	8005d68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	7812      	ldrb	r2, [r2, #0]
 8005c9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cb6:	e057      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d11c      	bne.n	8005d00 <HAL_SPI_TransmitReceive+0x26c>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d017      	beq.n	8005d00 <HAL_SPI_TransmitReceive+0x26c>
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d114      	bne.n	8005d00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d119      	bne.n	8005d42 <HAL_SPI_TransmitReceive+0x2ae>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d014      	beq.n	8005d42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d42:	f7fd f8c3 	bl	8002ecc <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d803      	bhi.n	8005d5a <HAL_SPI_TransmitReceive+0x2c6>
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d102      	bne.n	8005d60 <HAL_SPI_TransmitReceive+0x2cc>
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d66:	e029      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1a2      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x224>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d19d      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fcf7 	bl	8006774 <SPI_EndRxTxTransaction>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d006      	beq.n	8005d9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d98:	e010      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	e000      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005dba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3730      	adds	r7, #48	; 0x30
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_SPI_Transmit_DMA+0x20>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e093      	b.n	8005f20 <HAL_SPI_Transmit_DMA+0x148>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d002      	beq.n	8005e12 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e10:	e081      	b.n	8005f16 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_Transmit_DMA+0x46>
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e22:	e078      	b.n	8005f16 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2203      	movs	r2, #3
 8005e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	88fa      	ldrh	r2, [r7, #6]
 8005e3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6a:	d107      	bne.n	8005e7c <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e80:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <HAL_SPI_Transmit_DMA+0x150>)
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e88:	4a28      	ldr	r2, [pc, #160]	; (8005f2c <HAL_SPI_Transmit_DMA+0x154>)
 8005e8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e90:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <HAL_SPI_Transmit_DMA+0x158>)
 8005e92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e98:	2200      	movs	r2, #0
 8005e9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005eb4:	f7fe fad8 	bl	8004468 <HAL_DMA_Start_IT>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec2:	f043 0210 	orr.w	r2, r3, #16
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005ed6:	e01e      	b.n	8005f16 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d007      	beq.n	8005ef6 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0220 	orr.w	r2, r2, #32
 8005f04:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0202 	orr.w	r2, r2, #2
 8005f14:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	08006541 	.word	0x08006541
 8005f2c:	08006361 	.word	0x08006361
 8005f30:	08006595 	.word	0x08006595

08005f34 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d110      	bne.n	8005f70 <HAL_SPI_Receive_DMA+0x3c>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f56:	d10b      	bne.n	8005f70 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f8a4 	bl	80060b4 <HAL_SPI_TransmitReceive_DMA>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	e097      	b.n	80060a0 <HAL_SPI_Receive_DMA+0x16c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_SPI_Receive_DMA+0x4a>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e090      	b.n	80060a0 <HAL_SPI_Receive_DMA+0x16c>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d002      	beq.n	8005f98 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005f92:	2302      	movs	r3, #2
 8005f94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f96:	e07e      	b.n	8006096 <HAL_SPI_Receive_DMA+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_SPI_Receive_DMA+0x70>
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fa8:	e075      	b.n	8006096 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2204      	movs	r2, #4
 8005fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fea:	d107      	bne.n	8005ffc <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ffa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006000:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <HAL_SPI_Receive_DMA+0x174>)
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006008:	4a28      	ldr	r2, [pc, #160]	; (80060ac <HAL_SPI_Receive_DMA+0x178>)
 800600a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006010:	4a27      	ldr	r2, [pc, #156]	; (80060b0 <HAL_SPI_Receive_DMA+0x17c>)
 8006012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006018:	2200      	movs	r2, #0
 800601a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	4619      	mov	r1, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006034:	f7fe fa18 	bl	8004468 <HAL_DMA_Start_IT>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	f043 0210 	orr.w	r2, r3, #16
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006056:	e01e      	b.n	8006096 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d007      	beq.n	8006076 <HAL_SPI_Receive_DMA+0x142>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006074:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0220 	orr.w	r2, r2, #32
 8006084:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800609e:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	0800655d 	.word	0x0800655d
 80060ac:	08006409 	.word	0x08006409
 80060b0:	08006595 	.word	0x08006595

080060b4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e0e3      	b.n	800629c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80060ea:	7dbb      	ldrb	r3, [r7, #22]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d00d      	beq.n	800610c <HAL_SPI_TransmitReceive_DMA+0x58>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060f6:	d106      	bne.n	8006106 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006100:	7dbb      	ldrb	r3, [r7, #22]
 8006102:	2b04      	cmp	r3, #4
 8006104:	d002      	beq.n	800610c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006106:	2302      	movs	r3, #2
 8006108:	75fb      	strb	r3, [r7, #23]
    goto error;
 800610a:	e0c2      	b.n	8006292 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006118:	887b      	ldrh	r3, [r7, #2]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006122:	e0b6      	b.n	8006292 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b04      	cmp	r3, #4
 800612e:	d003      	beq.n	8006138 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2205      	movs	r2, #5
 8006134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	887a      	ldrh	r2, [r7, #2]
 8006148:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	887a      	ldrh	r2, [r7, #2]
 800614e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	887a      	ldrh	r2, [r7, #2]
 800615a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	887a      	ldrh	r2, [r7, #2]
 8006160:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b04      	cmp	r3, #4
 8006178:	d108      	bne.n	800618c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617e:	4a49      	ldr	r2, [pc, #292]	; (80062a4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006186:	4a48      	ldr	r2, [pc, #288]	; (80062a8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006188:	63da      	str	r2, [r3, #60]	; 0x3c
 800618a:	e007      	b.n	800619c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006190:	4a46      	ldr	r2, [pc, #280]	; (80062ac <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8006192:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006198:	4a45      	ldr	r2, [pc, #276]	; (80062b0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800619a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a0:	4a44      	ldr	r2, [pc, #272]	; (80062b4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80061a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a8:	2200      	movs	r2, #0
 80061aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	4619      	mov	r1, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80061c4:	f7fe f950 	bl	8004468 <HAL_DMA_Start_IT>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00c      	beq.n	80061e8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	f043 0210 	orr.w	r2, r3, #16
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80061e6:	e054      	b.n	8006292 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fc:	2200      	movs	r2, #0
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006204:	2200      	movs	r2, #0
 8006206:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620c:	2200      	movs	r2, #0
 800620e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006214:	2200      	movs	r2, #0
 8006216:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	4619      	mov	r1, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006230:	f7fe f91a 	bl	8004468 <HAL_DMA_Start_IT>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	f043 0210 	orr.w	r2, r3, #16
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006252:	e01e      	b.n	8006292 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b40      	cmp	r3, #64	; 0x40
 8006260:	d007      	beq.n	8006272 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006270:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0220 	orr.w	r2, r2, #32
 8006280:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0202 	orr.w	r2, r2, #2
 8006290:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800629a:	7dfb      	ldrb	r3, [r7, #23]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	0800655d 	.word	0x0800655d
 80062a8:	08006409 	.word	0x08006409
 80062ac:	08006579 	.word	0x08006579
 80062b0:	080064b1 	.word	0x080064b1
 80062b4:	08006595 	.word	0x08006595

080062b8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006352:	b2db      	uxtb	r3, r3
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800636e:	f7fc fdad 	bl	8002ecc <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006382:	d03b      	beq.n	80063fc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0220 	bic.w	r2, r2, #32
 8006392:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0202 	bic.w	r2, r2, #2
 80063a2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	2164      	movs	r1, #100	; 0x64
 80063a8:	6978      	ldr	r0, [r7, #20]
 80063aa:	f000 f9e3 	bl	8006774 <SPI_EndRxTxTransaction>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b8:	f043 0220 	orr.w	r2, r3, #32
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80063f4:	6978      	ldr	r0, [r7, #20]
 80063f6:	f7ff ff9b 	bl	8006330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80063fa:	e002      	b.n	8006402 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	f7ff ff5b 	bl	80062b8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006416:	f7fc fd59 	bl	8002ecc <HAL_GetTick>
 800641a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642a:	d03b      	beq.n	80064a4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0220 	bic.w	r2, r2, #32
 800643a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10d      	bne.n	8006460 <SPI_DMAReceiveCplt+0x58>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800644c:	d108      	bne.n	8006460 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0203 	bic.w	r2, r2, #3
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	e007      	b.n	8006470 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0201 	bic.w	r2, r2, #1
 800646e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	2164      	movs	r1, #100	; 0x64
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 f917 	bl	80066a8 <SPI_EndRxTransaction>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff ff47 	bl	8006330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80064a2:	e002      	b.n	80064aa <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff ff11 	bl	80062cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064be:	f7fc fd05 	bl	8002ecc <HAL_GetTick>
 80064c2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d2:	d02f      	beq.n	8006534 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0220 	bic.w	r2, r2, #32
 80064e2:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	2164      	movs	r1, #100	; 0x64
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f943 	bl	8006774 <SPI_EndRxTxTransaction>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	f043 0220 	orr.w	r2, r3, #32
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0203 	bic.w	r2, r2, #3
 800650e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7ff feff 	bl	8006330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006532:	e002      	b.n	800653a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff fed3 	bl	80062e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff fed0 	bl	80062f4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7ff fecc 	bl	8006308 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff fec8 	bl	800631c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0203 	bic.w	r2, r2, #3
 80065b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	f043 0210 	orr.w	r2, r3, #16
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff feb2 	bl	8006330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065e4:	e04c      	b.n	8006680 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d048      	beq.n	8006680 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80065ee:	f7fc fc6d 	bl	8002ecc <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d902      	bls.n	8006604 <SPI_WaitFlagStateUntilTimeout+0x30>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d13d      	bne.n	8006680 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006612:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800661c:	d111      	bne.n	8006642 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006626:	d004      	beq.n	8006632 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006630:	d107      	bne.n	8006642 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006640:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664a:	d10f      	bne.n	800666c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800666a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e00f      	b.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	429a      	cmp	r2, r3
 800668e:	bf0c      	ite	eq
 8006690:	2301      	moveq	r3, #1
 8006692:	2300      	movne	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	429a      	cmp	r2, r3
 800669c:	d1a3      	bne.n	80065e6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066bc:	d111      	bne.n	80066e2 <SPI_EndRxTransaction+0x3a>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c6:	d004      	beq.n	80066d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d0:	d107      	bne.n	80066e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ea:	d12a      	bne.n	8006742 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f4:	d012      	beq.n	800671c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2200      	movs	r2, #0
 80066fe:	2180      	movs	r1, #128	; 0x80
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff ff67 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d02d      	beq.n	8006768 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	f043 0220 	orr.w	r2, r3, #32
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e026      	b.n	800676a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	2101      	movs	r1, #1
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff ff54 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01a      	beq.n	8006768 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e013      	b.n	800676a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2200      	movs	r2, #0
 800674a:	2101      	movs	r1, #1
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff ff41 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	f043 0220 	orr.w	r2, r3, #32
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e000      	b.n	800676a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <SPI_EndRxTxTransaction+0x7c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <SPI_EndRxTxTransaction+0x80>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	0d5b      	lsrs	r3, r3, #21
 800678c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006790:	fb02 f303 	mul.w	r3, r2, r3
 8006794:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679e:	d112      	bne.n	80067c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2200      	movs	r2, #0
 80067a8:	2180      	movs	r1, #128	; 0x80
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff ff12 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d016      	beq.n	80067e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e00f      	b.n	80067e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067dc:	2b80      	cmp	r3, #128	; 0x80
 80067de:	d0f2      	beq.n	80067c6 <SPI_EndRxTxTransaction+0x52>
 80067e0:	e000      	b.n	80067e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80067e2:	bf00      	nop
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000004 	.word	0x20000004
 80067f4:	165e9f81 	.word	0x165e9f81

080067f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e01d      	b.n	8006846 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fc f848 	bl	80028b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3304      	adds	r3, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f000 f8d0 	bl	80069dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006866:	2302      	movs	r3, #2
 8006868:	e0b4      	b.n	80069d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b0c      	cmp	r3, #12
 800687e:	f200 809f 	bhi.w	80069c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068bd 	.word	0x080068bd
 800688c:	080069c1 	.word	0x080069c1
 8006890:	080069c1 	.word	0x080069c1
 8006894:	080069c1 	.word	0x080069c1
 8006898:	080068fd 	.word	0x080068fd
 800689c:	080069c1 	.word	0x080069c1
 80068a0:	080069c1 	.word	0x080069c1
 80068a4:	080069c1 	.word	0x080069c1
 80068a8:	0800693f 	.word	0x0800693f
 80068ac:	080069c1 	.word	0x080069c1
 80068b0:	080069c1 	.word	0x080069c1
 80068b4:	080069c1 	.word	0x080069c1
 80068b8:	0800697f 	.word	0x0800697f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f92a 	bl	8006b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0208 	orr.w	r2, r2, #8
 80068d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0204 	bic.w	r2, r2, #4
 80068e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6999      	ldr	r1, [r3, #24]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	619a      	str	r2, [r3, #24]
      break;
 80068fa:	e062      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f97a 	bl	8006bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6999      	ldr	r1, [r3, #24]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	021a      	lsls	r2, r3, #8
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	619a      	str	r2, [r3, #24]
      break;
 800693c:	e041      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f9cf 	bl	8006ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69da      	ldr	r2, [r3, #28]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0208 	orr.w	r2, r2, #8
 8006958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 0204 	bic.w	r2, r2, #4
 8006968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69d9      	ldr	r1, [r3, #28]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	61da      	str	r2, [r3, #28]
      break;
 800697c:	e021      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fa23 	bl	8006dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69da      	ldr	r2, [r3, #28]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69d9      	ldr	r1, [r3, #28]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	021a      	lsls	r2, r3, #8
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	61da      	str	r2, [r3, #28]
      break;
 80069be:	e000      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80069c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a40      	ldr	r2, [pc, #256]	; (8006af0 <TIM_Base_SetConfig+0x114>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fa:	d00f      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3d      	ldr	r2, [pc, #244]	; (8006af4 <TIM_Base_SetConfig+0x118>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3c      	ldr	r2, [pc, #240]	; (8006af8 <TIM_Base_SetConfig+0x11c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3b      	ldr	r2, [pc, #236]	; (8006afc <TIM_Base_SetConfig+0x120>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a3a      	ldr	r2, [pc, #232]	; (8006b00 <TIM_Base_SetConfig+0x124>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2f      	ldr	r2, [pc, #188]	; (8006af0 <TIM_Base_SetConfig+0x114>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d02b      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d027      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2c      	ldr	r2, [pc, #176]	; (8006af4 <TIM_Base_SetConfig+0x118>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d023      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2b      	ldr	r2, [pc, #172]	; (8006af8 <TIM_Base_SetConfig+0x11c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01f      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2a      	ldr	r2, [pc, #168]	; (8006afc <TIM_Base_SetConfig+0x120>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01b      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <TIM_Base_SetConfig+0x124>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d017      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <TIM_Base_SetConfig+0x128>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a27      	ldr	r2, [pc, #156]	; (8006b08 <TIM_Base_SetConfig+0x12c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00f      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a26      	ldr	r2, [pc, #152]	; (8006b0c <TIM_Base_SetConfig+0x130>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00b      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a25      	ldr	r2, [pc, #148]	; (8006b10 <TIM_Base_SetConfig+0x134>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d007      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a24      	ldr	r2, [pc, #144]	; (8006b14 <TIM_Base_SetConfig+0x138>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d003      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a23      	ldr	r2, [pc, #140]	; (8006b18 <TIM_Base_SetConfig+0x13c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d108      	bne.n	8006aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <TIM_Base_SetConfig+0x114>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_Base_SetConfig+0xf8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <TIM_Base_SetConfig+0x124>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d103      	bne.n	8006adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	615a      	str	r2, [r3, #20]
}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40000800 	.word	0x40000800
 8006afc:	40000c00 	.word	0x40000c00
 8006b00:	40010400 	.word	0x40010400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800
 8006b10:	40001800 	.word	0x40001800
 8006b14:	40001c00 	.word	0x40001c00
 8006b18:	40002000 	.word	0x40002000

08006b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0201 	bic.w	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0302 	bic.w	r3, r3, #2
 8006b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <TIM_OC1_SetConfig+0xd8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC1_SetConfig+0x64>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <TIM_OC1_SetConfig+0xdc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d10c      	bne.n	8006b9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f023 0308 	bic.w	r3, r3, #8
 8006b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f023 0304 	bic.w	r3, r3, #4
 8006b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a15      	ldr	r2, [pc, #84]	; (8006bf4 <TIM_OC1_SetConfig+0xd8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_OC1_SetConfig+0x8e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a14      	ldr	r2, [pc, #80]	; (8006bf8 <TIM_OC1_SetConfig+0xdc>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d111      	bne.n	8006bce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	621a      	str	r2, [r3, #32]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	40010400 	.word	0x40010400

08006bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f023 0210 	bic.w	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0320 	bic.w	r3, r3, #32
 8006c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a22      	ldr	r2, [pc, #136]	; (8006ce0 <TIM_OC2_SetConfig+0xe4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_OC2_SetConfig+0x68>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a21      	ldr	r2, [pc, #132]	; (8006ce4 <TIM_OC2_SetConfig+0xe8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d10d      	bne.n	8006c80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <TIM_OC2_SetConfig+0xe4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC2_SetConfig+0x94>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a16      	ldr	r2, [pc, #88]	; (8006ce4 <TIM_OC2_SetConfig+0xe8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d113      	bne.n	8006cb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40010400 	.word	0x40010400

08006ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <TIM_OC3_SetConfig+0xe0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC3_SetConfig+0x66>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <TIM_OC3_SetConfig+0xe4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10d      	bne.n	8006d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <TIM_OC3_SetConfig+0xe0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC3_SetConfig+0x92>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <TIM_OC3_SetConfig+0xe4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d113      	bne.n	8006da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	621a      	str	r2, [r3, #32]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40010400 	.word	0x40010400

08006dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	031b      	lsls	r3, r3, #12
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <TIM_OC4_SetConfig+0xa4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC4_SetConfig+0x68>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <TIM_OC4_SetConfig+0xa8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d109      	bne.n	8006e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	019b      	lsls	r3, r3, #6
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40010400 	.word	0x40010400

08006e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e05a      	b.n	8006f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d022      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d01d      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d10c      	bne.n	8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40010400 	.word	0x40010400
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40001800 	.word	0x40001800

08006f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e03f      	b.n	8007006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fb fce2 	bl	8002964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	; 0x24
 8006fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f829 	bl	8007010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	b0bd      	sub	sp, #244	; 0xf4
 8007016:	af00      	add	r7, sp, #0
 8007018:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800701c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702c:	68d9      	ldr	r1, [r3, #12]
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	ea40 0301 	orr.w	r3, r0, r1
 8007038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	431a      	orrs	r2, r3
 8007048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	431a      	orrs	r2, r3
 8007050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800705c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007068:	f021 010c 	bic.w	r1, r1, #12
 800706c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007076:	430b      	orrs	r3, r1
 8007078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708a:	6999      	ldr	r1, [r3, #24]
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	ea40 0301 	orr.w	r3, r0, r1
 8007096:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a2:	f040 81a5 	bne.w	80073f0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4bcd      	ldr	r3, [pc, #820]	; (80073e4 <UART_SetConfig+0x3d4>)
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d006      	beq.n	80070c0 <UART_SetConfig+0xb0>
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4bcb      	ldr	r3, [pc, #812]	; (80073e8 <UART_SetConfig+0x3d8>)
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f040 80cb 	bne.w	8007256 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7fd ff86 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 80070c4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070cc:	461c      	mov	r4, r3
 80070ce:	f04f 0500 	mov.w	r5, #0
 80070d2:	4622      	mov	r2, r4
 80070d4:	462b      	mov	r3, r5
 80070d6:	1891      	adds	r1, r2, r2
 80070d8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80070dc:	415b      	adcs	r3, r3
 80070de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80070e6:	1912      	adds	r2, r2, r4
 80070e8:	eb45 0303 	adc.w	r3, r5, r3
 80070ec:	f04f 0000 	mov.w	r0, #0
 80070f0:	f04f 0100 	mov.w	r1, #0
 80070f4:	00d9      	lsls	r1, r3, #3
 80070f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070fa:	00d0      	lsls	r0, r2, #3
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	1911      	adds	r1, r2, r4
 8007102:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007106:	416b      	adcs	r3, r5
 8007108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800710c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	461a      	mov	r2, r3
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	1891      	adds	r1, r2, r2
 800711a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800711e:	415b      	adcs	r3, r3
 8007120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007124:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007128:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800712c:	f7f9 fd7c 	bl	8000c28 <__aeabi_uldivmod>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4bad      	ldr	r3, [pc, #692]	; (80073ec <UART_SetConfig+0x3dc>)
 8007136:	fba3 2302 	umull	r2, r3, r3, r2
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	011e      	lsls	r6, r3, #4
 800713e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007142:	461c      	mov	r4, r3
 8007144:	f04f 0500 	mov.w	r5, #0
 8007148:	4622      	mov	r2, r4
 800714a:	462b      	mov	r3, r5
 800714c:	1891      	adds	r1, r2, r2
 800714e:	67b9      	str	r1, [r7, #120]	; 0x78
 8007150:	415b      	adcs	r3, r3
 8007152:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007154:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007158:	1912      	adds	r2, r2, r4
 800715a:	eb45 0303 	adc.w	r3, r5, r3
 800715e:	f04f 0000 	mov.w	r0, #0
 8007162:	f04f 0100 	mov.w	r1, #0
 8007166:	00d9      	lsls	r1, r3, #3
 8007168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800716c:	00d0      	lsls	r0, r2, #3
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	1911      	adds	r1, r2, r4
 8007174:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007178:	416b      	adcs	r3, r5
 800717a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	461a      	mov	r2, r3
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	1891      	adds	r1, r2, r2
 800718c:	6739      	str	r1, [r7, #112]	; 0x70
 800718e:	415b      	adcs	r3, r3
 8007190:	677b      	str	r3, [r7, #116]	; 0x74
 8007192:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007196:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800719a:	f7f9 fd45 	bl	8000c28 <__aeabi_uldivmod>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4b92      	ldr	r3, [pc, #584]	; (80073ec <UART_SetConfig+0x3dc>)
 80071a4:	fba3 1302 	umull	r1, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	2164      	movs	r1, #100	; 0x64
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	3332      	adds	r3, #50	; 0x32
 80071b6:	4a8d      	ldr	r2, [pc, #564]	; (80073ec <UART_SetConfig+0x3dc>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071c4:	441e      	add	r6, r3
 80071c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071ca:	4618      	mov	r0, r3
 80071cc:	f04f 0100 	mov.w	r1, #0
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	1894      	adds	r4, r2, r2
 80071d6:	66bc      	str	r4, [r7, #104]	; 0x68
 80071d8:	415b      	adcs	r3, r3
 80071da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80071e0:	1812      	adds	r2, r2, r0
 80071e2:	eb41 0303 	adc.w	r3, r1, r3
 80071e6:	f04f 0400 	mov.w	r4, #0
 80071ea:	f04f 0500 	mov.w	r5, #0
 80071ee:	00dd      	lsls	r5, r3, #3
 80071f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071f4:	00d4      	lsls	r4, r2, #3
 80071f6:	4622      	mov	r2, r4
 80071f8:	462b      	mov	r3, r5
 80071fa:	1814      	adds	r4, r2, r0
 80071fc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007200:	414b      	adcs	r3, r1
 8007202:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	461a      	mov	r2, r3
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	1891      	adds	r1, r2, r2
 8007214:	6639      	str	r1, [r7, #96]	; 0x60
 8007216:	415b      	adcs	r3, r3
 8007218:	667b      	str	r3, [r7, #100]	; 0x64
 800721a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800721e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007222:	f7f9 fd01 	bl	8000c28 <__aeabi_uldivmod>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4b70      	ldr	r3, [pc, #448]	; (80073ec <UART_SetConfig+0x3dc>)
 800722c:	fba3 1302 	umull	r1, r3, r3, r2
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	2164      	movs	r1, #100	; 0x64
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	3332      	adds	r3, #50	; 0x32
 800723e:	4a6b      	ldr	r2, [pc, #428]	; (80073ec <UART_SetConfig+0x3dc>)
 8007240:	fba2 2303 	umull	r2, r3, r2, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	f003 0207 	and.w	r2, r3, #7
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4432      	add	r2, r6
 8007252:	609a      	str	r2, [r3, #8]
 8007254:	e26d      	b.n	8007732 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007256:	f7fd fea7 	bl	8004fa8 <HAL_RCC_GetPCLK1Freq>
 800725a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800725e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007262:	461c      	mov	r4, r3
 8007264:	f04f 0500 	mov.w	r5, #0
 8007268:	4622      	mov	r2, r4
 800726a:	462b      	mov	r3, r5
 800726c:	1891      	adds	r1, r2, r2
 800726e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007270:	415b      	adcs	r3, r3
 8007272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007274:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007278:	1912      	adds	r2, r2, r4
 800727a:	eb45 0303 	adc.w	r3, r5, r3
 800727e:	f04f 0000 	mov.w	r0, #0
 8007282:	f04f 0100 	mov.w	r1, #0
 8007286:	00d9      	lsls	r1, r3, #3
 8007288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800728c:	00d0      	lsls	r0, r2, #3
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	1911      	adds	r1, r2, r4
 8007294:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007298:	416b      	adcs	r3, r5
 800729a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	461a      	mov	r2, r3
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	1891      	adds	r1, r2, r2
 80072ac:	6539      	str	r1, [r7, #80]	; 0x50
 80072ae:	415b      	adcs	r3, r3
 80072b0:	657b      	str	r3, [r7, #84]	; 0x54
 80072b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072b6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80072ba:	f7f9 fcb5 	bl	8000c28 <__aeabi_uldivmod>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <UART_SetConfig+0x3dc>)
 80072c4:	fba3 2302 	umull	r2, r3, r3, r2
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	011e      	lsls	r6, r3, #4
 80072cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072d0:	461c      	mov	r4, r3
 80072d2:	f04f 0500 	mov.w	r5, #0
 80072d6:	4622      	mov	r2, r4
 80072d8:	462b      	mov	r3, r5
 80072da:	1891      	adds	r1, r2, r2
 80072dc:	64b9      	str	r1, [r7, #72]	; 0x48
 80072de:	415b      	adcs	r3, r3
 80072e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072e6:	1912      	adds	r2, r2, r4
 80072e8:	eb45 0303 	adc.w	r3, r5, r3
 80072ec:	f04f 0000 	mov.w	r0, #0
 80072f0:	f04f 0100 	mov.w	r1, #0
 80072f4:	00d9      	lsls	r1, r3, #3
 80072f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072fa:	00d0      	lsls	r0, r2, #3
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	1911      	adds	r1, r2, r4
 8007302:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8007306:	416b      	adcs	r3, r5
 8007308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800730c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	461a      	mov	r2, r3
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	1891      	adds	r1, r2, r2
 800731a:	6439      	str	r1, [r7, #64]	; 0x40
 800731c:	415b      	adcs	r3, r3
 800731e:	647b      	str	r3, [r7, #68]	; 0x44
 8007320:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007324:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007328:	f7f9 fc7e 	bl	8000c28 <__aeabi_uldivmod>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4b2e      	ldr	r3, [pc, #184]	; (80073ec <UART_SetConfig+0x3dc>)
 8007332:	fba3 1302 	umull	r1, r3, r3, r2
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	2164      	movs	r1, #100	; 0x64
 800733a:	fb01 f303 	mul.w	r3, r1, r3
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	3332      	adds	r3, #50	; 0x32
 8007344:	4a29      	ldr	r2, [pc, #164]	; (80073ec <UART_SetConfig+0x3dc>)
 8007346:	fba2 2303 	umull	r2, r3, r2, r3
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007352:	441e      	add	r6, r3
 8007354:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007358:	4618      	mov	r0, r3
 800735a:	f04f 0100 	mov.w	r1, #0
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	1894      	adds	r4, r2, r2
 8007364:	63bc      	str	r4, [r7, #56]	; 0x38
 8007366:	415b      	adcs	r3, r3
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800736a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800736e:	1812      	adds	r2, r2, r0
 8007370:	eb41 0303 	adc.w	r3, r1, r3
 8007374:	f04f 0400 	mov.w	r4, #0
 8007378:	f04f 0500 	mov.w	r5, #0
 800737c:	00dd      	lsls	r5, r3, #3
 800737e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007382:	00d4      	lsls	r4, r2, #3
 8007384:	4622      	mov	r2, r4
 8007386:	462b      	mov	r3, r5
 8007388:	1814      	adds	r4, r2, r0
 800738a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800738e:	414b      	adcs	r3, r1
 8007390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	461a      	mov	r2, r3
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	1891      	adds	r1, r2, r2
 80073a2:	6339      	str	r1, [r7, #48]	; 0x30
 80073a4:	415b      	adcs	r3, r3
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
 80073a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80073ac:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073b0:	f7f9 fc3a 	bl	8000c28 <__aeabi_uldivmod>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <UART_SetConfig+0x3dc>)
 80073ba:	fba3 1302 	umull	r1, r3, r3, r2
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	2164      	movs	r1, #100	; 0x64
 80073c2:	fb01 f303 	mul.w	r3, r1, r3
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	3332      	adds	r3, #50	; 0x32
 80073cc:	4a07      	ldr	r2, [pc, #28]	; (80073ec <UART_SetConfig+0x3dc>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	f003 0207 	and.w	r2, r3, #7
 80073d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4432      	add	r2, r6
 80073e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80073e2:	e1a6      	b.n	8007732 <UART_SetConfig+0x722>
 80073e4:	40011000 	.word	0x40011000
 80073e8:	40011400 	.word	0x40011400
 80073ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4bd1      	ldr	r3, [pc, #836]	; (800773c <UART_SetConfig+0x72c>)
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d006      	beq.n	800740a <UART_SetConfig+0x3fa>
 80073fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4bcf      	ldr	r3, [pc, #828]	; (8007740 <UART_SetConfig+0x730>)
 8007404:	429a      	cmp	r2, r3
 8007406:	f040 80ca 	bne.w	800759e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800740a:	f7fd fde1 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 800740e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007416:	461c      	mov	r4, r3
 8007418:	f04f 0500 	mov.w	r5, #0
 800741c:	4622      	mov	r2, r4
 800741e:	462b      	mov	r3, r5
 8007420:	1891      	adds	r1, r2, r2
 8007422:	62b9      	str	r1, [r7, #40]	; 0x28
 8007424:	415b      	adcs	r3, r3
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800742c:	1912      	adds	r2, r2, r4
 800742e:	eb45 0303 	adc.w	r3, r5, r3
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f04f 0100 	mov.w	r1, #0
 800743a:	00d9      	lsls	r1, r3, #3
 800743c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007440:	00d0      	lsls	r0, r2, #3
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	eb12 0a04 	adds.w	sl, r2, r4
 800744a:	eb43 0b05 	adc.w	fp, r3, r5
 800744e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	4618      	mov	r0, r3
 8007456:	f04f 0100 	mov.w	r1, #0
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	008b      	lsls	r3, r1, #2
 8007464:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007468:	0082      	lsls	r2, r0, #2
 800746a:	4650      	mov	r0, sl
 800746c:	4659      	mov	r1, fp
 800746e:	f7f9 fbdb 	bl	8000c28 <__aeabi_uldivmod>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4bb3      	ldr	r3, [pc, #716]	; (8007744 <UART_SetConfig+0x734>)
 8007478:	fba3 2302 	umull	r2, r3, r3, r2
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	011e      	lsls	r6, r3, #4
 8007480:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007484:	4618      	mov	r0, r3
 8007486:	f04f 0100 	mov.w	r1, #0
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	1894      	adds	r4, r2, r2
 8007490:	623c      	str	r4, [r7, #32]
 8007492:	415b      	adcs	r3, r3
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
 8007496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800749a:	1812      	adds	r2, r2, r0
 800749c:	eb41 0303 	adc.w	r3, r1, r3
 80074a0:	f04f 0400 	mov.w	r4, #0
 80074a4:	f04f 0500 	mov.w	r5, #0
 80074a8:	00dd      	lsls	r5, r3, #3
 80074aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074ae:	00d4      	lsls	r4, r2, #3
 80074b0:	4622      	mov	r2, r4
 80074b2:	462b      	mov	r3, r5
 80074b4:	1814      	adds	r4, r2, r0
 80074b6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80074ba:	414b      	adcs	r3, r1
 80074bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f04f 0100 	mov.w	r1, #0
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	008b      	lsls	r3, r1, #2
 80074d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074da:	0082      	lsls	r2, r0, #2
 80074dc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80074e0:	f7f9 fba2 	bl	8000c28 <__aeabi_uldivmod>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4b96      	ldr	r3, [pc, #600]	; (8007744 <UART_SetConfig+0x734>)
 80074ea:	fba3 1302 	umull	r1, r3, r3, r2
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	2164      	movs	r1, #100	; 0x64
 80074f2:	fb01 f303 	mul.w	r3, r1, r3
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	011b      	lsls	r3, r3, #4
 80074fa:	3332      	adds	r3, #50	; 0x32
 80074fc:	4a91      	ldr	r2, [pc, #580]	; (8007744 <UART_SetConfig+0x734>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007508:	441e      	add	r6, r3
 800750a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800750e:	4618      	mov	r0, r3
 8007510:	f04f 0100 	mov.w	r1, #0
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	1894      	adds	r4, r2, r2
 800751a:	61bc      	str	r4, [r7, #24]
 800751c:	415b      	adcs	r3, r3
 800751e:	61fb      	str	r3, [r7, #28]
 8007520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007524:	1812      	adds	r2, r2, r0
 8007526:	eb41 0303 	adc.w	r3, r1, r3
 800752a:	f04f 0400 	mov.w	r4, #0
 800752e:	f04f 0500 	mov.w	r5, #0
 8007532:	00dd      	lsls	r5, r3, #3
 8007534:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007538:	00d4      	lsls	r4, r2, #3
 800753a:	4622      	mov	r2, r4
 800753c:	462b      	mov	r3, r5
 800753e:	1814      	adds	r4, r2, r0
 8007540:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007544:	414b      	adcs	r3, r1
 8007546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800754a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4618      	mov	r0, r3
 8007552:	f04f 0100 	mov.w	r1, #0
 8007556:	f04f 0200 	mov.w	r2, #0
 800755a:	f04f 0300 	mov.w	r3, #0
 800755e:	008b      	lsls	r3, r1, #2
 8007560:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007564:	0082      	lsls	r2, r0, #2
 8007566:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800756a:	f7f9 fb5d 	bl	8000c28 <__aeabi_uldivmod>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4b74      	ldr	r3, [pc, #464]	; (8007744 <UART_SetConfig+0x734>)
 8007574:	fba3 1302 	umull	r1, r3, r3, r2
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	2164      	movs	r1, #100	; 0x64
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	3332      	adds	r3, #50	; 0x32
 8007586:	4a6f      	ldr	r2, [pc, #444]	; (8007744 <UART_SetConfig+0x734>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	f003 020f 	and.w	r2, r3, #15
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4432      	add	r2, r6
 800759a:	609a      	str	r2, [r3, #8]
 800759c:	e0c9      	b.n	8007732 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800759e:	f7fd fd03 	bl	8004fa8 <HAL_RCC_GetPCLK1Freq>
 80075a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075aa:	461c      	mov	r4, r3
 80075ac:	f04f 0500 	mov.w	r5, #0
 80075b0:	4622      	mov	r2, r4
 80075b2:	462b      	mov	r3, r5
 80075b4:	1891      	adds	r1, r2, r2
 80075b6:	6139      	str	r1, [r7, #16]
 80075b8:	415b      	adcs	r3, r3
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075c0:	1912      	adds	r2, r2, r4
 80075c2:	eb45 0303 	adc.w	r3, r5, r3
 80075c6:	f04f 0000 	mov.w	r0, #0
 80075ca:	f04f 0100 	mov.w	r1, #0
 80075ce:	00d9      	lsls	r1, r3, #3
 80075d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075d4:	00d0      	lsls	r0, r2, #3
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	eb12 0804 	adds.w	r8, r2, r4
 80075de:	eb43 0905 	adc.w	r9, r3, r5
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f04f 0100 	mov.w	r1, #0
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	008b      	lsls	r3, r1, #2
 80075f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075fc:	0082      	lsls	r2, r0, #2
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	f7f9 fb11 	bl	8000c28 <__aeabi_uldivmod>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4b4e      	ldr	r3, [pc, #312]	; (8007744 <UART_SetConfig+0x734>)
 800760c:	fba3 2302 	umull	r2, r3, r3, r2
 8007610:	095b      	lsrs	r3, r3, #5
 8007612:	011e      	lsls	r6, r3, #4
 8007614:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007618:	4618      	mov	r0, r3
 800761a:	f04f 0100 	mov.w	r1, #0
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	1894      	adds	r4, r2, r2
 8007624:	60bc      	str	r4, [r7, #8]
 8007626:	415b      	adcs	r3, r3
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800762e:	1812      	adds	r2, r2, r0
 8007630:	eb41 0303 	adc.w	r3, r1, r3
 8007634:	f04f 0400 	mov.w	r4, #0
 8007638:	f04f 0500 	mov.w	r5, #0
 800763c:	00dd      	lsls	r5, r3, #3
 800763e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007642:	00d4      	lsls	r4, r2, #3
 8007644:	4622      	mov	r2, r4
 8007646:	462b      	mov	r3, r5
 8007648:	1814      	adds	r4, r2, r0
 800764a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800764e:	414b      	adcs	r3, r1
 8007650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4618      	mov	r0, r3
 800765c:	f04f 0100 	mov.w	r1, #0
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	008b      	lsls	r3, r1, #2
 800766a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800766e:	0082      	lsls	r2, r0, #2
 8007670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007674:	f7f9 fad8 	bl	8000c28 <__aeabi_uldivmod>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4b31      	ldr	r3, [pc, #196]	; (8007744 <UART_SetConfig+0x734>)
 800767e:	fba3 1302 	umull	r1, r3, r3, r2
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	2164      	movs	r1, #100	; 0x64
 8007686:	fb01 f303 	mul.w	r3, r1, r3
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	3332      	adds	r3, #50	; 0x32
 8007690:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <UART_SetConfig+0x734>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800769c:	441e      	add	r6, r3
 800769e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f04f 0100 	mov.w	r1, #0
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	1894      	adds	r4, r2, r2
 80076ae:	603c      	str	r4, [r7, #0]
 80076b0:	415b      	adcs	r3, r3
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b8:	1812      	adds	r2, r2, r0
 80076ba:	eb41 0303 	adc.w	r3, r1, r3
 80076be:	f04f 0400 	mov.w	r4, #0
 80076c2:	f04f 0500 	mov.w	r5, #0
 80076c6:	00dd      	lsls	r5, r3, #3
 80076c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076cc:	00d4      	lsls	r4, r2, #3
 80076ce:	4622      	mov	r2, r4
 80076d0:	462b      	mov	r3, r5
 80076d2:	1814      	adds	r4, r2, r0
 80076d4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80076d8:	414b      	adcs	r3, r1
 80076da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	008b      	lsls	r3, r1, #2
 80076f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076f8:	0082      	lsls	r2, r0, #2
 80076fa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80076fe:	f7f9 fa93 	bl	8000c28 <__aeabi_uldivmod>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <UART_SetConfig+0x734>)
 8007708:	fba3 1302 	umull	r1, r3, r3, r2
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	2164      	movs	r1, #100	; 0x64
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	3332      	adds	r3, #50	; 0x32
 800771a:	4a0a      	ldr	r2, [pc, #40]	; (8007744 <UART_SetConfig+0x734>)
 800771c:	fba2 2303 	umull	r2, r3, r2, r3
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f003 020f 	and.w	r2, r3, #15
 8007726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4432      	add	r2, r6
 800772e:	609a      	str	r2, [r3, #8]
}
 8007730:	e7ff      	b.n	8007732 <UART_SetConfig+0x722>
 8007732:	bf00      	nop
 8007734:	37f4      	adds	r7, #244	; 0xf4
 8007736:	46bd      	mov	sp, r7
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	40011000 	.word	0x40011000
 8007740:	40011400 	.word	0x40011400
 8007744:	51eb851f 	.word	0x51eb851f

08007748 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800774c:	4904      	ldr	r1, [pc, #16]	; (8007760 <MX_FATFS_Init+0x18>)
 800774e:	4805      	ldr	r0, [pc, #20]	; (8007764 <MX_FATFS_Init+0x1c>)
 8007750:	f000 ff14 	bl	800857c <FATFS_LinkDriver>
 8007754:	4603      	mov	r3, r0
 8007756:	461a      	mov	r2, r3
 8007758:	4b03      	ldr	r3, [pc, #12]	; (8007768 <MX_FATFS_Init+0x20>)
 800775a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800775c:	bf00      	nop
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20002a4c 	.word	0x20002a4c
 8007764:	20000010 	.word	0x20000010
 8007768:	20002a50 	.word	0x20002a50

0800776c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	4618      	mov	r0, r3
 800777a:	f7f9 ff37 	bl	80015ec <SD_disk_initialize>
 800777e:	4603      	mov	r3, r0
 8007780:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	4603      	mov	r3, r0
 8007792:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	4618      	mov	r0, r3
 8007798:	f7fa f814 	bl	80017c4 <SD_disk_status>
 800779c:	4603      	mov	r3, r0
 800779e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	607a      	str	r2, [r7, #4]
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80077b8:	7bf8      	ldrb	r0, [r7, #15]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	68b9      	ldr	r1, [r7, #8]
 80077c0:	f7fa f816 	bl	80017f0 <SD_disk_read>
 80077c4:	4603      	mov	r3, r0
 80077c6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80077e0:	7bf8      	ldrb	r0, [r7, #15]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	f7fa f86c 	bl	80018c4 <SD_disk_write>
 80077ec:	4603      	mov	r3, r0
 80077ee:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	603a      	str	r2, [r7, #0]
 8007802:	71fb      	strb	r3, [r7, #7]
 8007804:	460b      	mov	r3, r1
 8007806:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	79b9      	ldrb	r1, [r7, #6]
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7fa f8dc 	bl	80019cc <SD_disk_ioctl>
 8007814:	4603      	mov	r3, r0
 8007816:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007818:	4618      	mov	r0, r3
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800782a:	79fb      	ldrb	r3, [r7, #7]
 800782c:	4a08      	ldr	r2, [pc, #32]	; (8007850 <disk_status+0x30>)
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	79fa      	ldrb	r2, [r7, #7]
 8007838:	4905      	ldr	r1, [pc, #20]	; (8007850 <disk_status+0x30>)
 800783a:	440a      	add	r2, r1
 800783c:	7a12      	ldrb	r2, [r2, #8]
 800783e:	4610      	mov	r0, r2
 8007840:	4798      	blx	r3
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000450 	.word	0x20000450

08007854 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	4a0d      	ldr	r2, [pc, #52]	; (800789c <disk_initialize+0x48>)
 8007866:	5cd3      	ldrb	r3, [r2, r3]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d111      	bne.n	8007890 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	4a0b      	ldr	r2, [pc, #44]	; (800789c <disk_initialize+0x48>)
 8007870:	2101      	movs	r1, #1
 8007872:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	4a09      	ldr	r2, [pc, #36]	; (800789c <disk_initialize+0x48>)
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	79fa      	ldrb	r2, [r7, #7]
 8007882:	4906      	ldr	r1, [pc, #24]	; (800789c <disk_initialize+0x48>)
 8007884:	440a      	add	r2, r1
 8007886:	7a12      	ldrb	r2, [r2, #8]
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000450 	.word	0x20000450

080078a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80078a0:	b590      	push	{r4, r7, lr}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	4a0a      	ldr	r2, [pc, #40]	; (80078dc <disk_read+0x3c>)
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	689c      	ldr	r4, [r3, #8]
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4a07      	ldr	r2, [pc, #28]	; (80078dc <disk_read+0x3c>)
 80078c0:	4413      	add	r3, r2
 80078c2:	7a18      	ldrb	r0, [r3, #8]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	47a0      	blx	r4
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd90      	pop	{r4, r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000450 	.word	0x20000450

080078e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	4a0a      	ldr	r2, [pc, #40]	; (800791c <disk_write+0x3c>)
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	68dc      	ldr	r4, [r3, #12]
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	4a07      	ldr	r2, [pc, #28]	; (800791c <disk_write+0x3c>)
 8007900:	4413      	add	r3, r2
 8007902:	7a18      	ldrb	r0, [r3, #8]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	47a0      	blx	r4
 800790c:	4603      	mov	r3, r0
 800790e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
}
 8007912:	4618      	mov	r0, r3
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	bd90      	pop	{r4, r7, pc}
 800791a:	bf00      	nop
 800791c:	20000450 	.word	0x20000450

08007920 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	603a      	str	r2, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
 800792c:	460b      	mov	r3, r1
 800792e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	4a09      	ldr	r2, [pc, #36]	; (8007958 <disk_ioctl+0x38>)
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	79fa      	ldrb	r2, [r7, #7]
 800793e:	4906      	ldr	r1, [pc, #24]	; (8007958 <disk_ioctl+0x38>)
 8007940:	440a      	add	r2, r1
 8007942:	7a10      	ldrb	r0, [r2, #8]
 8007944:	79b9      	ldrb	r1, [r7, #6]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	4798      	blx	r3
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]
  return res;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000450 	.word	0x20000450

0800795c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3301      	adds	r3, #1
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800796c:	89fb      	ldrh	r3, [r7, #14]
 800796e:	021b      	lsls	r3, r3, #8
 8007970:	b21a      	sxth	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b21b      	sxth	r3, r3
 8007978:	4313      	orrs	r3, r2
 800797a:	b21b      	sxth	r3, r3
 800797c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800797e:	89fb      	ldrh	r3, [r7, #14]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3303      	adds	r3, #3
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	3202      	adds	r2, #2
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	3201      	adds	r2, #1
 80079b2:	7812      	ldrb	r2, [r2, #0]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	7812      	ldrb	r2, [r2, #0]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e010      	b.n	8007a04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80079e2:	4a0d      	ldr	r2, [pc, #52]	; (8007a18 <clear_lock+0x44>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	4413      	add	r3, r2
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d105      	bne.n	80079fe <clear_lock+0x2a>
 80079f2:	4a09      	ldr	r2, [pc, #36]	; (8007a18 <clear_lock+0x44>)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	4413      	add	r3, r2
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d9eb      	bls.n	80079e2 <clear_lock+0xe>
	}
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	20000230 	.word	0x20000230

08007a1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	78db      	ldrb	r3, [r3, #3]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d034      	beq.n	8007a9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7858      	ldrb	r0, [r3, #1]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a40:	2301      	movs	r3, #1
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	f7ff ff4c 	bl	80078e0 <disk_write>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	73fb      	strb	r3, [r7, #15]
 8007a52:	e022      	b.n	8007a9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	1ad2      	subs	r2, r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d217      	bcs.n	8007a9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	789b      	ldrb	r3, [r3, #2]
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	e010      	b.n	8007a94 <sync_window+0x78>
					wsect += fs->fsize;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7858      	ldrb	r0, [r3, #1]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a86:	2301      	movs	r3, #1
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	f7ff ff29 	bl	80078e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d8eb      	bhi.n	8007a72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d01b      	beq.n	8007af4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff ffad 	bl	8007a1c <sync_window>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d113      	bne.n	8007af4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7858      	ldrb	r0, [r3, #1]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	f7ff fee1 	bl	80078a0 <disk_read>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d904      	bls.n	8007b1e <get_fat+0x20>
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d302      	bcc.n	8007b24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b1e:	2301      	movs	r3, #1
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	e0bb      	b.n	8007c9c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295
 8007b28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	f000 8083 	beq.w	8007c3a <get_fat+0x13c>
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	f300 80a7 	bgt.w	8007c88 <get_fat+0x18a>
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d002      	beq.n	8007b44 <get_fat+0x46>
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d056      	beq.n	8007bf0 <get_fat+0xf2>
 8007b42:	e0a1      	b.n	8007c88 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	899b      	ldrh	r3, [r3, #12]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b62:	4413      	add	r3, r2
 8007b64:	4619      	mov	r1, r3
 8007b66:	6938      	ldr	r0, [r7, #16]
 8007b68:	f7ff ff9c 	bl	8007aa4 <move_window>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 808d 	bne.w	8007c8e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	60fa      	str	r2, [r7, #12]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	8992      	ldrh	r2, [r2, #12]
 8007b7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b82:	fb02 f201 	mul.w	r2, r2, r1
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	899b      	ldrh	r3, [r3, #12]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6938      	ldr	r0, [r7, #16]
 8007ba8:	f7ff ff7c 	bl	8007aa4 <move_window>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d16f      	bne.n	8007c92 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	899b      	ldrh	r3, [r3, #12]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bbe:	fb02 f201 	mul.w	r2, r2, r1
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	461a      	mov	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <get_fat+0xe8>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	091b      	lsrs	r3, r3, #4
 8007be4:	e002      	b.n	8007bec <get_fat+0xee>
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bec:	617b      	str	r3, [r7, #20]
			break;
 8007bee:	e055      	b.n	8007c9c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	899b      	ldrh	r3, [r3, #12]
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c04:	4413      	add	r3, r2
 8007c06:	4619      	mov	r1, r3
 8007c08:	6938      	ldr	r0, [r7, #16]
 8007c0a:	f7ff ff4b 	bl	8007aa4 <move_window>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d140      	bne.n	8007c96 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	8992      	ldrh	r2, [r2, #12]
 8007c22:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c26:	fb02 f200 	mul.w	r2, r2, r0
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fe94 	bl	800795c <ld_word>
 8007c34:	4603      	mov	r3, r0
 8007c36:	617b      	str	r3, [r7, #20]
			break;
 8007c38:	e030      	b.n	8007c9c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	899b      	ldrh	r3, [r3, #12]
 8007c42:	089b      	lsrs	r3, r3, #2
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	4619      	mov	r1, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c4e:	4413      	add	r3, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	6938      	ldr	r0, [r7, #16]
 8007c54:	f7ff ff26 	bl	8007aa4 <move_window>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d11d      	bne.n	8007c9a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	8992      	ldrh	r2, [r2, #12]
 8007c6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c70:	fb02 f200 	mul.w	r2, r2, r0
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	440b      	add	r3, r1
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fe87 	bl	800798c <ld_dword>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c84:	617b      	str	r3, [r7, #20]
			break;
 8007c86:	e009      	b.n	8007c9c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c88:	2301      	movs	r3, #1
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	e006      	b.n	8007c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c8e:	bf00      	nop
 8007c90:	e004      	b.n	8007c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c9a:	bf00      	nop
		}
	}

	return val;
 8007c9c:	697b      	ldr	r3, [r7, #20]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b087      	sub	sp, #28
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d031      	beq.n	8007d20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e002      	b.n	8007cca <get_ldnumber+0x24>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b1f      	cmp	r3, #31
 8007cd0:	d903      	bls.n	8007cda <get_ldnumber+0x34>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b3a      	cmp	r3, #58	; 0x3a
 8007cd8:	d1f4      	bne.n	8007cc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b3a      	cmp	r3, #58	; 0x3a
 8007ce0:	d11c      	bne.n	8007d1c <get_ldnumber+0x76>
			tp = *path;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	60fa      	str	r2, [r7, #12]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	3b30      	subs	r3, #48	; 0x30
 8007cf2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b09      	cmp	r3, #9
 8007cf8:	d80e      	bhi.n	8007d18 <get_ldnumber+0x72>
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d10a      	bne.n	8007d18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d107      	bne.n	8007d18 <get_ldnumber+0x72>
					vol = (int)i;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	e002      	b.n	8007d22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007d20:	693b      	ldr	r3, [r7, #16]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
	...

08007d30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	70da      	strb	r2, [r3, #3]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f04f 32ff 	mov.w	r2, #4294967295
 8007d46:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff feaa 	bl	8007aa4 <move_window>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <check_fs+0x2a>
 8007d56:	2304      	movs	r3, #4
 8007d58:	e038      	b.n	8007dcc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3338      	adds	r3, #56	; 0x38
 8007d5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fdfa 	bl	800795c <ld_word>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d001      	beq.n	8007d78 <check_fs+0x48>
 8007d74:	2303      	movs	r3, #3
 8007d76:	e029      	b.n	8007dcc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d7e:	2be9      	cmp	r3, #233	; 0xe9
 8007d80:	d009      	beq.n	8007d96 <check_fs+0x66>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d88:	2beb      	cmp	r3, #235	; 0xeb
 8007d8a:	d11e      	bne.n	8007dca <check_fs+0x9a>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d92:	2b90      	cmp	r3, #144	; 0x90
 8007d94:	d119      	bne.n	8007dca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3338      	adds	r3, #56	; 0x38
 8007d9a:	3336      	adds	r3, #54	; 0x36
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fdf5 	bl	800798c <ld_dword>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007da8:	4a0a      	ldr	r2, [pc, #40]	; (8007dd4 <check_fs+0xa4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d101      	bne.n	8007db2 <check_fs+0x82>
 8007dae:	2300      	movs	r3, #0
 8007db0:	e00c      	b.n	8007dcc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	3338      	adds	r3, #56	; 0x38
 8007db6:	3352      	adds	r3, #82	; 0x52
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff fde7 	bl	800798c <ld_dword>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4a05      	ldr	r2, [pc, #20]	; (8007dd8 <check_fs+0xa8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d101      	bne.n	8007dca <check_fs+0x9a>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e000      	b.n	8007dcc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007dca:	2302      	movs	r3, #2
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	00544146 	.word	0x00544146
 8007dd8:	33544146 	.word	0x33544146

08007ddc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b096      	sub	sp, #88	; 0x58
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4613      	mov	r3, r2
 8007de8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff ff58 	bl	8007ca6 <get_ldnumber>
 8007df6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da01      	bge.n	8007e02 <find_volume+0x26>
 8007dfe:	230b      	movs	r3, #11
 8007e00:	e268      	b.n	80082d4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007e02:	4ab0      	ldr	r2, [pc, #704]	; (80080c4 <find_volume+0x2e8>)
 8007e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <find_volume+0x3a>
 8007e12:	230c      	movs	r3, #12
 8007e14:	e25e      	b.n	80082d4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	f023 0301 	bic.w	r3, r3, #1
 8007e22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01a      	beq.n	8007e62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff fcf5 	bl	8007820 <disk_status>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10c      	bne.n	8007e62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <find_volume+0x82>
 8007e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007e5a:	230a      	movs	r3, #10
 8007e5c:	e23a      	b.n	80082d4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e238      	b.n	80082d4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff fced 	bl	8007854 <disk_initialize>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007e80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e221      	b.n	80082d4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <find_volume+0xca>
 8007e96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007ea2:	230a      	movs	r3, #10
 8007ea4:	e216      	b.n	80082d4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	7858      	ldrb	r0, [r3, #1]
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	330c      	adds	r3, #12
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2102      	movs	r1, #2
 8007eb2:	f7ff fd35 	bl	8007920 <disk_ioctl>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <find_volume+0xe4>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e209      	b.n	80082d4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	899b      	ldrh	r3, [r3, #12]
 8007ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec8:	d80d      	bhi.n	8007ee6 <find_volume+0x10a>
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	899b      	ldrh	r3, [r3, #12]
 8007ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed2:	d308      	bcc.n	8007ee6 <find_volume+0x10a>
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	899b      	ldrh	r3, [r3, #12]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	899b      	ldrh	r3, [r3, #12]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <find_volume+0x10e>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e1f4      	b.n	80082d4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007eee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ef2:	f7ff ff1d 	bl	8007d30 <check_fs>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d14b      	bne.n	8007f9c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f04:	2300      	movs	r3, #0
 8007f06:	643b      	str	r3, [r7, #64]	; 0x40
 8007f08:	e01f      	b.n	8007f4a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f12:	011b      	lsls	r3, r3, #4
 8007f14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007f18:	4413      	add	r3, r2
 8007f1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	3304      	adds	r3, #4
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d006      	beq.n	8007f34 <find_volume+0x158>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	3308      	adds	r3, #8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff fd2e 	bl	800798c <ld_dword>
 8007f30:	4602      	mov	r2, r0
 8007f32:	e000      	b.n	8007f36 <find_volume+0x15a>
 8007f34:	2200      	movs	r2, #0
 8007f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007f3e:	440b      	add	r3, r1
 8007f40:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f46:	3301      	adds	r3, #1
 8007f48:	643b      	str	r3, [r7, #64]	; 0x40
 8007f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d9dc      	bls.n	8007f0a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007f50:	2300      	movs	r3, #0
 8007f52:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <find_volume+0x184>
 8007f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007f68:	4413      	add	r3, r2
 8007f6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007f6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <find_volume+0x1a6>
 8007f76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f7a:	f7ff fed9 	bl	8007d30 <check_fs>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	e000      	b.n	8007f84 <find_volume+0x1a8>
 8007f82:	2303      	movs	r3, #3
 8007f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d905      	bls.n	8007f9c <find_volume+0x1c0>
 8007f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f92:	3301      	adds	r3, #1
 8007f94:	643b      	str	r3, [r7, #64]	; 0x40
 8007f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d9e1      	bls.n	8007f60 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d101      	bne.n	8007fa8 <find_volume+0x1cc>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e195      	b.n	80082d4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d901      	bls.n	8007fb4 <find_volume+0x1d8>
 8007fb0:	230d      	movs	r3, #13
 8007fb2:	e18f      	b.n	80082d4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	3338      	adds	r3, #56	; 0x38
 8007fb8:	330b      	adds	r3, #11
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff fcce 	bl	800795c <ld_word>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc6:	899b      	ldrh	r3, [r3, #12]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d001      	beq.n	8007fd0 <find_volume+0x1f4>
 8007fcc:	230d      	movs	r3, #13
 8007fce:	e181      	b.n	80082d4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	3338      	adds	r3, #56	; 0x38
 8007fd4:	3316      	adds	r3, #22
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fcc0 	bl	800795c <ld_word>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <find_volume+0x218>
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	3338      	adds	r3, #56	; 0x38
 8007fea:	3324      	adds	r3, #36	; 0x24
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fccd 	bl	800798c <ld_dword>
 8007ff2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ff8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	789b      	ldrb	r3, [r3, #2]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d005      	beq.n	8008018 <find_volume+0x23c>
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	789b      	ldrb	r3, [r3, #2]
 8008010:	2b02      	cmp	r3, #2
 8008012:	d001      	beq.n	8008018 <find_volume+0x23c>
 8008014:	230d      	movs	r3, #13
 8008016:	e15d      	b.n	80082d4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	789b      	ldrb	r3, [r3, #2]
 800801c:	461a      	mov	r2, r3
 800801e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008020:	fb02 f303 	mul.w	r3, r2, r3
 8008024:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800802c:	b29a      	uxth	r2, r3
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	895b      	ldrh	r3, [r3, #10]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d008      	beq.n	800804c <find_volume+0x270>
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	895b      	ldrh	r3, [r3, #10]
 800803e:	461a      	mov	r2, r3
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	895b      	ldrh	r3, [r3, #10]
 8008044:	3b01      	subs	r3, #1
 8008046:	4013      	ands	r3, r2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <find_volume+0x274>
 800804c:	230d      	movs	r3, #13
 800804e:	e141      	b.n	80082d4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	3338      	adds	r3, #56	; 0x38
 8008054:	3311      	adds	r3, #17
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fc80 	bl	800795c <ld_word>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	891b      	ldrh	r3, [r3, #8]
 8008068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800806a:	8992      	ldrh	r2, [r2, #12]
 800806c:	0952      	lsrs	r2, r2, #5
 800806e:	b292      	uxth	r2, r2
 8008070:	fbb3 f1f2 	udiv	r1, r3, r2
 8008074:	fb02 f201 	mul.w	r2, r2, r1
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	b29b      	uxth	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <find_volume+0x2a8>
 8008080:	230d      	movs	r3, #13
 8008082:	e127      	b.n	80082d4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	3338      	adds	r3, #56	; 0x38
 8008088:	3313      	adds	r3, #19
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fc66 	bl	800795c <ld_word>
 8008090:	4603      	mov	r3, r0
 8008092:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <find_volume+0x2cc>
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	3338      	adds	r3, #56	; 0x38
 800809e:	3320      	adds	r3, #32
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff fc73 	bl	800798c <ld_dword>
 80080a6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	3338      	adds	r3, #56	; 0x38
 80080ac:	330e      	adds	r3, #14
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fc54 	bl	800795c <ld_word>
 80080b4:	4603      	mov	r3, r0
 80080b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80080b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d104      	bne.n	80080c8 <find_volume+0x2ec>
 80080be:	230d      	movs	r3, #13
 80080c0:	e108      	b.n	80082d4 <find_volume+0x4f8>
 80080c2:	bf00      	nop
 80080c4:	20000228 	.word	0x20000228

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80080c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80080ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080cc:	4413      	add	r3, r2
 80080ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d0:	8911      	ldrh	r1, [r2, #8]
 80080d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d4:	8992      	ldrh	r2, [r2, #12]
 80080d6:	0952      	lsrs	r2, r2, #5
 80080d8:	b292      	uxth	r2, r2
 80080da:	fbb1 f2f2 	udiv	r2, r1, r2
 80080de:	b292      	uxth	r2, r2
 80080e0:	4413      	add	r3, r2
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80080e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d201      	bcs.n	80080f0 <find_volume+0x314>
 80080ec:	230d      	movs	r3, #13
 80080ee:	e0f1      	b.n	80082d4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80080f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f8:	8952      	ldrh	r2, [r2, #10]
 80080fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <find_volume+0x32e>
 8008106:	230d      	movs	r3, #13
 8008108:	e0e4      	b.n	80082d4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800810a:	2303      	movs	r3, #3
 800810c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008116:	4293      	cmp	r3, r2
 8008118:	d802      	bhi.n	8008120 <find_volume+0x344>
 800811a:	2302      	movs	r3, #2
 800811c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008126:	4293      	cmp	r3, r2
 8008128:	d802      	bhi.n	8008130 <find_volume+0x354>
 800812a:	2301      	movs	r3, #1
 800812c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	1c9a      	adds	r2, r3, #2
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800813c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800813e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008142:	441a      	add	r2, r3
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	441a      	add	r2, r3
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008152:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008156:	2b03      	cmp	r3, #3
 8008158:	d11e      	bne.n	8008198 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	3338      	adds	r3, #56	; 0x38
 800815e:	332a      	adds	r3, #42	; 0x2a
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff fbfb 	bl	800795c <ld_word>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <find_volume+0x394>
 800816c:	230d      	movs	r3, #13
 800816e:	e0b1      	b.n	80082d4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	891b      	ldrh	r3, [r3, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <find_volume+0x3a0>
 8008178:	230d      	movs	r3, #13
 800817a:	e0ab      	b.n	80082d4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	3338      	adds	r3, #56	; 0x38
 8008180:	332c      	adds	r3, #44	; 0x2c
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff fc02 	bl	800798c <ld_dword>
 8008188:	4602      	mov	r2, r0
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	647b      	str	r3, [r7, #68]	; 0x44
 8008196:	e01f      	b.n	80081d8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	891b      	ldrh	r3, [r3, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <find_volume+0x3c8>
 80081a0:	230d      	movs	r3, #13
 80081a2:	e097      	b.n	80082d4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	441a      	add	r2, r3
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80081b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d103      	bne.n	80081c0 <find_volume+0x3e4>
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	e00a      	b.n	80081d6 <find_volume+0x3fa>
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	4613      	mov	r3, r2
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	4413      	add	r3, r2
 80081ca:	085a      	lsrs	r2, r3, #1
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80081d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	6a1a      	ldr	r2, [r3, #32]
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	899b      	ldrh	r3, [r3, #12]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e4:	440b      	add	r3, r1
 80081e6:	3b01      	subs	r3, #1
 80081e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081ea:	8989      	ldrh	r1, [r1, #12]
 80081ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d201      	bcs.n	80081f8 <find_volume+0x41c>
 80081f4:	230d      	movs	r3, #13
 80081f6:	e06d      	b.n	80082d4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	f04f 32ff 	mov.w	r2, #4294967295
 80081fe:	619a      	str	r2, [r3, #24]
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	699a      	ldr	r2, [r3, #24]
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800820e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008212:	2b03      	cmp	r3, #3
 8008214:	d149      	bne.n	80082aa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	3338      	adds	r3, #56	; 0x38
 800821a:	3330      	adds	r3, #48	; 0x30
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fb9d 	bl	800795c <ld_word>
 8008222:	4603      	mov	r3, r0
 8008224:	2b01      	cmp	r3, #1
 8008226:	d140      	bne.n	80082aa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800822a:	3301      	adds	r3, #1
 800822c:	4619      	mov	r1, r3
 800822e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008230:	f7ff fc38 	bl	8007aa4 <move_window>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d137      	bne.n	80082aa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	2200      	movs	r2, #0
 800823e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	3338      	adds	r3, #56	; 0x38
 8008244:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fb87 	bl	800795c <ld_word>
 800824e:	4603      	mov	r3, r0
 8008250:	461a      	mov	r2, r3
 8008252:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008256:	429a      	cmp	r2, r3
 8008258:	d127      	bne.n	80082aa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	3338      	adds	r3, #56	; 0x38
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fb94 	bl	800798c <ld_dword>
 8008264:	4603      	mov	r3, r0
 8008266:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <find_volume+0x500>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d11e      	bne.n	80082aa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	3338      	adds	r3, #56	; 0x38
 8008270:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff fb89 	bl	800798c <ld_dword>
 800827a:	4603      	mov	r3, r0
 800827c:	4a18      	ldr	r2, [pc, #96]	; (80082e0 <find_volume+0x504>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d113      	bne.n	80082aa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	3338      	adds	r3, #56	; 0x38
 8008286:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fb7e 	bl	800798c <ld_dword>
 8008290:	4602      	mov	r2, r0
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008294:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	3338      	adds	r3, #56	; 0x38
 800829a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fb74 	bl	800798c <ld_dword>
 80082a4:	4602      	mov	r2, r0
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80082b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <find_volume+0x508>)
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	3301      	adds	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <find_volume+0x508>)
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <find_volume+0x508>)
 80082c0:	881a      	ldrh	r2, [r3, #0]
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	4a07      	ldr	r2, [pc, #28]	; (80082e8 <find_volume+0x50c>)
 80082ca:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80082cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082ce:	f7ff fb81 	bl	80079d4 <clear_lock>
#endif
	return FR_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3758      	adds	r7, #88	; 0x58
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	41615252 	.word	0x41615252
 80082e0:	61417272 	.word	0x61417272
 80082e4:	2000022c 	.word	0x2000022c
 80082e8:	20000250 	.word	0x20000250

080082ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80082fe:	f107 0310 	add.w	r3, r7, #16
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff fccf 	bl	8007ca6 <get_ldnumber>
 8008308:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	2b00      	cmp	r3, #0
 800830e:	da01      	bge.n	8008314 <f_mount+0x28>
 8008310:	230b      	movs	r3, #11
 8008312:	e02b      	b.n	800836c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008314:	4a17      	ldr	r2, [pc, #92]	; (8008374 <f_mount+0x88>)
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800831c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008324:	69b8      	ldr	r0, [r7, #24]
 8008326:	f7ff fb55 	bl	80079d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	490d      	ldr	r1, [pc, #52]	; (8008374 <f_mount+0x88>)
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <f_mount+0x66>
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d001      	beq.n	8008356 <f_mount+0x6a>
 8008352:	2300      	movs	r3, #0
 8008354:	e00a      	b.n	800836c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008356:	f107 010c 	add.w	r1, r7, #12
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	2200      	movs	r2, #0
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff fd3b 	bl	8007ddc <find_volume>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800836a:	7dfb      	ldrb	r3, [r7, #23]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3720      	adds	r7, #32
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000228 	.word	0x20000228

08008378 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b092      	sub	sp, #72	; 0x48
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008384:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008388:	f107 030c 	add.w	r3, r7, #12
 800838c:	2200      	movs	r2, #0
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff fd24 	bl	8007ddc <find_volume>
 8008394:	4603      	mov	r3, r0
 8008396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800839a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 8099 	bne.w	80084d6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80083a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	3b02      	subs	r3, #2
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d804      	bhi.n	80083c2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	699a      	ldr	r2, [r3, #24]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	e089      	b.n	80084d6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d128      	bne.n	8008420 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80083ce:	2302      	movs	r3, #2
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80083d6:	f107 0314 	add.w	r3, r7, #20
 80083da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fb8e 	bl	8007afe <get_fat>
 80083e2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ea:	d103      	bne.n	80083f4 <f_getfree+0x7c>
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80083f2:	e063      	b.n	80084bc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d103      	bne.n	8008402 <f_getfree+0x8a>
 80083fa:	2302      	movs	r3, #2
 80083fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008400:	e05c      	b.n	80084bc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <f_getfree+0x96>
 8008408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840a:	3301      	adds	r3, #1
 800840c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800840e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008410:	3301      	adds	r3, #1
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800841a:	429a      	cmp	r2, r3
 800841c:	d3db      	bcc.n	80083d6 <f_getfree+0x5e>
 800841e:	e04d      	b.n	80084bc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
 8008430:	2300      	movs	r3, #0
 8008432:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008436:	2b00      	cmp	r3, #0
 8008438:	d113      	bne.n	8008462 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800843a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	63ba      	str	r2, [r7, #56]	; 0x38
 8008442:	4619      	mov	r1, r3
 8008444:	f7ff fb2e 	bl	8007aa4 <move_window>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800844e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008452:	2b00      	cmp	r3, #0
 8008454:	d131      	bne.n	80084ba <f_getfree+0x142>
							p = fs->win;
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	3338      	adds	r3, #56	; 0x38
 800845a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	899b      	ldrh	r3, [r3, #12]
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d10f      	bne.n	800848a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800846a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800846c:	f7ff fa76 	bl	800795c <ld_word>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d102      	bne.n	800847c <f_getfree+0x104>
 8008476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008478:	3301      	adds	r3, #1
 800847a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	3302      	adds	r3, #2
 8008480:	633b      	str	r3, [r7, #48]	; 0x30
 8008482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008484:	3b02      	subs	r3, #2
 8008486:	637b      	str	r3, [r7, #52]	; 0x34
 8008488:	e010      	b.n	80084ac <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800848a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800848c:	f7ff fa7e 	bl	800798c <ld_dword>
 8008490:	4603      	mov	r3, r0
 8008492:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <f_getfree+0x128>
 800849a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800849c:	3301      	adds	r3, #1
 800849e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	3304      	adds	r3, #4
 80084a4:	633b      	str	r3, [r7, #48]	; 0x30
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	3b04      	subs	r3, #4
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ae:	3b01      	subs	r3, #1
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1bd      	bne.n	8008434 <f_getfree+0xbc>
 80084b8:	e000      	b.n	80084bc <f_getfree+0x144>
							if (res != FR_OK) break;
 80084ba:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084c0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084c6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	791a      	ldrb	r2, [r3, #4]
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	f042 0201 	orr.w	r2, r2, #1
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80084d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3748      	adds	r7, #72	; 0x48
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084f2:	2301      	movs	r3, #1
 80084f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084fa:	4b1f      	ldr	r3, [pc, #124]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 80084fc:	7a5b      	ldrb	r3, [r3, #9]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d131      	bne.n	8008568 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008504:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 8008506:	7a5b      	ldrb	r3, [r3, #9]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 800850e:	2100      	movs	r1, #0
 8008510:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008512:	4b19      	ldr	r3, [pc, #100]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 8008514:	7a5b      	ldrb	r3, [r3, #9]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	4a17      	ldr	r2, [pc, #92]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008522:	4b15      	ldr	r3, [pc, #84]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 8008524:	7a5b      	ldrb	r3, [r3, #9]
 8008526:	b2db      	uxtb	r3, r3
 8008528:	461a      	mov	r2, r3
 800852a:	4b13      	ldr	r3, [pc, #76]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 800852c:	4413      	add	r3, r2
 800852e:	79fa      	ldrb	r2, [r7, #7]
 8008530:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008532:	4b11      	ldr	r3, [pc, #68]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 8008534:	7a5b      	ldrb	r3, [r3, #9]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	b2d1      	uxtb	r1, r2
 800853c:	4a0e      	ldr	r2, [pc, #56]	; (8008578 <FATFS_LinkDriverEx+0x94>)
 800853e:	7251      	strb	r1, [r2, #9]
 8008540:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008542:	7dbb      	ldrb	r3, [r7, #22]
 8008544:	3330      	adds	r3, #48	; 0x30
 8008546:	b2da      	uxtb	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	3301      	adds	r3, #1
 8008550:	223a      	movs	r2, #58	; 0x3a
 8008552:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	3302      	adds	r3, #2
 8008558:	222f      	movs	r2, #47	; 0x2f
 800855a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3303      	adds	r3, #3
 8008560:	2200      	movs	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008568:	7dfb      	ldrb	r3, [r7, #23]
}
 800856a:	4618      	mov	r0, r3
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	20000450 	.word	0x20000450

0800857c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008586:	2200      	movs	r2, #0
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff ffaa 	bl	80084e4 <FATFS_LinkDriverEx>
 8008590:	4603      	mov	r3, r0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <__errno>:
 800859c:	4b01      	ldr	r3, [pc, #4]	; (80085a4 <__errno+0x8>)
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	20000024 	.word	0x20000024

080085a8 <__sflush_r>:
 80085a8:	898a      	ldrh	r2, [r1, #12]
 80085aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	4605      	mov	r5, r0
 80085b0:	0710      	lsls	r0, r2, #28
 80085b2:	460c      	mov	r4, r1
 80085b4:	d458      	bmi.n	8008668 <__sflush_r+0xc0>
 80085b6:	684b      	ldr	r3, [r1, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc05      	bgt.n	80085c8 <__sflush_r+0x20>
 80085bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dc02      	bgt.n	80085c8 <__sflush_r+0x20>
 80085c2:	2000      	movs	r0, #0
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ca:	2e00      	cmp	r6, #0
 80085cc:	d0f9      	beq.n	80085c2 <__sflush_r+0x1a>
 80085ce:	2300      	movs	r3, #0
 80085d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085d4:	682f      	ldr	r7, [r5, #0]
 80085d6:	602b      	str	r3, [r5, #0]
 80085d8:	d032      	beq.n	8008640 <__sflush_r+0x98>
 80085da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	075a      	lsls	r2, r3, #29
 80085e0:	d505      	bpl.n	80085ee <__sflush_r+0x46>
 80085e2:	6863      	ldr	r3, [r4, #4]
 80085e4:	1ac0      	subs	r0, r0, r3
 80085e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085e8:	b10b      	cbz	r3, 80085ee <__sflush_r+0x46>
 80085ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085ec:	1ac0      	subs	r0, r0, r3
 80085ee:	2300      	movs	r3, #0
 80085f0:	4602      	mov	r2, r0
 80085f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f4:	6a21      	ldr	r1, [r4, #32]
 80085f6:	4628      	mov	r0, r5
 80085f8:	47b0      	blx	r6
 80085fa:	1c43      	adds	r3, r0, #1
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	d106      	bne.n	800860e <__sflush_r+0x66>
 8008600:	6829      	ldr	r1, [r5, #0]
 8008602:	291d      	cmp	r1, #29
 8008604:	d82c      	bhi.n	8008660 <__sflush_r+0xb8>
 8008606:	4a2a      	ldr	r2, [pc, #168]	; (80086b0 <__sflush_r+0x108>)
 8008608:	40ca      	lsrs	r2, r1
 800860a:	07d6      	lsls	r6, r2, #31
 800860c:	d528      	bpl.n	8008660 <__sflush_r+0xb8>
 800860e:	2200      	movs	r2, #0
 8008610:	6062      	str	r2, [r4, #4]
 8008612:	04d9      	lsls	r1, r3, #19
 8008614:	6922      	ldr	r2, [r4, #16]
 8008616:	6022      	str	r2, [r4, #0]
 8008618:	d504      	bpl.n	8008624 <__sflush_r+0x7c>
 800861a:	1c42      	adds	r2, r0, #1
 800861c:	d101      	bne.n	8008622 <__sflush_r+0x7a>
 800861e:	682b      	ldr	r3, [r5, #0]
 8008620:	b903      	cbnz	r3, 8008624 <__sflush_r+0x7c>
 8008622:	6560      	str	r0, [r4, #84]	; 0x54
 8008624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008626:	602f      	str	r7, [r5, #0]
 8008628:	2900      	cmp	r1, #0
 800862a:	d0ca      	beq.n	80085c2 <__sflush_r+0x1a>
 800862c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008630:	4299      	cmp	r1, r3
 8008632:	d002      	beq.n	800863a <__sflush_r+0x92>
 8008634:	4628      	mov	r0, r5
 8008636:	f000 f99f 	bl	8008978 <_free_r>
 800863a:	2000      	movs	r0, #0
 800863c:	6360      	str	r0, [r4, #52]	; 0x34
 800863e:	e7c1      	b.n	80085c4 <__sflush_r+0x1c>
 8008640:	6a21      	ldr	r1, [r4, #32]
 8008642:	2301      	movs	r3, #1
 8008644:	4628      	mov	r0, r5
 8008646:	47b0      	blx	r6
 8008648:	1c41      	adds	r1, r0, #1
 800864a:	d1c7      	bne.n	80085dc <__sflush_r+0x34>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0c4      	beq.n	80085dc <__sflush_r+0x34>
 8008652:	2b1d      	cmp	r3, #29
 8008654:	d001      	beq.n	800865a <__sflush_r+0xb2>
 8008656:	2b16      	cmp	r3, #22
 8008658:	d101      	bne.n	800865e <__sflush_r+0xb6>
 800865a:	602f      	str	r7, [r5, #0]
 800865c:	e7b1      	b.n	80085c2 <__sflush_r+0x1a>
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	e7ad      	b.n	80085c4 <__sflush_r+0x1c>
 8008668:	690f      	ldr	r7, [r1, #16]
 800866a:	2f00      	cmp	r7, #0
 800866c:	d0a9      	beq.n	80085c2 <__sflush_r+0x1a>
 800866e:	0793      	lsls	r3, r2, #30
 8008670:	680e      	ldr	r6, [r1, #0]
 8008672:	bf08      	it	eq
 8008674:	694b      	ldreq	r3, [r1, #20]
 8008676:	600f      	str	r7, [r1, #0]
 8008678:	bf18      	it	ne
 800867a:	2300      	movne	r3, #0
 800867c:	eba6 0807 	sub.w	r8, r6, r7
 8008680:	608b      	str	r3, [r1, #8]
 8008682:	f1b8 0f00 	cmp.w	r8, #0
 8008686:	dd9c      	ble.n	80085c2 <__sflush_r+0x1a>
 8008688:	6a21      	ldr	r1, [r4, #32]
 800868a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800868c:	4643      	mov	r3, r8
 800868e:	463a      	mov	r2, r7
 8008690:	4628      	mov	r0, r5
 8008692:	47b0      	blx	r6
 8008694:	2800      	cmp	r0, #0
 8008696:	dc06      	bgt.n	80086a6 <__sflush_r+0xfe>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	e78e      	b.n	80085c4 <__sflush_r+0x1c>
 80086a6:	4407      	add	r7, r0
 80086a8:	eba8 0800 	sub.w	r8, r8, r0
 80086ac:	e7e9      	b.n	8008682 <__sflush_r+0xda>
 80086ae:	bf00      	nop
 80086b0:	20400001 	.word	0x20400001

080086b4 <_fflush_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	690b      	ldr	r3, [r1, #16]
 80086b8:	4605      	mov	r5, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	b913      	cbnz	r3, 80086c4 <_fflush_r+0x10>
 80086be:	2500      	movs	r5, #0
 80086c0:	4628      	mov	r0, r5
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	b118      	cbz	r0, 80086ce <_fflush_r+0x1a>
 80086c6:	6983      	ldr	r3, [r0, #24]
 80086c8:	b90b      	cbnz	r3, 80086ce <_fflush_r+0x1a>
 80086ca:	f000 f887 	bl	80087dc <__sinit>
 80086ce:	4b14      	ldr	r3, [pc, #80]	; (8008720 <_fflush_r+0x6c>)
 80086d0:	429c      	cmp	r4, r3
 80086d2:	d11b      	bne.n	800870c <_fflush_r+0x58>
 80086d4:	686c      	ldr	r4, [r5, #4]
 80086d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0ef      	beq.n	80086be <_fflush_r+0xa>
 80086de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086e0:	07d0      	lsls	r0, r2, #31
 80086e2:	d404      	bmi.n	80086ee <_fflush_r+0x3a>
 80086e4:	0599      	lsls	r1, r3, #22
 80086e6:	d402      	bmi.n	80086ee <_fflush_r+0x3a>
 80086e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ea:	f000 f93a 	bl	8008962 <__retarget_lock_acquire_recursive>
 80086ee:	4628      	mov	r0, r5
 80086f0:	4621      	mov	r1, r4
 80086f2:	f7ff ff59 	bl	80085a8 <__sflush_r>
 80086f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086f8:	07da      	lsls	r2, r3, #31
 80086fa:	4605      	mov	r5, r0
 80086fc:	d4e0      	bmi.n	80086c0 <_fflush_r+0xc>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	059b      	lsls	r3, r3, #22
 8008702:	d4dd      	bmi.n	80086c0 <_fflush_r+0xc>
 8008704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008706:	f000 f92d 	bl	8008964 <__retarget_lock_release_recursive>
 800870a:	e7d9      	b.n	80086c0 <_fflush_r+0xc>
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <_fflush_r+0x70>)
 800870e:	429c      	cmp	r4, r3
 8008710:	d101      	bne.n	8008716 <_fflush_r+0x62>
 8008712:	68ac      	ldr	r4, [r5, #8]
 8008714:	e7df      	b.n	80086d6 <_fflush_r+0x22>
 8008716:	4b04      	ldr	r3, [pc, #16]	; (8008728 <_fflush_r+0x74>)
 8008718:	429c      	cmp	r4, r3
 800871a:	bf08      	it	eq
 800871c:	68ec      	ldreq	r4, [r5, #12]
 800871e:	e7da      	b.n	80086d6 <_fflush_r+0x22>
 8008720:	0800b1b4 	.word	0x0800b1b4
 8008724:	0800b1d4 	.word	0x0800b1d4
 8008728:	0800b194 	.word	0x0800b194

0800872c <std>:
 800872c:	2300      	movs	r3, #0
 800872e:	b510      	push	{r4, lr}
 8008730:	4604      	mov	r4, r0
 8008732:	e9c0 3300 	strd	r3, r3, [r0]
 8008736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800873a:	6083      	str	r3, [r0, #8]
 800873c:	8181      	strh	r1, [r0, #12]
 800873e:	6643      	str	r3, [r0, #100]	; 0x64
 8008740:	81c2      	strh	r2, [r0, #14]
 8008742:	6183      	str	r3, [r0, #24]
 8008744:	4619      	mov	r1, r3
 8008746:	2208      	movs	r2, #8
 8008748:	305c      	adds	r0, #92	; 0x5c
 800874a:	f000 f90c 	bl	8008966 <memset>
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <std+0x38>)
 8008750:	6263      	str	r3, [r4, #36]	; 0x24
 8008752:	4b05      	ldr	r3, [pc, #20]	; (8008768 <std+0x3c>)
 8008754:	62a3      	str	r3, [r4, #40]	; 0x28
 8008756:	4b05      	ldr	r3, [pc, #20]	; (800876c <std+0x40>)
 8008758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800875a:	4b05      	ldr	r3, [pc, #20]	; (8008770 <std+0x44>)
 800875c:	6224      	str	r4, [r4, #32]
 800875e:	6323      	str	r3, [r4, #48]	; 0x30
 8008760:	bd10      	pop	{r4, pc}
 8008762:	bf00      	nop
 8008764:	080094dd 	.word	0x080094dd
 8008768:	080094ff 	.word	0x080094ff
 800876c:	08009537 	.word	0x08009537
 8008770:	0800955b 	.word	0x0800955b

08008774 <_cleanup_r>:
 8008774:	4901      	ldr	r1, [pc, #4]	; (800877c <_cleanup_r+0x8>)
 8008776:	f000 b8af 	b.w	80088d8 <_fwalk_reent>
 800877a:	bf00      	nop
 800877c:	080086b5 	.word	0x080086b5

08008780 <__sfmoreglue>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	1e4a      	subs	r2, r1, #1
 8008784:	2568      	movs	r5, #104	; 0x68
 8008786:	4355      	muls	r5, r2
 8008788:	460e      	mov	r6, r1
 800878a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800878e:	f000 f943 	bl	8008a18 <_malloc_r>
 8008792:	4604      	mov	r4, r0
 8008794:	b140      	cbz	r0, 80087a8 <__sfmoreglue+0x28>
 8008796:	2100      	movs	r1, #0
 8008798:	e9c0 1600 	strd	r1, r6, [r0]
 800879c:	300c      	adds	r0, #12
 800879e:	60a0      	str	r0, [r4, #8]
 80087a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087a4:	f000 f8df 	bl	8008966 <memset>
 80087a8:	4620      	mov	r0, r4
 80087aa:	bd70      	pop	{r4, r5, r6, pc}

080087ac <__sfp_lock_acquire>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__sfp_lock_acquire+0x8>)
 80087ae:	f000 b8d8 	b.w	8008962 <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	20004ac4 	.word	0x20004ac4

080087b8 <__sfp_lock_release>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__sfp_lock_release+0x8>)
 80087ba:	f000 b8d3 	b.w	8008964 <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	20004ac4 	.word	0x20004ac4

080087c4 <__sinit_lock_acquire>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__sinit_lock_acquire+0x8>)
 80087c6:	f000 b8cc 	b.w	8008962 <__retarget_lock_acquire_recursive>
 80087ca:	bf00      	nop
 80087cc:	20004abf 	.word	0x20004abf

080087d0 <__sinit_lock_release>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__sinit_lock_release+0x8>)
 80087d2:	f000 b8c7 	b.w	8008964 <__retarget_lock_release_recursive>
 80087d6:	bf00      	nop
 80087d8:	20004abf 	.word	0x20004abf

080087dc <__sinit>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	4604      	mov	r4, r0
 80087e0:	f7ff fff0 	bl	80087c4 <__sinit_lock_acquire>
 80087e4:	69a3      	ldr	r3, [r4, #24]
 80087e6:	b11b      	cbz	r3, 80087f0 <__sinit+0x14>
 80087e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ec:	f7ff bff0 	b.w	80087d0 <__sinit_lock_release>
 80087f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087f4:	6523      	str	r3, [r4, #80]	; 0x50
 80087f6:	4b13      	ldr	r3, [pc, #76]	; (8008844 <__sinit+0x68>)
 80087f8:	4a13      	ldr	r2, [pc, #76]	; (8008848 <__sinit+0x6c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80087fe:	42a3      	cmp	r3, r4
 8008800:	bf04      	itt	eq
 8008802:	2301      	moveq	r3, #1
 8008804:	61a3      	streq	r3, [r4, #24]
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f820 	bl	800884c <__sfp>
 800880c:	6060      	str	r0, [r4, #4]
 800880e:	4620      	mov	r0, r4
 8008810:	f000 f81c 	bl	800884c <__sfp>
 8008814:	60a0      	str	r0, [r4, #8]
 8008816:	4620      	mov	r0, r4
 8008818:	f000 f818 	bl	800884c <__sfp>
 800881c:	2200      	movs	r2, #0
 800881e:	60e0      	str	r0, [r4, #12]
 8008820:	2104      	movs	r1, #4
 8008822:	6860      	ldr	r0, [r4, #4]
 8008824:	f7ff ff82 	bl	800872c <std>
 8008828:	68a0      	ldr	r0, [r4, #8]
 800882a:	2201      	movs	r2, #1
 800882c:	2109      	movs	r1, #9
 800882e:	f7ff ff7d 	bl	800872c <std>
 8008832:	68e0      	ldr	r0, [r4, #12]
 8008834:	2202      	movs	r2, #2
 8008836:	2112      	movs	r1, #18
 8008838:	f7ff ff78 	bl	800872c <std>
 800883c:	2301      	movs	r3, #1
 800883e:	61a3      	str	r3, [r4, #24]
 8008840:	e7d2      	b.n	80087e8 <__sinit+0xc>
 8008842:	bf00      	nop
 8008844:	0800b1f4 	.word	0x0800b1f4
 8008848:	08008775 	.word	0x08008775

0800884c <__sfp>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	4607      	mov	r7, r0
 8008850:	f7ff ffac 	bl	80087ac <__sfp_lock_acquire>
 8008854:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <__sfp+0x84>)
 8008856:	681e      	ldr	r6, [r3, #0]
 8008858:	69b3      	ldr	r3, [r6, #24]
 800885a:	b913      	cbnz	r3, 8008862 <__sfp+0x16>
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff ffbd 	bl	80087dc <__sinit>
 8008862:	3648      	adds	r6, #72	; 0x48
 8008864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008868:	3b01      	subs	r3, #1
 800886a:	d503      	bpl.n	8008874 <__sfp+0x28>
 800886c:	6833      	ldr	r3, [r6, #0]
 800886e:	b30b      	cbz	r3, 80088b4 <__sfp+0x68>
 8008870:	6836      	ldr	r6, [r6, #0]
 8008872:	e7f7      	b.n	8008864 <__sfp+0x18>
 8008874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008878:	b9d5      	cbnz	r5, 80088b0 <__sfp+0x64>
 800887a:	4b16      	ldr	r3, [pc, #88]	; (80088d4 <__sfp+0x88>)
 800887c:	60e3      	str	r3, [r4, #12]
 800887e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008882:	6665      	str	r5, [r4, #100]	; 0x64
 8008884:	f000 f86c 	bl	8008960 <__retarget_lock_init_recursive>
 8008888:	f7ff ff96 	bl	80087b8 <__sfp_lock_release>
 800888c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008894:	6025      	str	r5, [r4, #0]
 8008896:	61a5      	str	r5, [r4, #24]
 8008898:	2208      	movs	r2, #8
 800889a:	4629      	mov	r1, r5
 800889c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088a0:	f000 f861 	bl	8008966 <memset>
 80088a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088ac:	4620      	mov	r0, r4
 80088ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b0:	3468      	adds	r4, #104	; 0x68
 80088b2:	e7d9      	b.n	8008868 <__sfp+0x1c>
 80088b4:	2104      	movs	r1, #4
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7ff ff62 	bl	8008780 <__sfmoreglue>
 80088bc:	4604      	mov	r4, r0
 80088be:	6030      	str	r0, [r6, #0]
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d1d5      	bne.n	8008870 <__sfp+0x24>
 80088c4:	f7ff ff78 	bl	80087b8 <__sfp_lock_release>
 80088c8:	230c      	movs	r3, #12
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	e7ee      	b.n	80088ac <__sfp+0x60>
 80088ce:	bf00      	nop
 80088d0:	0800b1f4 	.word	0x0800b1f4
 80088d4:	ffff0001 	.word	0xffff0001

080088d8 <_fwalk_reent>:
 80088d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088dc:	4606      	mov	r6, r0
 80088de:	4688      	mov	r8, r1
 80088e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088e4:	2700      	movs	r7, #0
 80088e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088ea:	f1b9 0901 	subs.w	r9, r9, #1
 80088ee:	d505      	bpl.n	80088fc <_fwalk_reent+0x24>
 80088f0:	6824      	ldr	r4, [r4, #0]
 80088f2:	2c00      	cmp	r4, #0
 80088f4:	d1f7      	bne.n	80088e6 <_fwalk_reent+0xe>
 80088f6:	4638      	mov	r0, r7
 80088f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fc:	89ab      	ldrh	r3, [r5, #12]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d907      	bls.n	8008912 <_fwalk_reent+0x3a>
 8008902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008906:	3301      	adds	r3, #1
 8008908:	d003      	beq.n	8008912 <_fwalk_reent+0x3a>
 800890a:	4629      	mov	r1, r5
 800890c:	4630      	mov	r0, r6
 800890e:	47c0      	blx	r8
 8008910:	4307      	orrs	r7, r0
 8008912:	3568      	adds	r5, #104	; 0x68
 8008914:	e7e9      	b.n	80088ea <_fwalk_reent+0x12>
	...

08008918 <__libc_init_array>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4d0d      	ldr	r5, [pc, #52]	; (8008950 <__libc_init_array+0x38>)
 800891c:	4c0d      	ldr	r4, [pc, #52]	; (8008954 <__libc_init_array+0x3c>)
 800891e:	1b64      	subs	r4, r4, r5
 8008920:	10a4      	asrs	r4, r4, #2
 8008922:	2600      	movs	r6, #0
 8008924:	42a6      	cmp	r6, r4
 8008926:	d109      	bne.n	800893c <__libc_init_array+0x24>
 8008928:	4d0b      	ldr	r5, [pc, #44]	; (8008958 <__libc_init_array+0x40>)
 800892a:	4c0c      	ldr	r4, [pc, #48]	; (800895c <__libc_init_array+0x44>)
 800892c:	f002 fbc4 	bl	800b0b8 <_init>
 8008930:	1b64      	subs	r4, r4, r5
 8008932:	10a4      	asrs	r4, r4, #2
 8008934:	2600      	movs	r6, #0
 8008936:	42a6      	cmp	r6, r4
 8008938:	d105      	bne.n	8008946 <__libc_init_array+0x2e>
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008940:	4798      	blx	r3
 8008942:	3601      	adds	r6, #1
 8008944:	e7ee      	b.n	8008924 <__libc_init_array+0xc>
 8008946:	f855 3b04 	ldr.w	r3, [r5], #4
 800894a:	4798      	blx	r3
 800894c:	3601      	adds	r6, #1
 800894e:	e7f2      	b.n	8008936 <__libc_init_array+0x1e>
 8008950:	0800b57c 	.word	0x0800b57c
 8008954:	0800b57c 	.word	0x0800b57c
 8008958:	0800b57c 	.word	0x0800b57c
 800895c:	0800b580 	.word	0x0800b580

08008960 <__retarget_lock_init_recursive>:
 8008960:	4770      	bx	lr

08008962 <__retarget_lock_acquire_recursive>:
 8008962:	4770      	bx	lr

08008964 <__retarget_lock_release_recursive>:
 8008964:	4770      	bx	lr

08008966 <memset>:
 8008966:	4402      	add	r2, r0
 8008968:	4603      	mov	r3, r0
 800896a:	4293      	cmp	r3, r2
 800896c:	d100      	bne.n	8008970 <memset+0xa>
 800896e:	4770      	bx	lr
 8008970:	f803 1b01 	strb.w	r1, [r3], #1
 8008974:	e7f9      	b.n	800896a <memset+0x4>
	...

08008978 <_free_r>:
 8008978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800897a:	2900      	cmp	r1, #0
 800897c:	d048      	beq.n	8008a10 <_free_r+0x98>
 800897e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008982:	9001      	str	r0, [sp, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	f1a1 0404 	sub.w	r4, r1, #4
 800898a:	bfb8      	it	lt
 800898c:	18e4      	addlt	r4, r4, r3
 800898e:	f001 fdd3 	bl	800a538 <__malloc_lock>
 8008992:	4a20      	ldr	r2, [pc, #128]	; (8008a14 <_free_r+0x9c>)
 8008994:	9801      	ldr	r0, [sp, #4]
 8008996:	6813      	ldr	r3, [r2, #0]
 8008998:	4615      	mov	r5, r2
 800899a:	b933      	cbnz	r3, 80089aa <_free_r+0x32>
 800899c:	6063      	str	r3, [r4, #4]
 800899e:	6014      	str	r4, [r2, #0]
 80089a0:	b003      	add	sp, #12
 80089a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089a6:	f001 bdcd 	b.w	800a544 <__malloc_unlock>
 80089aa:	42a3      	cmp	r3, r4
 80089ac:	d90b      	bls.n	80089c6 <_free_r+0x4e>
 80089ae:	6821      	ldr	r1, [r4, #0]
 80089b0:	1862      	adds	r2, r4, r1
 80089b2:	4293      	cmp	r3, r2
 80089b4:	bf04      	itt	eq
 80089b6:	681a      	ldreq	r2, [r3, #0]
 80089b8:	685b      	ldreq	r3, [r3, #4]
 80089ba:	6063      	str	r3, [r4, #4]
 80089bc:	bf04      	itt	eq
 80089be:	1852      	addeq	r2, r2, r1
 80089c0:	6022      	streq	r2, [r4, #0]
 80089c2:	602c      	str	r4, [r5, #0]
 80089c4:	e7ec      	b.n	80089a0 <_free_r+0x28>
 80089c6:	461a      	mov	r2, r3
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	b10b      	cbz	r3, 80089d0 <_free_r+0x58>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d9fa      	bls.n	80089c6 <_free_r+0x4e>
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	1855      	adds	r5, r2, r1
 80089d4:	42a5      	cmp	r5, r4
 80089d6:	d10b      	bne.n	80089f0 <_free_r+0x78>
 80089d8:	6824      	ldr	r4, [r4, #0]
 80089da:	4421      	add	r1, r4
 80089dc:	1854      	adds	r4, r2, r1
 80089de:	42a3      	cmp	r3, r4
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	d1dd      	bne.n	80089a0 <_free_r+0x28>
 80089e4:	681c      	ldr	r4, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	6053      	str	r3, [r2, #4]
 80089ea:	4421      	add	r1, r4
 80089ec:	6011      	str	r1, [r2, #0]
 80089ee:	e7d7      	b.n	80089a0 <_free_r+0x28>
 80089f0:	d902      	bls.n	80089f8 <_free_r+0x80>
 80089f2:	230c      	movs	r3, #12
 80089f4:	6003      	str	r3, [r0, #0]
 80089f6:	e7d3      	b.n	80089a0 <_free_r+0x28>
 80089f8:	6825      	ldr	r5, [r4, #0]
 80089fa:	1961      	adds	r1, r4, r5
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf04      	itt	eq
 8008a00:	6819      	ldreq	r1, [r3, #0]
 8008a02:	685b      	ldreq	r3, [r3, #4]
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	bf04      	itt	eq
 8008a08:	1949      	addeq	r1, r1, r5
 8008a0a:	6021      	streq	r1, [r4, #0]
 8008a0c:	6054      	str	r4, [r2, #4]
 8008a0e:	e7c7      	b.n	80089a0 <_free_r+0x28>
 8008a10:	b003      	add	sp, #12
 8008a12:	bd30      	pop	{r4, r5, pc}
 8008a14:	2000045c 	.word	0x2000045c

08008a18 <_malloc_r>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	1ccd      	adds	r5, r1, #3
 8008a1c:	f025 0503 	bic.w	r5, r5, #3
 8008a20:	3508      	adds	r5, #8
 8008a22:	2d0c      	cmp	r5, #12
 8008a24:	bf38      	it	cc
 8008a26:	250c      	movcc	r5, #12
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	db01      	blt.n	8008a32 <_malloc_r+0x1a>
 8008a2e:	42a9      	cmp	r1, r5
 8008a30:	d903      	bls.n	8008a3a <_malloc_r+0x22>
 8008a32:	230c      	movs	r3, #12
 8008a34:	6033      	str	r3, [r6, #0]
 8008a36:	2000      	movs	r0, #0
 8008a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a3a:	f001 fd7d 	bl	800a538 <__malloc_lock>
 8008a3e:	4921      	ldr	r1, [pc, #132]	; (8008ac4 <_malloc_r+0xac>)
 8008a40:	680a      	ldr	r2, [r1, #0]
 8008a42:	4614      	mov	r4, r2
 8008a44:	b99c      	cbnz	r4, 8008a6e <_malloc_r+0x56>
 8008a46:	4f20      	ldr	r7, [pc, #128]	; (8008ac8 <_malloc_r+0xb0>)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	b923      	cbnz	r3, 8008a56 <_malloc_r+0x3e>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f000 fd34 	bl	80094bc <_sbrk_r>
 8008a54:	6038      	str	r0, [r7, #0]
 8008a56:	4629      	mov	r1, r5
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f000 fd2f 	bl	80094bc <_sbrk_r>
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	d123      	bne.n	8008aaa <_malloc_r+0x92>
 8008a62:	230c      	movs	r3, #12
 8008a64:	6033      	str	r3, [r6, #0]
 8008a66:	4630      	mov	r0, r6
 8008a68:	f001 fd6c 	bl	800a544 <__malloc_unlock>
 8008a6c:	e7e3      	b.n	8008a36 <_malloc_r+0x1e>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	1b5b      	subs	r3, r3, r5
 8008a72:	d417      	bmi.n	8008aa4 <_malloc_r+0x8c>
 8008a74:	2b0b      	cmp	r3, #11
 8008a76:	d903      	bls.n	8008a80 <_malloc_r+0x68>
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	441c      	add	r4, r3
 8008a7c:	6025      	str	r5, [r4, #0]
 8008a7e:	e004      	b.n	8008a8a <_malloc_r+0x72>
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	42a2      	cmp	r2, r4
 8008a84:	bf0c      	ite	eq
 8008a86:	600b      	streq	r3, [r1, #0]
 8008a88:	6053      	strne	r3, [r2, #4]
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f001 fd5a 	bl	800a544 <__malloc_unlock>
 8008a90:	f104 000b 	add.w	r0, r4, #11
 8008a94:	1d23      	adds	r3, r4, #4
 8008a96:	f020 0007 	bic.w	r0, r0, #7
 8008a9a:	1ac2      	subs	r2, r0, r3
 8008a9c:	d0cc      	beq.n	8008a38 <_malloc_r+0x20>
 8008a9e:	1a1b      	subs	r3, r3, r0
 8008aa0:	50a3      	str	r3, [r4, r2]
 8008aa2:	e7c9      	b.n	8008a38 <_malloc_r+0x20>
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	6864      	ldr	r4, [r4, #4]
 8008aa8:	e7cc      	b.n	8008a44 <_malloc_r+0x2c>
 8008aaa:	1cc4      	adds	r4, r0, #3
 8008aac:	f024 0403 	bic.w	r4, r4, #3
 8008ab0:	42a0      	cmp	r0, r4
 8008ab2:	d0e3      	beq.n	8008a7c <_malloc_r+0x64>
 8008ab4:	1a21      	subs	r1, r4, r0
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 fd00 	bl	80094bc <_sbrk_r>
 8008abc:	3001      	adds	r0, #1
 8008abe:	d1dd      	bne.n	8008a7c <_malloc_r+0x64>
 8008ac0:	e7cf      	b.n	8008a62 <_malloc_r+0x4a>
 8008ac2:	bf00      	nop
 8008ac4:	2000045c 	.word	0x2000045c
 8008ac8:	20000460 	.word	0x20000460

08008acc <__cvt>:
 8008acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	ec55 4b10 	vmov	r4, r5, d0
 8008ad4:	2d00      	cmp	r5, #0
 8008ad6:	460e      	mov	r6, r1
 8008ad8:	4619      	mov	r1, r3
 8008ada:	462b      	mov	r3, r5
 8008adc:	bfbb      	ittet	lt
 8008ade:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ae2:	461d      	movlt	r5, r3
 8008ae4:	2300      	movge	r3, #0
 8008ae6:	232d      	movlt	r3, #45	; 0x2d
 8008ae8:	700b      	strb	r3, [r1, #0]
 8008aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008af0:	4691      	mov	r9, r2
 8008af2:	f023 0820 	bic.w	r8, r3, #32
 8008af6:	bfbc      	itt	lt
 8008af8:	4622      	movlt	r2, r4
 8008afa:	4614      	movlt	r4, r2
 8008afc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b00:	d005      	beq.n	8008b0e <__cvt+0x42>
 8008b02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b06:	d100      	bne.n	8008b0a <__cvt+0x3e>
 8008b08:	3601      	adds	r6, #1
 8008b0a:	2102      	movs	r1, #2
 8008b0c:	e000      	b.n	8008b10 <__cvt+0x44>
 8008b0e:	2103      	movs	r1, #3
 8008b10:	ab03      	add	r3, sp, #12
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	ab02      	add	r3, sp, #8
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	ec45 4b10 	vmov	d0, r4, r5
 8008b1c:	4653      	mov	r3, sl
 8008b1e:	4632      	mov	r2, r6
 8008b20:	f000 fe8e 	bl	8009840 <_dtoa_r>
 8008b24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b28:	4607      	mov	r7, r0
 8008b2a:	d102      	bne.n	8008b32 <__cvt+0x66>
 8008b2c:	f019 0f01 	tst.w	r9, #1
 8008b30:	d022      	beq.n	8008b78 <__cvt+0xac>
 8008b32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b36:	eb07 0906 	add.w	r9, r7, r6
 8008b3a:	d110      	bne.n	8008b5e <__cvt+0x92>
 8008b3c:	783b      	ldrb	r3, [r7, #0]
 8008b3e:	2b30      	cmp	r3, #48	; 0x30
 8008b40:	d10a      	bne.n	8008b58 <__cvt+0x8c>
 8008b42:	2200      	movs	r2, #0
 8008b44:	2300      	movs	r3, #0
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 ffdd 	bl	8000b08 <__aeabi_dcmpeq>
 8008b4e:	b918      	cbnz	r0, 8008b58 <__cvt+0x8c>
 8008b50:	f1c6 0601 	rsb	r6, r6, #1
 8008b54:	f8ca 6000 	str.w	r6, [sl]
 8008b58:	f8da 3000 	ldr.w	r3, [sl]
 8008b5c:	4499      	add	r9, r3
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2300      	movs	r3, #0
 8008b62:	4620      	mov	r0, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	f7f7 ffcf 	bl	8000b08 <__aeabi_dcmpeq>
 8008b6a:	b108      	cbz	r0, 8008b70 <__cvt+0xa4>
 8008b6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b70:	2230      	movs	r2, #48	; 0x30
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	454b      	cmp	r3, r9
 8008b76:	d307      	bcc.n	8008b88 <__cvt+0xbc>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b7c:	1bdb      	subs	r3, r3, r7
 8008b7e:	4638      	mov	r0, r7
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	b004      	add	sp, #16
 8008b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b88:	1c59      	adds	r1, r3, #1
 8008b8a:	9103      	str	r1, [sp, #12]
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	e7f0      	b.n	8008b72 <__cvt+0xa6>

08008b90 <__exponent>:
 8008b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b92:	4603      	mov	r3, r0
 8008b94:	2900      	cmp	r1, #0
 8008b96:	bfb8      	it	lt
 8008b98:	4249      	neglt	r1, r1
 8008b9a:	f803 2b02 	strb.w	r2, [r3], #2
 8008b9e:	bfb4      	ite	lt
 8008ba0:	222d      	movlt	r2, #45	; 0x2d
 8008ba2:	222b      	movge	r2, #43	; 0x2b
 8008ba4:	2909      	cmp	r1, #9
 8008ba6:	7042      	strb	r2, [r0, #1]
 8008ba8:	dd2a      	ble.n	8008c00 <__exponent+0x70>
 8008baa:	f10d 0407 	add.w	r4, sp, #7
 8008bae:	46a4      	mov	ip, r4
 8008bb0:	270a      	movs	r7, #10
 8008bb2:	46a6      	mov	lr, r4
 8008bb4:	460a      	mov	r2, r1
 8008bb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008bba:	fb07 1516 	mls	r5, r7, r6, r1
 8008bbe:	3530      	adds	r5, #48	; 0x30
 8008bc0:	2a63      	cmp	r2, #99	; 0x63
 8008bc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008bc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008bca:	4631      	mov	r1, r6
 8008bcc:	dcf1      	bgt.n	8008bb2 <__exponent+0x22>
 8008bce:	3130      	adds	r1, #48	; 0x30
 8008bd0:	f1ae 0502 	sub.w	r5, lr, #2
 8008bd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008bd8:	1c44      	adds	r4, r0, #1
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4561      	cmp	r1, ip
 8008bde:	d30a      	bcc.n	8008bf6 <__exponent+0x66>
 8008be0:	f10d 0209 	add.w	r2, sp, #9
 8008be4:	eba2 020e 	sub.w	r2, r2, lr
 8008be8:	4565      	cmp	r5, ip
 8008bea:	bf88      	it	hi
 8008bec:	2200      	movhi	r2, #0
 8008bee:	4413      	add	r3, r2
 8008bf0:	1a18      	subs	r0, r3, r0
 8008bf2:	b003      	add	sp, #12
 8008bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008bfe:	e7ed      	b.n	8008bdc <__exponent+0x4c>
 8008c00:	2330      	movs	r3, #48	; 0x30
 8008c02:	3130      	adds	r1, #48	; 0x30
 8008c04:	7083      	strb	r3, [r0, #2]
 8008c06:	70c1      	strb	r1, [r0, #3]
 8008c08:	1d03      	adds	r3, r0, #4
 8008c0a:	e7f1      	b.n	8008bf0 <__exponent+0x60>

08008c0c <_printf_float>:
 8008c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	ed2d 8b02 	vpush	{d8}
 8008c14:	b08d      	sub	sp, #52	; 0x34
 8008c16:	460c      	mov	r4, r1
 8008c18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	461f      	mov	r7, r3
 8008c20:	4605      	mov	r5, r0
 8008c22:	f001 fbf9 	bl	800a418 <_localeconv_r>
 8008c26:	f8d0 a000 	ldr.w	sl, [r0]
 8008c2a:	4650      	mov	r0, sl
 8008c2c:	f7f7 faf0 	bl	8000210 <strlen>
 8008c30:	2300      	movs	r3, #0
 8008c32:	930a      	str	r3, [sp, #40]	; 0x28
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	9305      	str	r3, [sp, #20]
 8008c38:	f8d8 3000 	ldr.w	r3, [r8]
 8008c3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c40:	3307      	adds	r3, #7
 8008c42:	f023 0307 	bic.w	r3, r3, #7
 8008c46:	f103 0208 	add.w	r2, r3, #8
 8008c4a:	f8c8 2000 	str.w	r2, [r8]
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c64:	ee08 0a10 	vmov	s16, r0
 8008c68:	4b9f      	ldr	r3, [pc, #636]	; (8008ee8 <_printf_float+0x2dc>)
 8008c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c72:	f7f7 ff7b 	bl	8000b6c <__aeabi_dcmpun>
 8008c76:	bb88      	cbnz	r0, 8008cdc <_printf_float+0xd0>
 8008c78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c7c:	4b9a      	ldr	r3, [pc, #616]	; (8008ee8 <_printf_float+0x2dc>)
 8008c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c82:	f7f7 ff55 	bl	8000b30 <__aeabi_dcmple>
 8008c86:	bb48      	cbnz	r0, 8008cdc <_printf_float+0xd0>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4640      	mov	r0, r8
 8008c8e:	4649      	mov	r1, r9
 8008c90:	f7f7 ff44 	bl	8000b1c <__aeabi_dcmplt>
 8008c94:	b110      	cbz	r0, 8008c9c <_printf_float+0x90>
 8008c96:	232d      	movs	r3, #45	; 0x2d
 8008c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c9c:	4b93      	ldr	r3, [pc, #588]	; (8008eec <_printf_float+0x2e0>)
 8008c9e:	4894      	ldr	r0, [pc, #592]	; (8008ef0 <_printf_float+0x2e4>)
 8008ca0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ca4:	bf94      	ite	ls
 8008ca6:	4698      	movls	r8, r3
 8008ca8:	4680      	movhi	r8, r0
 8008caa:	2303      	movs	r3, #3
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	9b05      	ldr	r3, [sp, #20]
 8008cb0:	f023 0204 	bic.w	r2, r3, #4
 8008cb4:	6022      	str	r2, [r4, #0]
 8008cb6:	f04f 0900 	mov.w	r9, #0
 8008cba:	9700      	str	r7, [sp, #0]
 8008cbc:	4633      	mov	r3, r6
 8008cbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f000 f9d8 	bl	8009078 <_printf_common>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f040 8090 	bne.w	8008dee <_printf_float+0x1e2>
 8008cce:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd2:	b00d      	add	sp, #52	; 0x34
 8008cd4:	ecbd 8b02 	vpop	{d8}
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cdc:	4642      	mov	r2, r8
 8008cde:	464b      	mov	r3, r9
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	f7f7 ff42 	bl	8000b6c <__aeabi_dcmpun>
 8008ce8:	b140      	cbz	r0, 8008cfc <_printf_float+0xf0>
 8008cea:	464b      	mov	r3, r9
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	bfbc      	itt	lt
 8008cf0:	232d      	movlt	r3, #45	; 0x2d
 8008cf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cf6:	487f      	ldr	r0, [pc, #508]	; (8008ef4 <_printf_float+0x2e8>)
 8008cf8:	4b7f      	ldr	r3, [pc, #508]	; (8008ef8 <_printf_float+0x2ec>)
 8008cfa:	e7d1      	b.n	8008ca0 <_printf_float+0x94>
 8008cfc:	6863      	ldr	r3, [r4, #4]
 8008cfe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d02:	9206      	str	r2, [sp, #24]
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	d13f      	bne.n	8008d88 <_printf_float+0x17c>
 8008d08:	2306      	movs	r3, #6
 8008d0a:	6063      	str	r3, [r4, #4]
 8008d0c:	9b05      	ldr	r3, [sp, #20]
 8008d0e:	6861      	ldr	r1, [r4, #4]
 8008d10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d14:	2300      	movs	r3, #0
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	ab0a      	add	r3, sp, #40	; 0x28
 8008d1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d1e:	ab09      	add	r3, sp, #36	; 0x24
 8008d20:	ec49 8b10 	vmov	d0, r8, r9
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	6022      	str	r2, [r4, #0]
 8008d28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f7ff fecd 	bl	8008acc <__cvt>
 8008d32:	9b06      	ldr	r3, [sp, #24]
 8008d34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d36:	2b47      	cmp	r3, #71	; 0x47
 8008d38:	4680      	mov	r8, r0
 8008d3a:	d108      	bne.n	8008d4e <_printf_float+0x142>
 8008d3c:	1cc8      	adds	r0, r1, #3
 8008d3e:	db02      	blt.n	8008d46 <_printf_float+0x13a>
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	4299      	cmp	r1, r3
 8008d44:	dd41      	ble.n	8008dca <_printf_float+0x1be>
 8008d46:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d4a:	fa5f fb8b 	uxtb.w	fp, fp
 8008d4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d52:	d820      	bhi.n	8008d96 <_printf_float+0x18a>
 8008d54:	3901      	subs	r1, #1
 8008d56:	465a      	mov	r2, fp
 8008d58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d5c:	9109      	str	r1, [sp, #36]	; 0x24
 8008d5e:	f7ff ff17 	bl	8008b90 <__exponent>
 8008d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d64:	1813      	adds	r3, r2, r0
 8008d66:	2a01      	cmp	r2, #1
 8008d68:	4681      	mov	r9, r0
 8008d6a:	6123      	str	r3, [r4, #16]
 8008d6c:	dc02      	bgt.n	8008d74 <_printf_float+0x168>
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	07d2      	lsls	r2, r2, #31
 8008d72:	d501      	bpl.n	8008d78 <_printf_float+0x16c>
 8008d74:	3301      	adds	r3, #1
 8008d76:	6123      	str	r3, [r4, #16]
 8008d78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d09c      	beq.n	8008cba <_printf_float+0xae>
 8008d80:	232d      	movs	r3, #45	; 0x2d
 8008d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d86:	e798      	b.n	8008cba <_printf_float+0xae>
 8008d88:	9a06      	ldr	r2, [sp, #24]
 8008d8a:	2a47      	cmp	r2, #71	; 0x47
 8008d8c:	d1be      	bne.n	8008d0c <_printf_float+0x100>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1bc      	bne.n	8008d0c <_printf_float+0x100>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e7b9      	b.n	8008d0a <_printf_float+0xfe>
 8008d96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d9a:	d118      	bne.n	8008dce <_printf_float+0x1c2>
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	6863      	ldr	r3, [r4, #4]
 8008da0:	dd0b      	ble.n	8008dba <_printf_float+0x1ae>
 8008da2:	6121      	str	r1, [r4, #16]
 8008da4:	b913      	cbnz	r3, 8008dac <_printf_float+0x1a0>
 8008da6:	6822      	ldr	r2, [r4, #0]
 8008da8:	07d0      	lsls	r0, r2, #31
 8008daa:	d502      	bpl.n	8008db2 <_printf_float+0x1a6>
 8008dac:	3301      	adds	r3, #1
 8008dae:	440b      	add	r3, r1
 8008db0:	6123      	str	r3, [r4, #16]
 8008db2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008db4:	f04f 0900 	mov.w	r9, #0
 8008db8:	e7de      	b.n	8008d78 <_printf_float+0x16c>
 8008dba:	b913      	cbnz	r3, 8008dc2 <_printf_float+0x1b6>
 8008dbc:	6822      	ldr	r2, [r4, #0]
 8008dbe:	07d2      	lsls	r2, r2, #31
 8008dc0:	d501      	bpl.n	8008dc6 <_printf_float+0x1ba>
 8008dc2:	3302      	adds	r3, #2
 8008dc4:	e7f4      	b.n	8008db0 <_printf_float+0x1a4>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e7f2      	b.n	8008db0 <_printf_float+0x1a4>
 8008dca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	db05      	blt.n	8008de0 <_printf_float+0x1d4>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	6121      	str	r1, [r4, #16]
 8008dd8:	07d8      	lsls	r0, r3, #31
 8008dda:	d5ea      	bpl.n	8008db2 <_printf_float+0x1a6>
 8008ddc:	1c4b      	adds	r3, r1, #1
 8008dde:	e7e7      	b.n	8008db0 <_printf_float+0x1a4>
 8008de0:	2900      	cmp	r1, #0
 8008de2:	bfd4      	ite	le
 8008de4:	f1c1 0202 	rsble	r2, r1, #2
 8008de8:	2201      	movgt	r2, #1
 8008dea:	4413      	add	r3, r2
 8008dec:	e7e0      	b.n	8008db0 <_printf_float+0x1a4>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	055a      	lsls	r2, r3, #21
 8008df2:	d407      	bmi.n	8008e04 <_printf_float+0x1f8>
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	4642      	mov	r2, r8
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	47b8      	blx	r7
 8008dfe:	3001      	adds	r0, #1
 8008e00:	d12c      	bne.n	8008e5c <_printf_float+0x250>
 8008e02:	e764      	b.n	8008cce <_printf_float+0xc2>
 8008e04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e08:	f240 80e0 	bls.w	8008fcc <_printf_float+0x3c0>
 8008e0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e10:	2200      	movs	r2, #0
 8008e12:	2300      	movs	r3, #0
 8008e14:	f7f7 fe78 	bl	8000b08 <__aeabi_dcmpeq>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d034      	beq.n	8008e86 <_printf_float+0x27a>
 8008e1c:	4a37      	ldr	r2, [pc, #220]	; (8008efc <_printf_float+0x2f0>)
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	47b8      	blx	r7
 8008e26:	3001      	adds	r0, #1
 8008e28:	f43f af51 	beq.w	8008cce <_printf_float+0xc2>
 8008e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e30:	429a      	cmp	r2, r3
 8008e32:	db02      	blt.n	8008e3a <_printf_float+0x22e>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	07d8      	lsls	r0, r3, #31
 8008e38:	d510      	bpl.n	8008e5c <_printf_float+0x250>
 8008e3a:	ee18 3a10 	vmov	r3, s16
 8008e3e:	4652      	mov	r2, sl
 8008e40:	4631      	mov	r1, r6
 8008e42:	4628      	mov	r0, r5
 8008e44:	47b8      	blx	r7
 8008e46:	3001      	adds	r0, #1
 8008e48:	f43f af41 	beq.w	8008cce <_printf_float+0xc2>
 8008e4c:	f04f 0800 	mov.w	r8, #0
 8008e50:	f104 091a 	add.w	r9, r4, #26
 8008e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e56:	3b01      	subs	r3, #1
 8008e58:	4543      	cmp	r3, r8
 8008e5a:	dc09      	bgt.n	8008e70 <_printf_float+0x264>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	079b      	lsls	r3, r3, #30
 8008e60:	f100 8105 	bmi.w	800906e <_printf_float+0x462>
 8008e64:	68e0      	ldr	r0, [r4, #12]
 8008e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e68:	4298      	cmp	r0, r3
 8008e6a:	bfb8      	it	lt
 8008e6c:	4618      	movlt	r0, r3
 8008e6e:	e730      	b.n	8008cd2 <_printf_float+0xc6>
 8008e70:	2301      	movs	r3, #1
 8008e72:	464a      	mov	r2, r9
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f43f af27 	beq.w	8008cce <_printf_float+0xc2>
 8008e80:	f108 0801 	add.w	r8, r8, #1
 8008e84:	e7e6      	b.n	8008e54 <_printf_float+0x248>
 8008e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dc39      	bgt.n	8008f00 <_printf_float+0x2f4>
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <_printf_float+0x2f0>)
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4631      	mov	r1, r6
 8008e92:	4628      	mov	r0, r5
 8008e94:	47b8      	blx	r7
 8008e96:	3001      	adds	r0, #1
 8008e98:	f43f af19 	beq.w	8008cce <_printf_float+0xc2>
 8008e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	d102      	bne.n	8008eaa <_printf_float+0x29e>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	07d9      	lsls	r1, r3, #31
 8008ea8:	d5d8      	bpl.n	8008e5c <_printf_float+0x250>
 8008eaa:	ee18 3a10 	vmov	r3, s16
 8008eae:	4652      	mov	r2, sl
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	f43f af09 	beq.w	8008cce <_printf_float+0xc2>
 8008ebc:	f04f 0900 	mov.w	r9, #0
 8008ec0:	f104 0a1a 	add.w	sl, r4, #26
 8008ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec6:	425b      	negs	r3, r3
 8008ec8:	454b      	cmp	r3, r9
 8008eca:	dc01      	bgt.n	8008ed0 <_printf_float+0x2c4>
 8008ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ece:	e792      	b.n	8008df6 <_printf_float+0x1ea>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	4652      	mov	r2, sl
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	f43f aef7 	beq.w	8008cce <_printf_float+0xc2>
 8008ee0:	f109 0901 	add.w	r9, r9, #1
 8008ee4:	e7ee      	b.n	8008ec4 <_printf_float+0x2b8>
 8008ee6:	bf00      	nop
 8008ee8:	7fefffff 	.word	0x7fefffff
 8008eec:	0800b1f8 	.word	0x0800b1f8
 8008ef0:	0800b1fc 	.word	0x0800b1fc
 8008ef4:	0800b204 	.word	0x0800b204
 8008ef8:	0800b200 	.word	0x0800b200
 8008efc:	0800b208 	.word	0x0800b208
 8008f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f04:	429a      	cmp	r2, r3
 8008f06:	bfa8      	it	ge
 8008f08:	461a      	movge	r2, r3
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	4691      	mov	r9, r2
 8008f0e:	dc37      	bgt.n	8008f80 <_printf_float+0x374>
 8008f10:	f04f 0b00 	mov.w	fp, #0
 8008f14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f18:	f104 021a 	add.w	r2, r4, #26
 8008f1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f1e:	9305      	str	r3, [sp, #20]
 8008f20:	eba3 0309 	sub.w	r3, r3, r9
 8008f24:	455b      	cmp	r3, fp
 8008f26:	dc33      	bgt.n	8008f90 <_printf_float+0x384>
 8008f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	db3b      	blt.n	8008fa8 <_printf_float+0x39c>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	07da      	lsls	r2, r3, #31
 8008f34:	d438      	bmi.n	8008fa8 <_printf_float+0x39c>
 8008f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f38:	9b05      	ldr	r3, [sp, #20]
 8008f3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	eba2 0901 	sub.w	r9, r2, r1
 8008f42:	4599      	cmp	r9, r3
 8008f44:	bfa8      	it	ge
 8008f46:	4699      	movge	r9, r3
 8008f48:	f1b9 0f00 	cmp.w	r9, #0
 8008f4c:	dc35      	bgt.n	8008fba <_printf_float+0x3ae>
 8008f4e:	f04f 0800 	mov.w	r8, #0
 8008f52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f56:	f104 0a1a 	add.w	sl, r4, #26
 8008f5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f5e:	1a9b      	subs	r3, r3, r2
 8008f60:	eba3 0309 	sub.w	r3, r3, r9
 8008f64:	4543      	cmp	r3, r8
 8008f66:	f77f af79 	ble.w	8008e5c <_printf_float+0x250>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4652      	mov	r2, sl
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b8      	blx	r7
 8008f74:	3001      	adds	r0, #1
 8008f76:	f43f aeaa 	beq.w	8008cce <_printf_float+0xc2>
 8008f7a:	f108 0801 	add.w	r8, r8, #1
 8008f7e:	e7ec      	b.n	8008f5a <_printf_float+0x34e>
 8008f80:	4613      	mov	r3, r2
 8008f82:	4631      	mov	r1, r6
 8008f84:	4642      	mov	r2, r8
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b8      	blx	r7
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d1c0      	bne.n	8008f10 <_printf_float+0x304>
 8008f8e:	e69e      	b.n	8008cce <_printf_float+0xc2>
 8008f90:	2301      	movs	r3, #1
 8008f92:	4631      	mov	r1, r6
 8008f94:	4628      	mov	r0, r5
 8008f96:	9205      	str	r2, [sp, #20]
 8008f98:	47b8      	blx	r7
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	f43f ae97 	beq.w	8008cce <_printf_float+0xc2>
 8008fa0:	9a05      	ldr	r2, [sp, #20]
 8008fa2:	f10b 0b01 	add.w	fp, fp, #1
 8008fa6:	e7b9      	b.n	8008f1c <_printf_float+0x310>
 8008fa8:	ee18 3a10 	vmov	r3, s16
 8008fac:	4652      	mov	r2, sl
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b8      	blx	r7
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d1be      	bne.n	8008f36 <_printf_float+0x32a>
 8008fb8:	e689      	b.n	8008cce <_printf_float+0xc2>
 8008fba:	9a05      	ldr	r2, [sp, #20]
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	4442      	add	r2, r8
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	47b8      	blx	r7
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d1c1      	bne.n	8008f4e <_printf_float+0x342>
 8008fca:	e680      	b.n	8008cce <_printf_float+0xc2>
 8008fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fce:	2a01      	cmp	r2, #1
 8008fd0:	dc01      	bgt.n	8008fd6 <_printf_float+0x3ca>
 8008fd2:	07db      	lsls	r3, r3, #31
 8008fd4:	d538      	bpl.n	8009048 <_printf_float+0x43c>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4642      	mov	r2, r8
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b8      	blx	r7
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	f43f ae74 	beq.w	8008cce <_printf_float+0xc2>
 8008fe6:	ee18 3a10 	vmov	r3, s16
 8008fea:	4652      	mov	r2, sl
 8008fec:	4631      	mov	r1, r6
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b8      	blx	r7
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	f43f ae6b 	beq.w	8008cce <_printf_float+0xc2>
 8008ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2300      	movs	r3, #0
 8009000:	f7f7 fd82 	bl	8000b08 <__aeabi_dcmpeq>
 8009004:	b9d8      	cbnz	r0, 800903e <_printf_float+0x432>
 8009006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009008:	f108 0201 	add.w	r2, r8, #1
 800900c:	3b01      	subs	r3, #1
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	47b8      	blx	r7
 8009014:	3001      	adds	r0, #1
 8009016:	d10e      	bne.n	8009036 <_printf_float+0x42a>
 8009018:	e659      	b.n	8008cce <_printf_float+0xc2>
 800901a:	2301      	movs	r3, #1
 800901c:	4652      	mov	r2, sl
 800901e:	4631      	mov	r1, r6
 8009020:	4628      	mov	r0, r5
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	f43f ae52 	beq.w	8008cce <_printf_float+0xc2>
 800902a:	f108 0801 	add.w	r8, r8, #1
 800902e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009030:	3b01      	subs	r3, #1
 8009032:	4543      	cmp	r3, r8
 8009034:	dcf1      	bgt.n	800901a <_printf_float+0x40e>
 8009036:	464b      	mov	r3, r9
 8009038:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800903c:	e6dc      	b.n	8008df8 <_printf_float+0x1ec>
 800903e:	f04f 0800 	mov.w	r8, #0
 8009042:	f104 0a1a 	add.w	sl, r4, #26
 8009046:	e7f2      	b.n	800902e <_printf_float+0x422>
 8009048:	2301      	movs	r3, #1
 800904a:	4642      	mov	r2, r8
 800904c:	e7df      	b.n	800900e <_printf_float+0x402>
 800904e:	2301      	movs	r3, #1
 8009050:	464a      	mov	r2, r9
 8009052:	4631      	mov	r1, r6
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	f43f ae38 	beq.w	8008cce <_printf_float+0xc2>
 800905e:	f108 0801 	add.w	r8, r8, #1
 8009062:	68e3      	ldr	r3, [r4, #12]
 8009064:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009066:	1a5b      	subs	r3, r3, r1
 8009068:	4543      	cmp	r3, r8
 800906a:	dcf0      	bgt.n	800904e <_printf_float+0x442>
 800906c:	e6fa      	b.n	8008e64 <_printf_float+0x258>
 800906e:	f04f 0800 	mov.w	r8, #0
 8009072:	f104 0919 	add.w	r9, r4, #25
 8009076:	e7f4      	b.n	8009062 <_printf_float+0x456>

08009078 <_printf_common>:
 8009078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	4616      	mov	r6, r2
 800907e:	4699      	mov	r9, r3
 8009080:	688a      	ldr	r2, [r1, #8]
 8009082:	690b      	ldr	r3, [r1, #16]
 8009084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009088:	4293      	cmp	r3, r2
 800908a:	bfb8      	it	lt
 800908c:	4613      	movlt	r3, r2
 800908e:	6033      	str	r3, [r6, #0]
 8009090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009094:	4607      	mov	r7, r0
 8009096:	460c      	mov	r4, r1
 8009098:	b10a      	cbz	r2, 800909e <_printf_common+0x26>
 800909a:	3301      	adds	r3, #1
 800909c:	6033      	str	r3, [r6, #0]
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	0699      	lsls	r1, r3, #26
 80090a2:	bf42      	ittt	mi
 80090a4:	6833      	ldrmi	r3, [r6, #0]
 80090a6:	3302      	addmi	r3, #2
 80090a8:	6033      	strmi	r3, [r6, #0]
 80090aa:	6825      	ldr	r5, [r4, #0]
 80090ac:	f015 0506 	ands.w	r5, r5, #6
 80090b0:	d106      	bne.n	80090c0 <_printf_common+0x48>
 80090b2:	f104 0a19 	add.w	sl, r4, #25
 80090b6:	68e3      	ldr	r3, [r4, #12]
 80090b8:	6832      	ldr	r2, [r6, #0]
 80090ba:	1a9b      	subs	r3, r3, r2
 80090bc:	42ab      	cmp	r3, r5
 80090be:	dc26      	bgt.n	800910e <_printf_common+0x96>
 80090c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090c4:	1e13      	subs	r3, r2, #0
 80090c6:	6822      	ldr	r2, [r4, #0]
 80090c8:	bf18      	it	ne
 80090ca:	2301      	movne	r3, #1
 80090cc:	0692      	lsls	r2, r2, #26
 80090ce:	d42b      	bmi.n	8009128 <_printf_common+0xb0>
 80090d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090d4:	4649      	mov	r1, r9
 80090d6:	4638      	mov	r0, r7
 80090d8:	47c0      	blx	r8
 80090da:	3001      	adds	r0, #1
 80090dc:	d01e      	beq.n	800911c <_printf_common+0xa4>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	68e5      	ldr	r5, [r4, #12]
 80090e2:	6832      	ldr	r2, [r6, #0]
 80090e4:	f003 0306 	and.w	r3, r3, #6
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	bf08      	it	eq
 80090ec:	1aad      	subeq	r5, r5, r2
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	6922      	ldr	r2, [r4, #16]
 80090f2:	bf0c      	ite	eq
 80090f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f8:	2500      	movne	r5, #0
 80090fa:	4293      	cmp	r3, r2
 80090fc:	bfc4      	itt	gt
 80090fe:	1a9b      	subgt	r3, r3, r2
 8009100:	18ed      	addgt	r5, r5, r3
 8009102:	2600      	movs	r6, #0
 8009104:	341a      	adds	r4, #26
 8009106:	42b5      	cmp	r5, r6
 8009108:	d11a      	bne.n	8009140 <_printf_common+0xc8>
 800910a:	2000      	movs	r0, #0
 800910c:	e008      	b.n	8009120 <_printf_common+0xa8>
 800910e:	2301      	movs	r3, #1
 8009110:	4652      	mov	r2, sl
 8009112:	4649      	mov	r1, r9
 8009114:	4638      	mov	r0, r7
 8009116:	47c0      	blx	r8
 8009118:	3001      	adds	r0, #1
 800911a:	d103      	bne.n	8009124 <_printf_common+0xac>
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009124:	3501      	adds	r5, #1
 8009126:	e7c6      	b.n	80090b6 <_printf_common+0x3e>
 8009128:	18e1      	adds	r1, r4, r3
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	2030      	movs	r0, #48	; 0x30
 800912e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009132:	4422      	add	r2, r4
 8009134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800913c:	3302      	adds	r3, #2
 800913e:	e7c7      	b.n	80090d0 <_printf_common+0x58>
 8009140:	2301      	movs	r3, #1
 8009142:	4622      	mov	r2, r4
 8009144:	4649      	mov	r1, r9
 8009146:	4638      	mov	r0, r7
 8009148:	47c0      	blx	r8
 800914a:	3001      	adds	r0, #1
 800914c:	d0e6      	beq.n	800911c <_printf_common+0xa4>
 800914e:	3601      	adds	r6, #1
 8009150:	e7d9      	b.n	8009106 <_printf_common+0x8e>
	...

08009154 <_printf_i>:
 8009154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	460c      	mov	r4, r1
 800915a:	4691      	mov	r9, r2
 800915c:	7e27      	ldrb	r7, [r4, #24]
 800915e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009160:	2f78      	cmp	r7, #120	; 0x78
 8009162:	4680      	mov	r8, r0
 8009164:	469a      	mov	sl, r3
 8009166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800916a:	d807      	bhi.n	800917c <_printf_i+0x28>
 800916c:	2f62      	cmp	r7, #98	; 0x62
 800916e:	d80a      	bhi.n	8009186 <_printf_i+0x32>
 8009170:	2f00      	cmp	r7, #0
 8009172:	f000 80d8 	beq.w	8009326 <_printf_i+0x1d2>
 8009176:	2f58      	cmp	r7, #88	; 0x58
 8009178:	f000 80a3 	beq.w	80092c2 <_printf_i+0x16e>
 800917c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009184:	e03a      	b.n	80091fc <_printf_i+0xa8>
 8009186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800918a:	2b15      	cmp	r3, #21
 800918c:	d8f6      	bhi.n	800917c <_printf_i+0x28>
 800918e:	a001      	add	r0, pc, #4	; (adr r0, 8009194 <_printf_i+0x40>)
 8009190:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009194:	080091ed 	.word	0x080091ed
 8009198:	08009201 	.word	0x08009201
 800919c:	0800917d 	.word	0x0800917d
 80091a0:	0800917d 	.word	0x0800917d
 80091a4:	0800917d 	.word	0x0800917d
 80091a8:	0800917d 	.word	0x0800917d
 80091ac:	08009201 	.word	0x08009201
 80091b0:	0800917d 	.word	0x0800917d
 80091b4:	0800917d 	.word	0x0800917d
 80091b8:	0800917d 	.word	0x0800917d
 80091bc:	0800917d 	.word	0x0800917d
 80091c0:	0800930d 	.word	0x0800930d
 80091c4:	08009231 	.word	0x08009231
 80091c8:	080092ef 	.word	0x080092ef
 80091cc:	0800917d 	.word	0x0800917d
 80091d0:	0800917d 	.word	0x0800917d
 80091d4:	0800932f 	.word	0x0800932f
 80091d8:	0800917d 	.word	0x0800917d
 80091dc:	08009231 	.word	0x08009231
 80091e0:	0800917d 	.word	0x0800917d
 80091e4:	0800917d 	.word	0x0800917d
 80091e8:	080092f7 	.word	0x080092f7
 80091ec:	680b      	ldr	r3, [r1, #0]
 80091ee:	1d1a      	adds	r2, r3, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	600a      	str	r2, [r1, #0]
 80091f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091fc:	2301      	movs	r3, #1
 80091fe:	e0a3      	b.n	8009348 <_printf_i+0x1f4>
 8009200:	6825      	ldr	r5, [r4, #0]
 8009202:	6808      	ldr	r0, [r1, #0]
 8009204:	062e      	lsls	r6, r5, #24
 8009206:	f100 0304 	add.w	r3, r0, #4
 800920a:	d50a      	bpl.n	8009222 <_printf_i+0xce>
 800920c:	6805      	ldr	r5, [r0, #0]
 800920e:	600b      	str	r3, [r1, #0]
 8009210:	2d00      	cmp	r5, #0
 8009212:	da03      	bge.n	800921c <_printf_i+0xc8>
 8009214:	232d      	movs	r3, #45	; 0x2d
 8009216:	426d      	negs	r5, r5
 8009218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800921c:	485e      	ldr	r0, [pc, #376]	; (8009398 <_printf_i+0x244>)
 800921e:	230a      	movs	r3, #10
 8009220:	e019      	b.n	8009256 <_printf_i+0x102>
 8009222:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009226:	6805      	ldr	r5, [r0, #0]
 8009228:	600b      	str	r3, [r1, #0]
 800922a:	bf18      	it	ne
 800922c:	b22d      	sxthne	r5, r5
 800922e:	e7ef      	b.n	8009210 <_printf_i+0xbc>
 8009230:	680b      	ldr	r3, [r1, #0]
 8009232:	6825      	ldr	r5, [r4, #0]
 8009234:	1d18      	adds	r0, r3, #4
 8009236:	6008      	str	r0, [r1, #0]
 8009238:	0628      	lsls	r0, r5, #24
 800923a:	d501      	bpl.n	8009240 <_printf_i+0xec>
 800923c:	681d      	ldr	r5, [r3, #0]
 800923e:	e002      	b.n	8009246 <_printf_i+0xf2>
 8009240:	0669      	lsls	r1, r5, #25
 8009242:	d5fb      	bpl.n	800923c <_printf_i+0xe8>
 8009244:	881d      	ldrh	r5, [r3, #0]
 8009246:	4854      	ldr	r0, [pc, #336]	; (8009398 <_printf_i+0x244>)
 8009248:	2f6f      	cmp	r7, #111	; 0x6f
 800924a:	bf0c      	ite	eq
 800924c:	2308      	moveq	r3, #8
 800924e:	230a      	movne	r3, #10
 8009250:	2100      	movs	r1, #0
 8009252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009256:	6866      	ldr	r6, [r4, #4]
 8009258:	60a6      	str	r6, [r4, #8]
 800925a:	2e00      	cmp	r6, #0
 800925c:	bfa2      	ittt	ge
 800925e:	6821      	ldrge	r1, [r4, #0]
 8009260:	f021 0104 	bicge.w	r1, r1, #4
 8009264:	6021      	strge	r1, [r4, #0]
 8009266:	b90d      	cbnz	r5, 800926c <_printf_i+0x118>
 8009268:	2e00      	cmp	r6, #0
 800926a:	d04d      	beq.n	8009308 <_printf_i+0x1b4>
 800926c:	4616      	mov	r6, r2
 800926e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009272:	fb03 5711 	mls	r7, r3, r1, r5
 8009276:	5dc7      	ldrb	r7, [r0, r7]
 8009278:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800927c:	462f      	mov	r7, r5
 800927e:	42bb      	cmp	r3, r7
 8009280:	460d      	mov	r5, r1
 8009282:	d9f4      	bls.n	800926e <_printf_i+0x11a>
 8009284:	2b08      	cmp	r3, #8
 8009286:	d10b      	bne.n	80092a0 <_printf_i+0x14c>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	07df      	lsls	r7, r3, #31
 800928c:	d508      	bpl.n	80092a0 <_printf_i+0x14c>
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	6861      	ldr	r1, [r4, #4]
 8009292:	4299      	cmp	r1, r3
 8009294:	bfde      	ittt	le
 8009296:	2330      	movle	r3, #48	; 0x30
 8009298:	f806 3c01 	strble.w	r3, [r6, #-1]
 800929c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092a0:	1b92      	subs	r2, r2, r6
 80092a2:	6122      	str	r2, [r4, #16]
 80092a4:	f8cd a000 	str.w	sl, [sp]
 80092a8:	464b      	mov	r3, r9
 80092aa:	aa03      	add	r2, sp, #12
 80092ac:	4621      	mov	r1, r4
 80092ae:	4640      	mov	r0, r8
 80092b0:	f7ff fee2 	bl	8009078 <_printf_common>
 80092b4:	3001      	adds	r0, #1
 80092b6:	d14c      	bne.n	8009352 <_printf_i+0x1fe>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	b004      	add	sp, #16
 80092be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c2:	4835      	ldr	r0, [pc, #212]	; (8009398 <_printf_i+0x244>)
 80092c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	680e      	ldr	r6, [r1, #0]
 80092cc:	061f      	lsls	r7, r3, #24
 80092ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80092d2:	600e      	str	r6, [r1, #0]
 80092d4:	d514      	bpl.n	8009300 <_printf_i+0x1ac>
 80092d6:	07d9      	lsls	r1, r3, #31
 80092d8:	bf44      	itt	mi
 80092da:	f043 0320 	orrmi.w	r3, r3, #32
 80092de:	6023      	strmi	r3, [r4, #0]
 80092e0:	b91d      	cbnz	r5, 80092ea <_printf_i+0x196>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	f023 0320 	bic.w	r3, r3, #32
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	2310      	movs	r3, #16
 80092ec:	e7b0      	b.n	8009250 <_printf_i+0xfc>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	f043 0320 	orr.w	r3, r3, #32
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	2378      	movs	r3, #120	; 0x78
 80092f8:	4828      	ldr	r0, [pc, #160]	; (800939c <_printf_i+0x248>)
 80092fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092fe:	e7e3      	b.n	80092c8 <_printf_i+0x174>
 8009300:	065e      	lsls	r6, r3, #25
 8009302:	bf48      	it	mi
 8009304:	b2ad      	uxthmi	r5, r5
 8009306:	e7e6      	b.n	80092d6 <_printf_i+0x182>
 8009308:	4616      	mov	r6, r2
 800930a:	e7bb      	b.n	8009284 <_printf_i+0x130>
 800930c:	680b      	ldr	r3, [r1, #0]
 800930e:	6826      	ldr	r6, [r4, #0]
 8009310:	6960      	ldr	r0, [r4, #20]
 8009312:	1d1d      	adds	r5, r3, #4
 8009314:	600d      	str	r5, [r1, #0]
 8009316:	0635      	lsls	r5, r6, #24
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	d501      	bpl.n	8009320 <_printf_i+0x1cc>
 800931c:	6018      	str	r0, [r3, #0]
 800931e:	e002      	b.n	8009326 <_printf_i+0x1d2>
 8009320:	0671      	lsls	r1, r6, #25
 8009322:	d5fb      	bpl.n	800931c <_printf_i+0x1c8>
 8009324:	8018      	strh	r0, [r3, #0]
 8009326:	2300      	movs	r3, #0
 8009328:	6123      	str	r3, [r4, #16]
 800932a:	4616      	mov	r6, r2
 800932c:	e7ba      	b.n	80092a4 <_printf_i+0x150>
 800932e:	680b      	ldr	r3, [r1, #0]
 8009330:	1d1a      	adds	r2, r3, #4
 8009332:	600a      	str	r2, [r1, #0]
 8009334:	681e      	ldr	r6, [r3, #0]
 8009336:	6862      	ldr	r2, [r4, #4]
 8009338:	2100      	movs	r1, #0
 800933a:	4630      	mov	r0, r6
 800933c:	f7f6 ff70 	bl	8000220 <memchr>
 8009340:	b108      	cbz	r0, 8009346 <_printf_i+0x1f2>
 8009342:	1b80      	subs	r0, r0, r6
 8009344:	6060      	str	r0, [r4, #4]
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	6123      	str	r3, [r4, #16]
 800934a:	2300      	movs	r3, #0
 800934c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009350:	e7a8      	b.n	80092a4 <_printf_i+0x150>
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	4632      	mov	r2, r6
 8009356:	4649      	mov	r1, r9
 8009358:	4640      	mov	r0, r8
 800935a:	47d0      	blx	sl
 800935c:	3001      	adds	r0, #1
 800935e:	d0ab      	beq.n	80092b8 <_printf_i+0x164>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	079b      	lsls	r3, r3, #30
 8009364:	d413      	bmi.n	800938e <_printf_i+0x23a>
 8009366:	68e0      	ldr	r0, [r4, #12]
 8009368:	9b03      	ldr	r3, [sp, #12]
 800936a:	4298      	cmp	r0, r3
 800936c:	bfb8      	it	lt
 800936e:	4618      	movlt	r0, r3
 8009370:	e7a4      	b.n	80092bc <_printf_i+0x168>
 8009372:	2301      	movs	r3, #1
 8009374:	4632      	mov	r2, r6
 8009376:	4649      	mov	r1, r9
 8009378:	4640      	mov	r0, r8
 800937a:	47d0      	blx	sl
 800937c:	3001      	adds	r0, #1
 800937e:	d09b      	beq.n	80092b8 <_printf_i+0x164>
 8009380:	3501      	adds	r5, #1
 8009382:	68e3      	ldr	r3, [r4, #12]
 8009384:	9903      	ldr	r1, [sp, #12]
 8009386:	1a5b      	subs	r3, r3, r1
 8009388:	42ab      	cmp	r3, r5
 800938a:	dcf2      	bgt.n	8009372 <_printf_i+0x21e>
 800938c:	e7eb      	b.n	8009366 <_printf_i+0x212>
 800938e:	2500      	movs	r5, #0
 8009390:	f104 0619 	add.w	r6, r4, #25
 8009394:	e7f5      	b.n	8009382 <_printf_i+0x22e>
 8009396:	bf00      	nop
 8009398:	0800b20a 	.word	0x0800b20a
 800939c:	0800b21b 	.word	0x0800b21b

080093a0 <iprintf>:
 80093a0:	b40f      	push	{r0, r1, r2, r3}
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <iprintf+0x2c>)
 80093a4:	b513      	push	{r0, r1, r4, lr}
 80093a6:	681c      	ldr	r4, [r3, #0]
 80093a8:	b124      	cbz	r4, 80093b4 <iprintf+0x14>
 80093aa:	69a3      	ldr	r3, [r4, #24]
 80093ac:	b913      	cbnz	r3, 80093b4 <iprintf+0x14>
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff fa14 	bl	80087dc <__sinit>
 80093b4:	ab05      	add	r3, sp, #20
 80093b6:	9a04      	ldr	r2, [sp, #16]
 80093b8:	68a1      	ldr	r1, [r4, #8]
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	4620      	mov	r0, r4
 80093be:	f001 fc7d 	bl	800acbc <_vfiprintf_r>
 80093c2:	b002      	add	sp, #8
 80093c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c8:	b004      	add	sp, #16
 80093ca:	4770      	bx	lr
 80093cc:	20000024 	.word	0x20000024

080093d0 <_puts_r>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	460e      	mov	r6, r1
 80093d4:	4605      	mov	r5, r0
 80093d6:	b118      	cbz	r0, 80093e0 <_puts_r+0x10>
 80093d8:	6983      	ldr	r3, [r0, #24]
 80093da:	b90b      	cbnz	r3, 80093e0 <_puts_r+0x10>
 80093dc:	f7ff f9fe 	bl	80087dc <__sinit>
 80093e0:	69ab      	ldr	r3, [r5, #24]
 80093e2:	68ac      	ldr	r4, [r5, #8]
 80093e4:	b913      	cbnz	r3, 80093ec <_puts_r+0x1c>
 80093e6:	4628      	mov	r0, r5
 80093e8:	f7ff f9f8 	bl	80087dc <__sinit>
 80093ec:	4b2c      	ldr	r3, [pc, #176]	; (80094a0 <_puts_r+0xd0>)
 80093ee:	429c      	cmp	r4, r3
 80093f0:	d120      	bne.n	8009434 <_puts_r+0x64>
 80093f2:	686c      	ldr	r4, [r5, #4]
 80093f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093f6:	07db      	lsls	r3, r3, #31
 80093f8:	d405      	bmi.n	8009406 <_puts_r+0x36>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	0598      	lsls	r0, r3, #22
 80093fe:	d402      	bmi.n	8009406 <_puts_r+0x36>
 8009400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009402:	f7ff faae 	bl	8008962 <__retarget_lock_acquire_recursive>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	d51d      	bpl.n	8009448 <_puts_r+0x78>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	b1db      	cbz	r3, 8009448 <_puts_r+0x78>
 8009410:	3e01      	subs	r6, #1
 8009412:	68a3      	ldr	r3, [r4, #8]
 8009414:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009418:	3b01      	subs	r3, #1
 800941a:	60a3      	str	r3, [r4, #8]
 800941c:	bb39      	cbnz	r1, 800946e <_puts_r+0x9e>
 800941e:	2b00      	cmp	r3, #0
 8009420:	da38      	bge.n	8009494 <_puts_r+0xc4>
 8009422:	4622      	mov	r2, r4
 8009424:	210a      	movs	r1, #10
 8009426:	4628      	mov	r0, r5
 8009428:	f000 f89c 	bl	8009564 <__swbuf_r>
 800942c:	3001      	adds	r0, #1
 800942e:	d011      	beq.n	8009454 <_puts_r+0x84>
 8009430:	250a      	movs	r5, #10
 8009432:	e011      	b.n	8009458 <_puts_r+0x88>
 8009434:	4b1b      	ldr	r3, [pc, #108]	; (80094a4 <_puts_r+0xd4>)
 8009436:	429c      	cmp	r4, r3
 8009438:	d101      	bne.n	800943e <_puts_r+0x6e>
 800943a:	68ac      	ldr	r4, [r5, #8]
 800943c:	e7da      	b.n	80093f4 <_puts_r+0x24>
 800943e:	4b1a      	ldr	r3, [pc, #104]	; (80094a8 <_puts_r+0xd8>)
 8009440:	429c      	cmp	r4, r3
 8009442:	bf08      	it	eq
 8009444:	68ec      	ldreq	r4, [r5, #12]
 8009446:	e7d5      	b.n	80093f4 <_puts_r+0x24>
 8009448:	4621      	mov	r1, r4
 800944a:	4628      	mov	r0, r5
 800944c:	f000 f8ee 	bl	800962c <__swsetup_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	d0dd      	beq.n	8009410 <_puts_r+0x40>
 8009454:	f04f 35ff 	mov.w	r5, #4294967295
 8009458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	d405      	bmi.n	800946a <_puts_r+0x9a>
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	059b      	lsls	r3, r3, #22
 8009462:	d402      	bmi.n	800946a <_puts_r+0x9a>
 8009464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009466:	f7ff fa7d 	bl	8008964 <__retarget_lock_release_recursive>
 800946a:	4628      	mov	r0, r5
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	2b00      	cmp	r3, #0
 8009470:	da04      	bge.n	800947c <_puts_r+0xac>
 8009472:	69a2      	ldr	r2, [r4, #24]
 8009474:	429a      	cmp	r2, r3
 8009476:	dc06      	bgt.n	8009486 <_puts_r+0xb6>
 8009478:	290a      	cmp	r1, #10
 800947a:	d004      	beq.n	8009486 <_puts_r+0xb6>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	7019      	strb	r1, [r3, #0]
 8009484:	e7c5      	b.n	8009412 <_puts_r+0x42>
 8009486:	4622      	mov	r2, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 f86b 	bl	8009564 <__swbuf_r>
 800948e:	3001      	adds	r0, #1
 8009490:	d1bf      	bne.n	8009412 <_puts_r+0x42>
 8009492:	e7df      	b.n	8009454 <_puts_r+0x84>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	250a      	movs	r5, #10
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	6022      	str	r2, [r4, #0]
 800949c:	701d      	strb	r5, [r3, #0]
 800949e:	e7db      	b.n	8009458 <_puts_r+0x88>
 80094a0:	0800b1b4 	.word	0x0800b1b4
 80094a4:	0800b1d4 	.word	0x0800b1d4
 80094a8:	0800b194 	.word	0x0800b194

080094ac <puts>:
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <puts+0xc>)
 80094ae:	4601      	mov	r1, r0
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f7ff bf8d 	b.w	80093d0 <_puts_r>
 80094b6:	bf00      	nop
 80094b8:	20000024 	.word	0x20000024

080094bc <_sbrk_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d06      	ldr	r5, [pc, #24]	; (80094d8 <_sbrk_r+0x1c>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7f9 fc24 	bl	8002d14 <_sbrk>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_sbrk_r+0x1a>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_sbrk_r+0x1a>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	20004ac8 	.word	0x20004ac8

080094dc <__sread>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	f001 fd1a 	bl	800af1c <_read_r>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	bfab      	itete	ge
 80094ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094ee:	89a3      	ldrhlt	r3, [r4, #12]
 80094f0:	181b      	addge	r3, r3, r0
 80094f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094f6:	bfac      	ite	ge
 80094f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094fa:	81a3      	strhlt	r3, [r4, #12]
 80094fc:	bd10      	pop	{r4, pc}

080094fe <__swrite>:
 80094fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	461f      	mov	r7, r3
 8009504:	898b      	ldrh	r3, [r1, #12]
 8009506:	05db      	lsls	r3, r3, #23
 8009508:	4605      	mov	r5, r0
 800950a:	460c      	mov	r4, r1
 800950c:	4616      	mov	r6, r2
 800950e:	d505      	bpl.n	800951c <__swrite+0x1e>
 8009510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009514:	2302      	movs	r3, #2
 8009516:	2200      	movs	r2, #0
 8009518:	f000 ff82 	bl	800a420 <_lseek_r>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	4632      	mov	r2, r6
 800952a:	463b      	mov	r3, r7
 800952c:	4628      	mov	r0, r5
 800952e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009532:	f000 b869 	b.w	8009608 <_write_r>

08009536 <__sseek>:
 8009536:	b510      	push	{r4, lr}
 8009538:	460c      	mov	r4, r1
 800953a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953e:	f000 ff6f 	bl	800a420 <_lseek_r>
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	bf15      	itete	ne
 8009548:	6560      	strne	r0, [r4, #84]	; 0x54
 800954a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800954e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009552:	81a3      	strheq	r3, [r4, #12]
 8009554:	bf18      	it	ne
 8009556:	81a3      	strhne	r3, [r4, #12]
 8009558:	bd10      	pop	{r4, pc}

0800955a <__sclose>:
 800955a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955e:	f000 b8d3 	b.w	8009708 <_close_r>
	...

08009564 <__swbuf_r>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	460e      	mov	r6, r1
 8009568:	4614      	mov	r4, r2
 800956a:	4605      	mov	r5, r0
 800956c:	b118      	cbz	r0, 8009576 <__swbuf_r+0x12>
 800956e:	6983      	ldr	r3, [r0, #24]
 8009570:	b90b      	cbnz	r3, 8009576 <__swbuf_r+0x12>
 8009572:	f7ff f933 	bl	80087dc <__sinit>
 8009576:	4b21      	ldr	r3, [pc, #132]	; (80095fc <__swbuf_r+0x98>)
 8009578:	429c      	cmp	r4, r3
 800957a:	d12b      	bne.n	80095d4 <__swbuf_r+0x70>
 800957c:	686c      	ldr	r4, [r5, #4]
 800957e:	69a3      	ldr	r3, [r4, #24]
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	071a      	lsls	r2, r3, #28
 8009586:	d52f      	bpl.n	80095e8 <__swbuf_r+0x84>
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	b36b      	cbz	r3, 80095e8 <__swbuf_r+0x84>
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	6820      	ldr	r0, [r4, #0]
 8009590:	1ac0      	subs	r0, r0, r3
 8009592:	6963      	ldr	r3, [r4, #20]
 8009594:	b2f6      	uxtb	r6, r6
 8009596:	4283      	cmp	r3, r0
 8009598:	4637      	mov	r7, r6
 800959a:	dc04      	bgt.n	80095a6 <__swbuf_r+0x42>
 800959c:	4621      	mov	r1, r4
 800959e:	4628      	mov	r0, r5
 80095a0:	f7ff f888 	bl	80086b4 <_fflush_r>
 80095a4:	bb30      	cbnz	r0, 80095f4 <__swbuf_r+0x90>
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	60a3      	str	r3, [r4, #8]
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	6022      	str	r2, [r4, #0]
 80095b2:	701e      	strb	r6, [r3, #0]
 80095b4:	6963      	ldr	r3, [r4, #20]
 80095b6:	3001      	adds	r0, #1
 80095b8:	4283      	cmp	r3, r0
 80095ba:	d004      	beq.n	80095c6 <__swbuf_r+0x62>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	07db      	lsls	r3, r3, #31
 80095c0:	d506      	bpl.n	80095d0 <__swbuf_r+0x6c>
 80095c2:	2e0a      	cmp	r6, #10
 80095c4:	d104      	bne.n	80095d0 <__swbuf_r+0x6c>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7ff f873 	bl	80086b4 <_fflush_r>
 80095ce:	b988      	cbnz	r0, 80095f4 <__swbuf_r+0x90>
 80095d0:	4638      	mov	r0, r7
 80095d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <__swbuf_r+0x9c>)
 80095d6:	429c      	cmp	r4, r3
 80095d8:	d101      	bne.n	80095de <__swbuf_r+0x7a>
 80095da:	68ac      	ldr	r4, [r5, #8]
 80095dc:	e7cf      	b.n	800957e <__swbuf_r+0x1a>
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <__swbuf_r+0xa0>)
 80095e0:	429c      	cmp	r4, r3
 80095e2:	bf08      	it	eq
 80095e4:	68ec      	ldreq	r4, [r5, #12]
 80095e6:	e7ca      	b.n	800957e <__swbuf_r+0x1a>
 80095e8:	4621      	mov	r1, r4
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 f81e 	bl	800962c <__swsetup_r>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d0cb      	beq.n	800958c <__swbuf_r+0x28>
 80095f4:	f04f 37ff 	mov.w	r7, #4294967295
 80095f8:	e7ea      	b.n	80095d0 <__swbuf_r+0x6c>
 80095fa:	bf00      	nop
 80095fc:	0800b1b4 	.word	0x0800b1b4
 8009600:	0800b1d4 	.word	0x0800b1d4
 8009604:	0800b194 	.word	0x0800b194

08009608 <_write_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d07      	ldr	r5, [pc, #28]	; (8009628 <_write_r+0x20>)
 800960c:	4604      	mov	r4, r0
 800960e:	4608      	mov	r0, r1
 8009610:	4611      	mov	r1, r2
 8009612:	2200      	movs	r2, #0
 8009614:	602a      	str	r2, [r5, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	f7f8 fb2b 	bl	8001c72 <_write>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_write_r+0x1e>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_write_r+0x1e>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	20004ac8 	.word	0x20004ac8

0800962c <__swsetup_r>:
 800962c:	4b32      	ldr	r3, [pc, #200]	; (80096f8 <__swsetup_r+0xcc>)
 800962e:	b570      	push	{r4, r5, r6, lr}
 8009630:	681d      	ldr	r5, [r3, #0]
 8009632:	4606      	mov	r6, r0
 8009634:	460c      	mov	r4, r1
 8009636:	b125      	cbz	r5, 8009642 <__swsetup_r+0x16>
 8009638:	69ab      	ldr	r3, [r5, #24]
 800963a:	b913      	cbnz	r3, 8009642 <__swsetup_r+0x16>
 800963c:	4628      	mov	r0, r5
 800963e:	f7ff f8cd 	bl	80087dc <__sinit>
 8009642:	4b2e      	ldr	r3, [pc, #184]	; (80096fc <__swsetup_r+0xd0>)
 8009644:	429c      	cmp	r4, r3
 8009646:	d10f      	bne.n	8009668 <__swsetup_r+0x3c>
 8009648:	686c      	ldr	r4, [r5, #4]
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009650:	0719      	lsls	r1, r3, #28
 8009652:	d42c      	bmi.n	80096ae <__swsetup_r+0x82>
 8009654:	06dd      	lsls	r5, r3, #27
 8009656:	d411      	bmi.n	800967c <__swsetup_r+0x50>
 8009658:	2309      	movs	r3, #9
 800965a:	6033      	str	r3, [r6, #0]
 800965c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	f04f 30ff 	mov.w	r0, #4294967295
 8009666:	e03e      	b.n	80096e6 <__swsetup_r+0xba>
 8009668:	4b25      	ldr	r3, [pc, #148]	; (8009700 <__swsetup_r+0xd4>)
 800966a:	429c      	cmp	r4, r3
 800966c:	d101      	bne.n	8009672 <__swsetup_r+0x46>
 800966e:	68ac      	ldr	r4, [r5, #8]
 8009670:	e7eb      	b.n	800964a <__swsetup_r+0x1e>
 8009672:	4b24      	ldr	r3, [pc, #144]	; (8009704 <__swsetup_r+0xd8>)
 8009674:	429c      	cmp	r4, r3
 8009676:	bf08      	it	eq
 8009678:	68ec      	ldreq	r4, [r5, #12]
 800967a:	e7e6      	b.n	800964a <__swsetup_r+0x1e>
 800967c:	0758      	lsls	r0, r3, #29
 800967e:	d512      	bpl.n	80096a6 <__swsetup_r+0x7a>
 8009680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009682:	b141      	cbz	r1, 8009696 <__swsetup_r+0x6a>
 8009684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009688:	4299      	cmp	r1, r3
 800968a:	d002      	beq.n	8009692 <__swsetup_r+0x66>
 800968c:	4630      	mov	r0, r6
 800968e:	f7ff f973 	bl	8008978 <_free_r>
 8009692:	2300      	movs	r3, #0
 8009694:	6363      	str	r3, [r4, #52]	; 0x34
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	2300      	movs	r3, #0
 80096a0:	6063      	str	r3, [r4, #4]
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	f043 0308 	orr.w	r3, r3, #8
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	b94b      	cbnz	r3, 80096c6 <__swsetup_r+0x9a>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096bc:	d003      	beq.n	80096c6 <__swsetup_r+0x9a>
 80096be:	4621      	mov	r1, r4
 80096c0:	4630      	mov	r0, r6
 80096c2:	f000 fee3 	bl	800a48c <__smakebuf_r>
 80096c6:	89a0      	ldrh	r0, [r4, #12]
 80096c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096cc:	f010 0301 	ands.w	r3, r0, #1
 80096d0:	d00a      	beq.n	80096e8 <__swsetup_r+0xbc>
 80096d2:	2300      	movs	r3, #0
 80096d4:	60a3      	str	r3, [r4, #8]
 80096d6:	6963      	ldr	r3, [r4, #20]
 80096d8:	425b      	negs	r3, r3
 80096da:	61a3      	str	r3, [r4, #24]
 80096dc:	6923      	ldr	r3, [r4, #16]
 80096de:	b943      	cbnz	r3, 80096f2 <__swsetup_r+0xc6>
 80096e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096e4:	d1ba      	bne.n	800965c <__swsetup_r+0x30>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	0781      	lsls	r1, r0, #30
 80096ea:	bf58      	it	pl
 80096ec:	6963      	ldrpl	r3, [r4, #20]
 80096ee:	60a3      	str	r3, [r4, #8]
 80096f0:	e7f4      	b.n	80096dc <__swsetup_r+0xb0>
 80096f2:	2000      	movs	r0, #0
 80096f4:	e7f7      	b.n	80096e6 <__swsetup_r+0xba>
 80096f6:	bf00      	nop
 80096f8:	20000024 	.word	0x20000024
 80096fc:	0800b1b4 	.word	0x0800b1b4
 8009700:	0800b1d4 	.word	0x0800b1d4
 8009704:	0800b194 	.word	0x0800b194

08009708 <_close_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d06      	ldr	r5, [pc, #24]	; (8009724 <_close_r+0x1c>)
 800970c:	2300      	movs	r3, #0
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	f7f9 fac9 	bl	8002caa <_close>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_close_r+0x1a>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_close_r+0x1a>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	20004ac8 	.word	0x20004ac8

08009728 <quorem>:
 8009728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	6903      	ldr	r3, [r0, #16]
 800972e:	690c      	ldr	r4, [r1, #16]
 8009730:	42a3      	cmp	r3, r4
 8009732:	4607      	mov	r7, r0
 8009734:	f2c0 8081 	blt.w	800983a <quorem+0x112>
 8009738:	3c01      	subs	r4, #1
 800973a:	f101 0814 	add.w	r8, r1, #20
 800973e:	f100 0514 	add.w	r5, r0, #20
 8009742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800974c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009750:	3301      	adds	r3, #1
 8009752:	429a      	cmp	r2, r3
 8009754:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800975c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009760:	d331      	bcc.n	80097c6 <quorem+0x9e>
 8009762:	f04f 0e00 	mov.w	lr, #0
 8009766:	4640      	mov	r0, r8
 8009768:	46ac      	mov	ip, r5
 800976a:	46f2      	mov	sl, lr
 800976c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009770:	b293      	uxth	r3, r2
 8009772:	fb06 e303 	mla	r3, r6, r3, lr
 8009776:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800977a:	b29b      	uxth	r3, r3
 800977c:	ebaa 0303 	sub.w	r3, sl, r3
 8009780:	0c12      	lsrs	r2, r2, #16
 8009782:	f8dc a000 	ldr.w	sl, [ip]
 8009786:	fb06 e202 	mla	r2, r6, r2, lr
 800978a:	fa13 f38a 	uxtah	r3, r3, sl
 800978e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009792:	fa1f fa82 	uxth.w	sl, r2
 8009796:	f8dc 2000 	ldr.w	r2, [ip]
 800979a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800979e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a8:	4581      	cmp	r9, r0
 80097aa:	f84c 3b04 	str.w	r3, [ip], #4
 80097ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097b2:	d2db      	bcs.n	800976c <quorem+0x44>
 80097b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80097b8:	b92b      	cbnz	r3, 80097c6 <quorem+0x9e>
 80097ba:	9b01      	ldr	r3, [sp, #4]
 80097bc:	3b04      	subs	r3, #4
 80097be:	429d      	cmp	r5, r3
 80097c0:	461a      	mov	r2, r3
 80097c2:	d32e      	bcc.n	8009822 <quorem+0xfa>
 80097c4:	613c      	str	r4, [r7, #16]
 80097c6:	4638      	mov	r0, r7
 80097c8:	f001 f940 	bl	800aa4c <__mcmp>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	db24      	blt.n	800981a <quorem+0xf2>
 80097d0:	3601      	adds	r6, #1
 80097d2:	4628      	mov	r0, r5
 80097d4:	f04f 0c00 	mov.w	ip, #0
 80097d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80097dc:	f8d0 e000 	ldr.w	lr, [r0]
 80097e0:	b293      	uxth	r3, r2
 80097e2:	ebac 0303 	sub.w	r3, ip, r3
 80097e6:	0c12      	lsrs	r2, r2, #16
 80097e8:	fa13 f38e 	uxtah	r3, r3, lr
 80097ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097fa:	45c1      	cmp	r9, r8
 80097fc:	f840 3b04 	str.w	r3, [r0], #4
 8009800:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009804:	d2e8      	bcs.n	80097d8 <quorem+0xb0>
 8009806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800980a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800980e:	b922      	cbnz	r2, 800981a <quorem+0xf2>
 8009810:	3b04      	subs	r3, #4
 8009812:	429d      	cmp	r5, r3
 8009814:	461a      	mov	r2, r3
 8009816:	d30a      	bcc.n	800982e <quorem+0x106>
 8009818:	613c      	str	r4, [r7, #16]
 800981a:	4630      	mov	r0, r6
 800981c:	b003      	add	sp, #12
 800981e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009822:	6812      	ldr	r2, [r2, #0]
 8009824:	3b04      	subs	r3, #4
 8009826:	2a00      	cmp	r2, #0
 8009828:	d1cc      	bne.n	80097c4 <quorem+0x9c>
 800982a:	3c01      	subs	r4, #1
 800982c:	e7c7      	b.n	80097be <quorem+0x96>
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	3b04      	subs	r3, #4
 8009832:	2a00      	cmp	r2, #0
 8009834:	d1f0      	bne.n	8009818 <quorem+0xf0>
 8009836:	3c01      	subs	r4, #1
 8009838:	e7eb      	b.n	8009812 <quorem+0xea>
 800983a:	2000      	movs	r0, #0
 800983c:	e7ee      	b.n	800981c <quorem+0xf4>
	...

08009840 <_dtoa_r>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	ed2d 8b02 	vpush	{d8}
 8009848:	ec57 6b10 	vmov	r6, r7, d0
 800984c:	b095      	sub	sp, #84	; 0x54
 800984e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009854:	9105      	str	r1, [sp, #20]
 8009856:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800985a:	4604      	mov	r4, r0
 800985c:	9209      	str	r2, [sp, #36]	; 0x24
 800985e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009860:	b975      	cbnz	r5, 8009880 <_dtoa_r+0x40>
 8009862:	2010      	movs	r0, #16
 8009864:	f000 fe52 	bl	800a50c <malloc>
 8009868:	4602      	mov	r2, r0
 800986a:	6260      	str	r0, [r4, #36]	; 0x24
 800986c:	b920      	cbnz	r0, 8009878 <_dtoa_r+0x38>
 800986e:	4bb2      	ldr	r3, [pc, #712]	; (8009b38 <_dtoa_r+0x2f8>)
 8009870:	21ea      	movs	r1, #234	; 0xea
 8009872:	48b2      	ldr	r0, [pc, #712]	; (8009b3c <_dtoa_r+0x2fc>)
 8009874:	f001 fb64 	bl	800af40 <__assert_func>
 8009878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800987c:	6005      	str	r5, [r0, #0]
 800987e:	60c5      	str	r5, [r0, #12]
 8009880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	b151      	cbz	r1, 800989c <_dtoa_r+0x5c>
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	604a      	str	r2, [r1, #4]
 800988a:	2301      	movs	r3, #1
 800988c:	4093      	lsls	r3, r2
 800988e:	608b      	str	r3, [r1, #8]
 8009890:	4620      	mov	r0, r4
 8009892:	f000 fe9d 	bl	800a5d0 <_Bfree>
 8009896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	1e3b      	subs	r3, r7, #0
 800989e:	bfb9      	ittee	lt
 80098a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098a4:	9303      	strlt	r3, [sp, #12]
 80098a6:	2300      	movge	r3, #0
 80098a8:	f8c8 3000 	strge.w	r3, [r8]
 80098ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80098b0:	4ba3      	ldr	r3, [pc, #652]	; (8009b40 <_dtoa_r+0x300>)
 80098b2:	bfbc      	itt	lt
 80098b4:	2201      	movlt	r2, #1
 80098b6:	f8c8 2000 	strlt.w	r2, [r8]
 80098ba:	ea33 0309 	bics.w	r3, r3, r9
 80098be:	d11b      	bne.n	80098f8 <_dtoa_r+0xb8>
 80098c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098cc:	4333      	orrs	r3, r6
 80098ce:	f000 857a 	beq.w	800a3c6 <_dtoa_r+0xb86>
 80098d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d4:	b963      	cbnz	r3, 80098f0 <_dtoa_r+0xb0>
 80098d6:	4b9b      	ldr	r3, [pc, #620]	; (8009b44 <_dtoa_r+0x304>)
 80098d8:	e024      	b.n	8009924 <_dtoa_r+0xe4>
 80098da:	4b9b      	ldr	r3, [pc, #620]	; (8009b48 <_dtoa_r+0x308>)
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	9800      	ldr	r0, [sp, #0]
 80098e6:	b015      	add	sp, #84	; 0x54
 80098e8:	ecbd 8b02 	vpop	{d8}
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	4b94      	ldr	r3, [pc, #592]	; (8009b44 <_dtoa_r+0x304>)
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	3303      	adds	r3, #3
 80098f6:	e7f3      	b.n	80098e0 <_dtoa_r+0xa0>
 80098f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098fc:	2200      	movs	r2, #0
 80098fe:	ec51 0b17 	vmov	r0, r1, d7
 8009902:	2300      	movs	r3, #0
 8009904:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009908:	f7f7 f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 800990c:	4680      	mov	r8, r0
 800990e:	b158      	cbz	r0, 8009928 <_dtoa_r+0xe8>
 8009910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009912:	2301      	movs	r3, #1
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8551 	beq.w	800a3c0 <_dtoa_r+0xb80>
 800991e:	488b      	ldr	r0, [pc, #556]	; (8009b4c <_dtoa_r+0x30c>)
 8009920:	6018      	str	r0, [r3, #0]
 8009922:	1e43      	subs	r3, r0, #1
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	e7dd      	b.n	80098e4 <_dtoa_r+0xa4>
 8009928:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800992c:	aa12      	add	r2, sp, #72	; 0x48
 800992e:	a913      	add	r1, sp, #76	; 0x4c
 8009930:	4620      	mov	r0, r4
 8009932:	f001 f92f 	bl	800ab94 <__d2b>
 8009936:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800993a:	4683      	mov	fp, r0
 800993c:	2d00      	cmp	r5, #0
 800993e:	d07c      	beq.n	8009a3a <_dtoa_r+0x1fa>
 8009940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009942:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800994a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800994e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009952:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800995a:	4b7d      	ldr	r3, [pc, #500]	; (8009b50 <_dtoa_r+0x310>)
 800995c:	2200      	movs	r2, #0
 800995e:	4630      	mov	r0, r6
 8009960:	4639      	mov	r1, r7
 8009962:	f7f6 fcb1 	bl	80002c8 <__aeabi_dsub>
 8009966:	a36e      	add	r3, pc, #440	; (adr r3, 8009b20 <_dtoa_r+0x2e0>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	f7f6 fe64 	bl	8000638 <__aeabi_dmul>
 8009970:	a36d      	add	r3, pc, #436	; (adr r3, 8009b28 <_dtoa_r+0x2e8>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fca9 	bl	80002cc <__adddf3>
 800997a:	4606      	mov	r6, r0
 800997c:	4628      	mov	r0, r5
 800997e:	460f      	mov	r7, r1
 8009980:	f7f6 fdf0 	bl	8000564 <__aeabi_i2d>
 8009984:	a36a      	add	r3, pc, #424	; (adr r3, 8009b30 <_dtoa_r+0x2f0>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f7f6 fe55 	bl	8000638 <__aeabi_dmul>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4630      	mov	r0, r6
 8009994:	4639      	mov	r1, r7
 8009996:	f7f6 fc99 	bl	80002cc <__adddf3>
 800999a:	4606      	mov	r6, r0
 800999c:	460f      	mov	r7, r1
 800999e:	f7f7 f8fb 	bl	8000b98 <__aeabi_d2iz>
 80099a2:	2200      	movs	r2, #0
 80099a4:	4682      	mov	sl, r0
 80099a6:	2300      	movs	r3, #0
 80099a8:	4630      	mov	r0, r6
 80099aa:	4639      	mov	r1, r7
 80099ac:	f7f7 f8b6 	bl	8000b1c <__aeabi_dcmplt>
 80099b0:	b148      	cbz	r0, 80099c6 <_dtoa_r+0x186>
 80099b2:	4650      	mov	r0, sl
 80099b4:	f7f6 fdd6 	bl	8000564 <__aeabi_i2d>
 80099b8:	4632      	mov	r2, r6
 80099ba:	463b      	mov	r3, r7
 80099bc:	f7f7 f8a4 	bl	8000b08 <__aeabi_dcmpeq>
 80099c0:	b908      	cbnz	r0, 80099c6 <_dtoa_r+0x186>
 80099c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099c6:	f1ba 0f16 	cmp.w	sl, #22
 80099ca:	d854      	bhi.n	8009a76 <_dtoa_r+0x236>
 80099cc:	4b61      	ldr	r3, [pc, #388]	; (8009b54 <_dtoa_r+0x314>)
 80099ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099da:	f7f7 f89f 	bl	8000b1c <__aeabi_dcmplt>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d04b      	beq.n	8009a7a <_dtoa_r+0x23a>
 80099e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099e6:	2300      	movs	r3, #0
 80099e8:	930e      	str	r3, [sp, #56]	; 0x38
 80099ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099ec:	1b5d      	subs	r5, r3, r5
 80099ee:	1e6b      	subs	r3, r5, #1
 80099f0:	9304      	str	r3, [sp, #16]
 80099f2:	bf43      	ittte	mi
 80099f4:	2300      	movmi	r3, #0
 80099f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80099fa:	9304      	strmi	r3, [sp, #16]
 80099fc:	f04f 0800 	movpl.w	r8, #0
 8009a00:	f1ba 0f00 	cmp.w	sl, #0
 8009a04:	db3b      	blt.n	8009a7e <_dtoa_r+0x23e>
 8009a06:	9b04      	ldr	r3, [sp, #16]
 8009a08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009a0c:	4453      	add	r3, sl
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	2300      	movs	r3, #0
 8009a12:	9306      	str	r3, [sp, #24]
 8009a14:	9b05      	ldr	r3, [sp, #20]
 8009a16:	2b09      	cmp	r3, #9
 8009a18:	d869      	bhi.n	8009aee <_dtoa_r+0x2ae>
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	bfc4      	itt	gt
 8009a1e:	3b04      	subgt	r3, #4
 8009a20:	9305      	strgt	r3, [sp, #20]
 8009a22:	9b05      	ldr	r3, [sp, #20]
 8009a24:	f1a3 0302 	sub.w	r3, r3, #2
 8009a28:	bfcc      	ite	gt
 8009a2a:	2500      	movgt	r5, #0
 8009a2c:	2501      	movle	r5, #1
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d869      	bhi.n	8009b06 <_dtoa_r+0x2c6>
 8009a32:	e8df f003 	tbb	[pc, r3]
 8009a36:	4e2c      	.short	0x4e2c
 8009a38:	5a4c      	.short	0x5a4c
 8009a3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009a3e:	441d      	add	r5, r3
 8009a40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	bfc1      	itttt	gt
 8009a48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a50:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a54:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a58:	bfda      	itte	le
 8009a5a:	f1c3 0320 	rsble	r3, r3, #32
 8009a5e:	fa06 f003 	lslle.w	r0, r6, r3
 8009a62:	4318      	orrgt	r0, r3
 8009a64:	f7f6 fd6e 	bl	8000544 <__aeabi_ui2d>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a70:	3d01      	subs	r5, #1
 8009a72:	9310      	str	r3, [sp, #64]	; 0x40
 8009a74:	e771      	b.n	800995a <_dtoa_r+0x11a>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e7b6      	b.n	80099e8 <_dtoa_r+0x1a8>
 8009a7a:	900e      	str	r0, [sp, #56]	; 0x38
 8009a7c:	e7b5      	b.n	80099ea <_dtoa_r+0x1aa>
 8009a7e:	f1ca 0300 	rsb	r3, sl, #0
 8009a82:	9306      	str	r3, [sp, #24]
 8009a84:	2300      	movs	r3, #0
 8009a86:	eba8 080a 	sub.w	r8, r8, sl
 8009a8a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a8c:	e7c2      	b.n	8009a14 <_dtoa_r+0x1d4>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9308      	str	r3, [sp, #32]
 8009a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dc39      	bgt.n	8009b0c <_dtoa_r+0x2cc>
 8009a98:	f04f 0901 	mov.w	r9, #1
 8009a9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009aa0:	464b      	mov	r3, r9
 8009aa2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009aa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	6042      	str	r2, [r0, #4]
 8009aac:	2204      	movs	r2, #4
 8009aae:	f102 0614 	add.w	r6, r2, #20
 8009ab2:	429e      	cmp	r6, r3
 8009ab4:	6841      	ldr	r1, [r0, #4]
 8009ab6:	d92f      	bls.n	8009b18 <_dtoa_r+0x2d8>
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f000 fd49 	bl	800a550 <_Balloc>
 8009abe:	9000      	str	r0, [sp, #0]
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d14b      	bne.n	8009b5c <_dtoa_r+0x31c>
 8009ac4:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <_dtoa_r+0x318>)
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009acc:	e6d1      	b.n	8009872 <_dtoa_r+0x32>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e7de      	b.n	8009a90 <_dtoa_r+0x250>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9308      	str	r3, [sp, #32]
 8009ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad8:	eb0a 0903 	add.w	r9, sl, r3
 8009adc:	f109 0301 	add.w	r3, r9, #1
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	bfb8      	it	lt
 8009ae6:	2301      	movlt	r3, #1
 8009ae8:	e7dd      	b.n	8009aa6 <_dtoa_r+0x266>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e7f2      	b.n	8009ad4 <_dtoa_r+0x294>
 8009aee:	2501      	movs	r5, #1
 8009af0:	2300      	movs	r3, #0
 8009af2:	9305      	str	r3, [sp, #20]
 8009af4:	9508      	str	r5, [sp, #32]
 8009af6:	f04f 39ff 	mov.w	r9, #4294967295
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b00:	2312      	movs	r3, #18
 8009b02:	9209      	str	r2, [sp, #36]	; 0x24
 8009b04:	e7cf      	b.n	8009aa6 <_dtoa_r+0x266>
 8009b06:	2301      	movs	r3, #1
 8009b08:	9308      	str	r3, [sp, #32]
 8009b0a:	e7f4      	b.n	8009af6 <_dtoa_r+0x2b6>
 8009b0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009b10:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b14:	464b      	mov	r3, r9
 8009b16:	e7c6      	b.n	8009aa6 <_dtoa_r+0x266>
 8009b18:	3101      	adds	r1, #1
 8009b1a:	6041      	str	r1, [r0, #4]
 8009b1c:	0052      	lsls	r2, r2, #1
 8009b1e:	e7c6      	b.n	8009aae <_dtoa_r+0x26e>
 8009b20:	636f4361 	.word	0x636f4361
 8009b24:	3fd287a7 	.word	0x3fd287a7
 8009b28:	8b60c8b3 	.word	0x8b60c8b3
 8009b2c:	3fc68a28 	.word	0x3fc68a28
 8009b30:	509f79fb 	.word	0x509f79fb
 8009b34:	3fd34413 	.word	0x3fd34413
 8009b38:	0800b239 	.word	0x0800b239
 8009b3c:	0800b250 	.word	0x0800b250
 8009b40:	7ff00000 	.word	0x7ff00000
 8009b44:	0800b235 	.word	0x0800b235
 8009b48:	0800b22c 	.word	0x0800b22c
 8009b4c:	0800b209 	.word	0x0800b209
 8009b50:	3ff80000 	.word	0x3ff80000
 8009b54:	0800b348 	.word	0x0800b348
 8009b58:	0800b2af 	.word	0x0800b2af
 8009b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b5e:	9a00      	ldr	r2, [sp, #0]
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	9b01      	ldr	r3, [sp, #4]
 8009b64:	2b0e      	cmp	r3, #14
 8009b66:	f200 80ad 	bhi.w	8009cc4 <_dtoa_r+0x484>
 8009b6a:	2d00      	cmp	r5, #0
 8009b6c:	f000 80aa 	beq.w	8009cc4 <_dtoa_r+0x484>
 8009b70:	f1ba 0f00 	cmp.w	sl, #0
 8009b74:	dd36      	ble.n	8009be4 <_dtoa_r+0x3a4>
 8009b76:	4ac3      	ldr	r2, [pc, #780]	; (8009e84 <_dtoa_r+0x644>)
 8009b78:	f00a 030f 	and.w	r3, sl, #15
 8009b7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b80:	ed93 7b00 	vldr	d7, [r3]
 8009b84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b8c:	eeb0 8a47 	vmov.f32	s16, s14
 8009b90:	eef0 8a67 	vmov.f32	s17, s15
 8009b94:	d016      	beq.n	8009bc4 <_dtoa_r+0x384>
 8009b96:	4bbc      	ldr	r3, [pc, #752]	; (8009e88 <_dtoa_r+0x648>)
 8009b98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ba0:	f7f6 fe74 	bl	800088c <__aeabi_ddiv>
 8009ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba8:	f007 070f 	and.w	r7, r7, #15
 8009bac:	2503      	movs	r5, #3
 8009bae:	4eb6      	ldr	r6, [pc, #728]	; (8009e88 <_dtoa_r+0x648>)
 8009bb0:	b957      	cbnz	r7, 8009bc8 <_dtoa_r+0x388>
 8009bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb6:	ec53 2b18 	vmov	r2, r3, d8
 8009bba:	f7f6 fe67 	bl	800088c <__aeabi_ddiv>
 8009bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bc2:	e029      	b.n	8009c18 <_dtoa_r+0x3d8>
 8009bc4:	2502      	movs	r5, #2
 8009bc6:	e7f2      	b.n	8009bae <_dtoa_r+0x36e>
 8009bc8:	07f9      	lsls	r1, r7, #31
 8009bca:	d508      	bpl.n	8009bde <_dtoa_r+0x39e>
 8009bcc:	ec51 0b18 	vmov	r0, r1, d8
 8009bd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bd4:	f7f6 fd30 	bl	8000638 <__aeabi_dmul>
 8009bd8:	ec41 0b18 	vmov	d8, r0, r1
 8009bdc:	3501      	adds	r5, #1
 8009bde:	107f      	asrs	r7, r7, #1
 8009be0:	3608      	adds	r6, #8
 8009be2:	e7e5      	b.n	8009bb0 <_dtoa_r+0x370>
 8009be4:	f000 80a6 	beq.w	8009d34 <_dtoa_r+0x4f4>
 8009be8:	f1ca 0600 	rsb	r6, sl, #0
 8009bec:	4ba5      	ldr	r3, [pc, #660]	; (8009e84 <_dtoa_r+0x644>)
 8009bee:	4fa6      	ldr	r7, [pc, #664]	; (8009e88 <_dtoa_r+0x648>)
 8009bf0:	f006 020f 	and.w	r2, r6, #15
 8009bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c00:	f7f6 fd1a 	bl	8000638 <__aeabi_dmul>
 8009c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c08:	1136      	asrs	r6, r6, #4
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2502      	movs	r5, #2
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	f040 8085 	bne.w	8009d1e <_dtoa_r+0x4de>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1d2      	bne.n	8009bbe <_dtoa_r+0x37e>
 8009c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f000 808c 	beq.w	8009d38 <_dtoa_r+0x4f8>
 8009c20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c24:	4b99      	ldr	r3, [pc, #612]	; (8009e8c <_dtoa_r+0x64c>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f6 ff76 	bl	8000b1c <__aeabi_dcmplt>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f000 8081 	beq.w	8009d38 <_dtoa_r+0x4f8>
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d07d      	beq.n	8009d38 <_dtoa_r+0x4f8>
 8009c3c:	f1b9 0f00 	cmp.w	r9, #0
 8009c40:	dd3c      	ble.n	8009cbc <_dtoa_r+0x47c>
 8009c42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c46:	9307      	str	r3, [sp, #28]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4b91      	ldr	r3, [pc, #580]	; (8009e90 <_dtoa_r+0x650>)
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	4639      	mov	r1, r7
 8009c50:	f7f6 fcf2 	bl	8000638 <__aeabi_dmul>
 8009c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c58:	3501      	adds	r5, #1
 8009c5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009c5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c62:	4628      	mov	r0, r5
 8009c64:	f7f6 fc7e 	bl	8000564 <__aeabi_i2d>
 8009c68:	4632      	mov	r2, r6
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	f7f6 fce4 	bl	8000638 <__aeabi_dmul>
 8009c70:	4b88      	ldr	r3, [pc, #544]	; (8009e94 <_dtoa_r+0x654>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	f7f6 fb2a 	bl	80002cc <__adddf3>
 8009c78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d15c      	bne.n	8009d42 <_dtoa_r+0x502>
 8009c88:	4b83      	ldr	r3, [pc, #524]	; (8009e98 <_dtoa_r+0x658>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fb1a 	bl	80002c8 <__aeabi_dsub>
 8009c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	f7f6 ff5c 	bl	8000b58 <__aeabi_dcmpgt>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	f040 8296 	bne.w	800a1d2 <_dtoa_r+0x992>
 8009ca6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009caa:	4630      	mov	r0, r6
 8009cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	f7f6 ff33 	bl	8000b1c <__aeabi_dcmplt>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f040 8288 	bne.w	800a1cc <_dtoa_r+0x98c>
 8009cbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f2c0 8158 	blt.w	8009f7c <_dtoa_r+0x73c>
 8009ccc:	f1ba 0f0e 	cmp.w	sl, #14
 8009cd0:	f300 8154 	bgt.w	8009f7c <_dtoa_r+0x73c>
 8009cd4:	4b6b      	ldr	r3, [pc, #428]	; (8009e84 <_dtoa_r+0x644>)
 8009cd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f280 80e3 	bge.w	8009eac <_dtoa_r+0x66c>
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f300 80df 	bgt.w	8009eac <_dtoa_r+0x66c>
 8009cee:	f040 826d 	bne.w	800a1cc <_dtoa_r+0x98c>
 8009cf2:	4b69      	ldr	r3, [pc, #420]	; (8009e98 <_dtoa_r+0x658>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	f7f6 fc9d 	bl	8000638 <__aeabi_dmul>
 8009cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d02:	f7f6 ff1f 	bl	8000b44 <__aeabi_dcmpge>
 8009d06:	9e01      	ldr	r6, [sp, #4]
 8009d08:	4637      	mov	r7, r6
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	f040 8243 	bne.w	800a196 <_dtoa_r+0x956>
 8009d10:	9d00      	ldr	r5, [sp, #0]
 8009d12:	2331      	movs	r3, #49	; 0x31
 8009d14:	f805 3b01 	strb.w	r3, [r5], #1
 8009d18:	f10a 0a01 	add.w	sl, sl, #1
 8009d1c:	e23f      	b.n	800a19e <_dtoa_r+0x95e>
 8009d1e:	07f2      	lsls	r2, r6, #31
 8009d20:	d505      	bpl.n	8009d2e <_dtoa_r+0x4ee>
 8009d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d26:	f7f6 fc87 	bl	8000638 <__aeabi_dmul>
 8009d2a:	3501      	adds	r5, #1
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	1076      	asrs	r6, r6, #1
 8009d30:	3708      	adds	r7, #8
 8009d32:	e76c      	b.n	8009c0e <_dtoa_r+0x3ce>
 8009d34:	2502      	movs	r5, #2
 8009d36:	e76f      	b.n	8009c18 <_dtoa_r+0x3d8>
 8009d38:	9b01      	ldr	r3, [sp, #4]
 8009d3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d40:	e78d      	b.n	8009c5e <_dtoa_r+0x41e>
 8009d42:	9900      	ldr	r1, [sp, #0]
 8009d44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d48:	4b4e      	ldr	r3, [pc, #312]	; (8009e84 <_dtoa_r+0x644>)
 8009d4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d4e:	4401      	add	r1, r0
 8009d50:	9102      	str	r1, [sp, #8]
 8009d52:	9908      	ldr	r1, [sp, #32]
 8009d54:	eeb0 8a47 	vmov.f32	s16, s14
 8009d58:	eef0 8a67 	vmov.f32	s17, s15
 8009d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d64:	2900      	cmp	r1, #0
 8009d66:	d045      	beq.n	8009df4 <_dtoa_r+0x5b4>
 8009d68:	494c      	ldr	r1, [pc, #304]	; (8009e9c <_dtoa_r+0x65c>)
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	f7f6 fd8e 	bl	800088c <__aeabi_ddiv>
 8009d70:	ec53 2b18 	vmov	r2, r3, d8
 8009d74:	f7f6 faa8 	bl	80002c8 <__aeabi_dsub>
 8009d78:	9d00      	ldr	r5, [sp, #0]
 8009d7a:	ec41 0b18 	vmov	d8, r0, r1
 8009d7e:	4639      	mov	r1, r7
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7f6 ff09 	bl	8000b98 <__aeabi_d2iz>
 8009d86:	900c      	str	r0, [sp, #48]	; 0x30
 8009d88:	f7f6 fbec 	bl	8000564 <__aeabi_i2d>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4630      	mov	r0, r6
 8009d92:	4639      	mov	r1, r7
 8009d94:	f7f6 fa98 	bl	80002c8 <__aeabi_dsub>
 8009d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d9a:	3330      	adds	r3, #48	; 0x30
 8009d9c:	f805 3b01 	strb.w	r3, [r5], #1
 8009da0:	ec53 2b18 	vmov	r2, r3, d8
 8009da4:	4606      	mov	r6, r0
 8009da6:	460f      	mov	r7, r1
 8009da8:	f7f6 feb8 	bl	8000b1c <__aeabi_dcmplt>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d165      	bne.n	8009e7c <_dtoa_r+0x63c>
 8009db0:	4632      	mov	r2, r6
 8009db2:	463b      	mov	r3, r7
 8009db4:	4935      	ldr	r1, [pc, #212]	; (8009e8c <_dtoa_r+0x64c>)
 8009db6:	2000      	movs	r0, #0
 8009db8:	f7f6 fa86 	bl	80002c8 <__aeabi_dsub>
 8009dbc:	ec53 2b18 	vmov	r2, r3, d8
 8009dc0:	f7f6 feac 	bl	8000b1c <__aeabi_dcmplt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f040 80b9 	bne.w	8009f3c <_dtoa_r+0x6fc>
 8009dca:	9b02      	ldr	r3, [sp, #8]
 8009dcc:	429d      	cmp	r5, r3
 8009dce:	f43f af75 	beq.w	8009cbc <_dtoa_r+0x47c>
 8009dd2:	4b2f      	ldr	r3, [pc, #188]	; (8009e90 <_dtoa_r+0x650>)
 8009dd4:	ec51 0b18 	vmov	r0, r1, d8
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f7f6 fc2d 	bl	8000638 <__aeabi_dmul>
 8009dde:	4b2c      	ldr	r3, [pc, #176]	; (8009e90 <_dtoa_r+0x650>)
 8009de0:	ec41 0b18 	vmov	d8, r0, r1
 8009de4:	2200      	movs	r2, #0
 8009de6:	4630      	mov	r0, r6
 8009de8:	4639      	mov	r1, r7
 8009dea:	f7f6 fc25 	bl	8000638 <__aeabi_dmul>
 8009dee:	4606      	mov	r6, r0
 8009df0:	460f      	mov	r7, r1
 8009df2:	e7c4      	b.n	8009d7e <_dtoa_r+0x53e>
 8009df4:	ec51 0b17 	vmov	r0, r1, d7
 8009df8:	f7f6 fc1e 	bl	8000638 <__aeabi_dmul>
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	9d00      	ldr	r5, [sp, #0]
 8009e00:	930c      	str	r3, [sp, #48]	; 0x30
 8009e02:	ec41 0b18 	vmov	d8, r0, r1
 8009e06:	4639      	mov	r1, r7
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7f6 fec5 	bl	8000b98 <__aeabi_d2iz>
 8009e0e:	9011      	str	r0, [sp, #68]	; 0x44
 8009e10:	f7f6 fba8 	bl	8000564 <__aeabi_i2d>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4630      	mov	r0, r6
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 fa54 	bl	80002c8 <__aeabi_dsub>
 8009e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e22:	3330      	adds	r3, #48	; 0x30
 8009e24:	f805 3b01 	strb.w	r3, [r5], #1
 8009e28:	9b02      	ldr	r3, [sp, #8]
 8009e2a:	429d      	cmp	r5, r3
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	460f      	mov	r7, r1
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	d134      	bne.n	8009ea0 <_dtoa_r+0x660>
 8009e36:	4b19      	ldr	r3, [pc, #100]	; (8009e9c <_dtoa_r+0x65c>)
 8009e38:	ec51 0b18 	vmov	r0, r1, d8
 8009e3c:	f7f6 fa46 	bl	80002cc <__adddf3>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4630      	mov	r0, r6
 8009e46:	4639      	mov	r1, r7
 8009e48:	f7f6 fe86 	bl	8000b58 <__aeabi_dcmpgt>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d175      	bne.n	8009f3c <_dtoa_r+0x6fc>
 8009e50:	ec53 2b18 	vmov	r2, r3, d8
 8009e54:	4911      	ldr	r1, [pc, #68]	; (8009e9c <_dtoa_r+0x65c>)
 8009e56:	2000      	movs	r0, #0
 8009e58:	f7f6 fa36 	bl	80002c8 <__aeabi_dsub>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fe5a 	bl	8000b1c <__aeabi_dcmplt>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	f43f af27 	beq.w	8009cbc <_dtoa_r+0x47c>
 8009e6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e70:	1e6b      	subs	r3, r5, #1
 8009e72:	930c      	str	r3, [sp, #48]	; 0x30
 8009e74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e78:	2b30      	cmp	r3, #48	; 0x30
 8009e7a:	d0f8      	beq.n	8009e6e <_dtoa_r+0x62e>
 8009e7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e80:	e04a      	b.n	8009f18 <_dtoa_r+0x6d8>
 8009e82:	bf00      	nop
 8009e84:	0800b348 	.word	0x0800b348
 8009e88:	0800b320 	.word	0x0800b320
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	40240000 	.word	0x40240000
 8009e94:	401c0000 	.word	0x401c0000
 8009e98:	40140000 	.word	0x40140000
 8009e9c:	3fe00000 	.word	0x3fe00000
 8009ea0:	4baf      	ldr	r3, [pc, #700]	; (800a160 <_dtoa_r+0x920>)
 8009ea2:	f7f6 fbc9 	bl	8000638 <__aeabi_dmul>
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460f      	mov	r7, r1
 8009eaa:	e7ac      	b.n	8009e06 <_dtoa_r+0x5c6>
 8009eac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009eb0:	9d00      	ldr	r5, [sp, #0]
 8009eb2:	4642      	mov	r2, r8
 8009eb4:	464b      	mov	r3, r9
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fce7 	bl	800088c <__aeabi_ddiv>
 8009ebe:	f7f6 fe6b 	bl	8000b98 <__aeabi_d2iz>
 8009ec2:	9002      	str	r0, [sp, #8]
 8009ec4:	f7f6 fb4e 	bl	8000564 <__aeabi_i2d>
 8009ec8:	4642      	mov	r2, r8
 8009eca:	464b      	mov	r3, r9
 8009ecc:	f7f6 fbb4 	bl	8000638 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	f7f6 f9f6 	bl	80002c8 <__aeabi_dsub>
 8009edc:	9e02      	ldr	r6, [sp, #8]
 8009ede:	9f01      	ldr	r7, [sp, #4]
 8009ee0:	3630      	adds	r6, #48	; 0x30
 8009ee2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ee6:	9e00      	ldr	r6, [sp, #0]
 8009ee8:	1bae      	subs	r6, r5, r6
 8009eea:	42b7      	cmp	r7, r6
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	d137      	bne.n	8009f62 <_dtoa_r+0x722>
 8009ef2:	f7f6 f9eb 	bl	80002cc <__adddf3>
 8009ef6:	4642      	mov	r2, r8
 8009ef8:	464b      	mov	r3, r9
 8009efa:	4606      	mov	r6, r0
 8009efc:	460f      	mov	r7, r1
 8009efe:	f7f6 fe2b 	bl	8000b58 <__aeabi_dcmpgt>
 8009f02:	b9c8      	cbnz	r0, 8009f38 <_dtoa_r+0x6f8>
 8009f04:	4642      	mov	r2, r8
 8009f06:	464b      	mov	r3, r9
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f7f6 fdfc 	bl	8000b08 <__aeabi_dcmpeq>
 8009f10:	b110      	cbz	r0, 8009f18 <_dtoa_r+0x6d8>
 8009f12:	9b02      	ldr	r3, [sp, #8]
 8009f14:	07d9      	lsls	r1, r3, #31
 8009f16:	d40f      	bmi.n	8009f38 <_dtoa_r+0x6f8>
 8009f18:	4620      	mov	r0, r4
 8009f1a:	4659      	mov	r1, fp
 8009f1c:	f000 fb58 	bl	800a5d0 <_Bfree>
 8009f20:	2300      	movs	r3, #0
 8009f22:	702b      	strb	r3, [r5, #0]
 8009f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f26:	f10a 0001 	add.w	r0, sl, #1
 8009f2a:	6018      	str	r0, [r3, #0]
 8009f2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f43f acd8 	beq.w	80098e4 <_dtoa_r+0xa4>
 8009f34:	601d      	str	r5, [r3, #0]
 8009f36:	e4d5      	b.n	80098e4 <_dtoa_r+0xa4>
 8009f38:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f3c:	462b      	mov	r3, r5
 8009f3e:	461d      	mov	r5, r3
 8009f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f44:	2a39      	cmp	r2, #57	; 0x39
 8009f46:	d108      	bne.n	8009f5a <_dtoa_r+0x71a>
 8009f48:	9a00      	ldr	r2, [sp, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d1f7      	bne.n	8009f3e <_dtoa_r+0x6fe>
 8009f4e:	9a07      	ldr	r2, [sp, #28]
 8009f50:	9900      	ldr	r1, [sp, #0]
 8009f52:	3201      	adds	r2, #1
 8009f54:	9207      	str	r2, [sp, #28]
 8009f56:	2230      	movs	r2, #48	; 0x30
 8009f58:	700a      	strb	r2, [r1, #0]
 8009f5a:	781a      	ldrb	r2, [r3, #0]
 8009f5c:	3201      	adds	r2, #1
 8009f5e:	701a      	strb	r2, [r3, #0]
 8009f60:	e78c      	b.n	8009e7c <_dtoa_r+0x63c>
 8009f62:	4b7f      	ldr	r3, [pc, #508]	; (800a160 <_dtoa_r+0x920>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	f7f6 fb67 	bl	8000638 <__aeabi_dmul>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	f7f6 fdc9 	bl	8000b08 <__aeabi_dcmpeq>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d09b      	beq.n	8009eb2 <_dtoa_r+0x672>
 8009f7a:	e7cd      	b.n	8009f18 <_dtoa_r+0x6d8>
 8009f7c:	9a08      	ldr	r2, [sp, #32]
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	f000 80c4 	beq.w	800a10c <_dtoa_r+0x8cc>
 8009f84:	9a05      	ldr	r2, [sp, #20]
 8009f86:	2a01      	cmp	r2, #1
 8009f88:	f300 80a8 	bgt.w	800a0dc <_dtoa_r+0x89c>
 8009f8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	f000 80a0 	beq.w	800a0d4 <_dtoa_r+0x894>
 8009f94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f98:	9e06      	ldr	r6, [sp, #24]
 8009f9a:	4645      	mov	r5, r8
 8009f9c:	9a04      	ldr	r2, [sp, #16]
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	441a      	add	r2, r3
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4498      	add	r8, r3
 8009fa6:	9204      	str	r2, [sp, #16]
 8009fa8:	f000 fbce 	bl	800a748 <__i2b>
 8009fac:	4607      	mov	r7, r0
 8009fae:	2d00      	cmp	r5, #0
 8009fb0:	dd0b      	ble.n	8009fca <_dtoa_r+0x78a>
 8009fb2:	9b04      	ldr	r3, [sp, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	dd08      	ble.n	8009fca <_dtoa_r+0x78a>
 8009fb8:	42ab      	cmp	r3, r5
 8009fba:	9a04      	ldr	r2, [sp, #16]
 8009fbc:	bfa8      	it	ge
 8009fbe:	462b      	movge	r3, r5
 8009fc0:	eba8 0803 	sub.w	r8, r8, r3
 8009fc4:	1aed      	subs	r5, r5, r3
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	9304      	str	r3, [sp, #16]
 8009fca:	9b06      	ldr	r3, [sp, #24]
 8009fcc:	b1fb      	cbz	r3, 800a00e <_dtoa_r+0x7ce>
 8009fce:	9b08      	ldr	r3, [sp, #32]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 809f 	beq.w	800a114 <_dtoa_r+0x8d4>
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	dd11      	ble.n	8009ffe <_dtoa_r+0x7be>
 8009fda:	4639      	mov	r1, r7
 8009fdc:	4632      	mov	r2, r6
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fc6e 	bl	800a8c0 <__pow5mult>
 8009fe4:	465a      	mov	r2, fp
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	4607      	mov	r7, r0
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 fbc2 	bl	800a774 <__multiply>
 8009ff0:	4659      	mov	r1, fp
 8009ff2:	9007      	str	r0, [sp, #28]
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 faeb 	bl	800a5d0 <_Bfree>
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	469b      	mov	fp, r3
 8009ffe:	9b06      	ldr	r3, [sp, #24]
 800a000:	1b9a      	subs	r2, r3, r6
 800a002:	d004      	beq.n	800a00e <_dtoa_r+0x7ce>
 800a004:	4659      	mov	r1, fp
 800a006:	4620      	mov	r0, r4
 800a008:	f000 fc5a 	bl	800a8c0 <__pow5mult>
 800a00c:	4683      	mov	fp, r0
 800a00e:	2101      	movs	r1, #1
 800a010:	4620      	mov	r0, r4
 800a012:	f000 fb99 	bl	800a748 <__i2b>
 800a016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a018:	2b00      	cmp	r3, #0
 800a01a:	4606      	mov	r6, r0
 800a01c:	dd7c      	ble.n	800a118 <_dtoa_r+0x8d8>
 800a01e:	461a      	mov	r2, r3
 800a020:	4601      	mov	r1, r0
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fc4c 	bl	800a8c0 <__pow5mult>
 800a028:	9b05      	ldr	r3, [sp, #20]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	4606      	mov	r6, r0
 800a02e:	dd76      	ble.n	800a11e <_dtoa_r+0x8de>
 800a030:	2300      	movs	r3, #0
 800a032:	9306      	str	r3, [sp, #24]
 800a034:	6933      	ldr	r3, [r6, #16]
 800a036:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a03a:	6918      	ldr	r0, [r3, #16]
 800a03c:	f000 fb34 	bl	800a6a8 <__hi0bits>
 800a040:	f1c0 0020 	rsb	r0, r0, #32
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	4418      	add	r0, r3
 800a048:	f010 001f 	ands.w	r0, r0, #31
 800a04c:	f000 8086 	beq.w	800a15c <_dtoa_r+0x91c>
 800a050:	f1c0 0320 	rsb	r3, r0, #32
 800a054:	2b04      	cmp	r3, #4
 800a056:	dd7f      	ble.n	800a158 <_dtoa_r+0x918>
 800a058:	f1c0 001c 	rsb	r0, r0, #28
 800a05c:	9b04      	ldr	r3, [sp, #16]
 800a05e:	4403      	add	r3, r0
 800a060:	4480      	add	r8, r0
 800a062:	4405      	add	r5, r0
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	f1b8 0f00 	cmp.w	r8, #0
 800a06a:	dd05      	ble.n	800a078 <_dtoa_r+0x838>
 800a06c:	4659      	mov	r1, fp
 800a06e:	4642      	mov	r2, r8
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fc7f 	bl	800a974 <__lshift>
 800a076:	4683      	mov	fp, r0
 800a078:	9b04      	ldr	r3, [sp, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	dd05      	ble.n	800a08a <_dtoa_r+0x84a>
 800a07e:	4631      	mov	r1, r6
 800a080:	461a      	mov	r2, r3
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fc76 	bl	800a974 <__lshift>
 800a088:	4606      	mov	r6, r0
 800a08a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d069      	beq.n	800a164 <_dtoa_r+0x924>
 800a090:	4631      	mov	r1, r6
 800a092:	4658      	mov	r0, fp
 800a094:	f000 fcda 	bl	800aa4c <__mcmp>
 800a098:	2800      	cmp	r0, #0
 800a09a:	da63      	bge.n	800a164 <_dtoa_r+0x924>
 800a09c:	2300      	movs	r3, #0
 800a09e:	4659      	mov	r1, fp
 800a0a0:	220a      	movs	r2, #10
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 fab6 	bl	800a614 <__multadd>
 800a0a8:	9b08      	ldr	r3, [sp, #32]
 800a0aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ae:	4683      	mov	fp, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 818f 	beq.w	800a3d4 <_dtoa_r+0xb94>
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	220a      	movs	r2, #10
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 faa9 	bl	800a614 <__multadd>
 800a0c2:	f1b9 0f00 	cmp.w	r9, #0
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	f300 808e 	bgt.w	800a1e8 <_dtoa_r+0x9a8>
 800a0cc:	9b05      	ldr	r3, [sp, #20]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	dc50      	bgt.n	800a174 <_dtoa_r+0x934>
 800a0d2:	e089      	b.n	800a1e8 <_dtoa_r+0x9a8>
 800a0d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0da:	e75d      	b.n	8009f98 <_dtoa_r+0x758>
 800a0dc:	9b01      	ldr	r3, [sp, #4]
 800a0de:	1e5e      	subs	r6, r3, #1
 800a0e0:	9b06      	ldr	r3, [sp, #24]
 800a0e2:	42b3      	cmp	r3, r6
 800a0e4:	bfbf      	itttt	lt
 800a0e6:	9b06      	ldrlt	r3, [sp, #24]
 800a0e8:	9606      	strlt	r6, [sp, #24]
 800a0ea:	1af2      	sublt	r2, r6, r3
 800a0ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a0ee:	bfb6      	itet	lt
 800a0f0:	189b      	addlt	r3, r3, r2
 800a0f2:	1b9e      	subge	r6, r3, r6
 800a0f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	bfb8      	it	lt
 800a0fa:	2600      	movlt	r6, #0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	bfb5      	itete	lt
 800a100:	eba8 0503 	sublt.w	r5, r8, r3
 800a104:	9b01      	ldrge	r3, [sp, #4]
 800a106:	2300      	movlt	r3, #0
 800a108:	4645      	movge	r5, r8
 800a10a:	e747      	b.n	8009f9c <_dtoa_r+0x75c>
 800a10c:	9e06      	ldr	r6, [sp, #24]
 800a10e:	9f08      	ldr	r7, [sp, #32]
 800a110:	4645      	mov	r5, r8
 800a112:	e74c      	b.n	8009fae <_dtoa_r+0x76e>
 800a114:	9a06      	ldr	r2, [sp, #24]
 800a116:	e775      	b.n	800a004 <_dtoa_r+0x7c4>
 800a118:	9b05      	ldr	r3, [sp, #20]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	dc18      	bgt.n	800a150 <_dtoa_r+0x910>
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	b9b3      	cbnz	r3, 800a150 <_dtoa_r+0x910>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a128:	b9a3      	cbnz	r3, 800a154 <_dtoa_r+0x914>
 800a12a:	9b03      	ldr	r3, [sp, #12]
 800a12c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a130:	0d1b      	lsrs	r3, r3, #20
 800a132:	051b      	lsls	r3, r3, #20
 800a134:	b12b      	cbz	r3, 800a142 <_dtoa_r+0x902>
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	3301      	adds	r3, #1
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	f108 0801 	add.w	r8, r8, #1
 800a140:	2301      	movs	r3, #1
 800a142:	9306      	str	r3, [sp, #24]
 800a144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a146:	2b00      	cmp	r3, #0
 800a148:	f47f af74 	bne.w	800a034 <_dtoa_r+0x7f4>
 800a14c:	2001      	movs	r0, #1
 800a14e:	e779      	b.n	800a044 <_dtoa_r+0x804>
 800a150:	2300      	movs	r3, #0
 800a152:	e7f6      	b.n	800a142 <_dtoa_r+0x902>
 800a154:	9b02      	ldr	r3, [sp, #8]
 800a156:	e7f4      	b.n	800a142 <_dtoa_r+0x902>
 800a158:	d085      	beq.n	800a066 <_dtoa_r+0x826>
 800a15a:	4618      	mov	r0, r3
 800a15c:	301c      	adds	r0, #28
 800a15e:	e77d      	b.n	800a05c <_dtoa_r+0x81c>
 800a160:	40240000 	.word	0x40240000
 800a164:	9b01      	ldr	r3, [sp, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	dc38      	bgt.n	800a1dc <_dtoa_r+0x99c>
 800a16a:	9b05      	ldr	r3, [sp, #20]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	dd35      	ble.n	800a1dc <_dtoa_r+0x99c>
 800a170:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a174:	f1b9 0f00 	cmp.w	r9, #0
 800a178:	d10d      	bne.n	800a196 <_dtoa_r+0x956>
 800a17a:	4631      	mov	r1, r6
 800a17c:	464b      	mov	r3, r9
 800a17e:	2205      	movs	r2, #5
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fa47 	bl	800a614 <__multadd>
 800a186:	4601      	mov	r1, r0
 800a188:	4606      	mov	r6, r0
 800a18a:	4658      	mov	r0, fp
 800a18c:	f000 fc5e 	bl	800aa4c <__mcmp>
 800a190:	2800      	cmp	r0, #0
 800a192:	f73f adbd 	bgt.w	8009d10 <_dtoa_r+0x4d0>
 800a196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a198:	9d00      	ldr	r5, [sp, #0]
 800a19a:	ea6f 0a03 	mvn.w	sl, r3
 800a19e:	f04f 0800 	mov.w	r8, #0
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 fa13 	bl	800a5d0 <_Bfree>
 800a1aa:	2f00      	cmp	r7, #0
 800a1ac:	f43f aeb4 	beq.w	8009f18 <_dtoa_r+0x6d8>
 800a1b0:	f1b8 0f00 	cmp.w	r8, #0
 800a1b4:	d005      	beq.n	800a1c2 <_dtoa_r+0x982>
 800a1b6:	45b8      	cmp	r8, r7
 800a1b8:	d003      	beq.n	800a1c2 <_dtoa_r+0x982>
 800a1ba:	4641      	mov	r1, r8
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 fa07 	bl	800a5d0 <_Bfree>
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fa03 	bl	800a5d0 <_Bfree>
 800a1ca:	e6a5      	b.n	8009f18 <_dtoa_r+0x6d8>
 800a1cc:	2600      	movs	r6, #0
 800a1ce:	4637      	mov	r7, r6
 800a1d0:	e7e1      	b.n	800a196 <_dtoa_r+0x956>
 800a1d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a1d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a1d8:	4637      	mov	r7, r6
 800a1da:	e599      	b.n	8009d10 <_dtoa_r+0x4d0>
 800a1dc:	9b08      	ldr	r3, [sp, #32]
 800a1de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 80fd 	beq.w	800a3e2 <_dtoa_r+0xba2>
 800a1e8:	2d00      	cmp	r5, #0
 800a1ea:	dd05      	ble.n	800a1f8 <_dtoa_r+0x9b8>
 800a1ec:	4639      	mov	r1, r7
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fbbf 	bl	800a974 <__lshift>
 800a1f6:	4607      	mov	r7, r0
 800a1f8:	9b06      	ldr	r3, [sp, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d05c      	beq.n	800a2b8 <_dtoa_r+0xa78>
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4620      	mov	r0, r4
 800a202:	f000 f9a5 	bl	800a550 <_Balloc>
 800a206:	4605      	mov	r5, r0
 800a208:	b928      	cbnz	r0, 800a216 <_dtoa_r+0x9d6>
 800a20a:	4b80      	ldr	r3, [pc, #512]	; (800a40c <_dtoa_r+0xbcc>)
 800a20c:	4602      	mov	r2, r0
 800a20e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a212:	f7ff bb2e 	b.w	8009872 <_dtoa_r+0x32>
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	3202      	adds	r2, #2
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	f107 010c 	add.w	r1, r7, #12
 800a220:	300c      	adds	r0, #12
 800a222:	f000 f97b 	bl	800a51c <memcpy>
 800a226:	2201      	movs	r2, #1
 800a228:	4629      	mov	r1, r5
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fba2 	bl	800a974 <__lshift>
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	9b00      	ldr	r3, [sp, #0]
 800a238:	444b      	add	r3, r9
 800a23a:	9307      	str	r3, [sp, #28]
 800a23c:	9b02      	ldr	r3, [sp, #8]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	46b8      	mov	r8, r7
 800a244:	9306      	str	r3, [sp, #24]
 800a246:	4607      	mov	r7, r0
 800a248:	9b01      	ldr	r3, [sp, #4]
 800a24a:	4631      	mov	r1, r6
 800a24c:	3b01      	subs	r3, #1
 800a24e:	4658      	mov	r0, fp
 800a250:	9302      	str	r3, [sp, #8]
 800a252:	f7ff fa69 	bl	8009728 <quorem>
 800a256:	4603      	mov	r3, r0
 800a258:	3330      	adds	r3, #48	; 0x30
 800a25a:	9004      	str	r0, [sp, #16]
 800a25c:	4641      	mov	r1, r8
 800a25e:	4658      	mov	r0, fp
 800a260:	9308      	str	r3, [sp, #32]
 800a262:	f000 fbf3 	bl	800aa4c <__mcmp>
 800a266:	463a      	mov	r2, r7
 800a268:	4681      	mov	r9, r0
 800a26a:	4631      	mov	r1, r6
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fc09 	bl	800aa84 <__mdiff>
 800a272:	68c2      	ldr	r2, [r0, #12]
 800a274:	9b08      	ldr	r3, [sp, #32]
 800a276:	4605      	mov	r5, r0
 800a278:	bb02      	cbnz	r2, 800a2bc <_dtoa_r+0xa7c>
 800a27a:	4601      	mov	r1, r0
 800a27c:	4658      	mov	r0, fp
 800a27e:	f000 fbe5 	bl	800aa4c <__mcmp>
 800a282:	9b08      	ldr	r3, [sp, #32]
 800a284:	4602      	mov	r2, r0
 800a286:	4629      	mov	r1, r5
 800a288:	4620      	mov	r0, r4
 800a28a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a28e:	f000 f99f 	bl	800a5d0 <_Bfree>
 800a292:	9b05      	ldr	r3, [sp, #20]
 800a294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a296:	9d01      	ldr	r5, [sp, #4]
 800a298:	ea43 0102 	orr.w	r1, r3, r2
 800a29c:	9b06      	ldr	r3, [sp, #24]
 800a29e:	430b      	orrs	r3, r1
 800a2a0:	9b08      	ldr	r3, [sp, #32]
 800a2a2:	d10d      	bne.n	800a2c0 <_dtoa_r+0xa80>
 800a2a4:	2b39      	cmp	r3, #57	; 0x39
 800a2a6:	d029      	beq.n	800a2fc <_dtoa_r+0xabc>
 800a2a8:	f1b9 0f00 	cmp.w	r9, #0
 800a2ac:	dd01      	ble.n	800a2b2 <_dtoa_r+0xa72>
 800a2ae:	9b04      	ldr	r3, [sp, #16]
 800a2b0:	3331      	adds	r3, #49	; 0x31
 800a2b2:	9a02      	ldr	r2, [sp, #8]
 800a2b4:	7013      	strb	r3, [r2, #0]
 800a2b6:	e774      	b.n	800a1a2 <_dtoa_r+0x962>
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	e7b9      	b.n	800a230 <_dtoa_r+0x9f0>
 800a2bc:	2201      	movs	r2, #1
 800a2be:	e7e2      	b.n	800a286 <_dtoa_r+0xa46>
 800a2c0:	f1b9 0f00 	cmp.w	r9, #0
 800a2c4:	db06      	blt.n	800a2d4 <_dtoa_r+0xa94>
 800a2c6:	9905      	ldr	r1, [sp, #20]
 800a2c8:	ea41 0909 	orr.w	r9, r1, r9
 800a2cc:	9906      	ldr	r1, [sp, #24]
 800a2ce:	ea59 0101 	orrs.w	r1, r9, r1
 800a2d2:	d120      	bne.n	800a316 <_dtoa_r+0xad6>
 800a2d4:	2a00      	cmp	r2, #0
 800a2d6:	ddec      	ble.n	800a2b2 <_dtoa_r+0xa72>
 800a2d8:	4659      	mov	r1, fp
 800a2da:	2201      	movs	r2, #1
 800a2dc:	4620      	mov	r0, r4
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	f000 fb48 	bl	800a974 <__lshift>
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4683      	mov	fp, r0
 800a2e8:	f000 fbb0 	bl	800aa4c <__mcmp>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	9b01      	ldr	r3, [sp, #4]
 800a2f0:	dc02      	bgt.n	800a2f8 <_dtoa_r+0xab8>
 800a2f2:	d1de      	bne.n	800a2b2 <_dtoa_r+0xa72>
 800a2f4:	07da      	lsls	r2, r3, #31
 800a2f6:	d5dc      	bpl.n	800a2b2 <_dtoa_r+0xa72>
 800a2f8:	2b39      	cmp	r3, #57	; 0x39
 800a2fa:	d1d8      	bne.n	800a2ae <_dtoa_r+0xa6e>
 800a2fc:	9a02      	ldr	r2, [sp, #8]
 800a2fe:	2339      	movs	r3, #57	; 0x39
 800a300:	7013      	strb	r3, [r2, #0]
 800a302:	462b      	mov	r3, r5
 800a304:	461d      	mov	r5, r3
 800a306:	3b01      	subs	r3, #1
 800a308:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a30c:	2a39      	cmp	r2, #57	; 0x39
 800a30e:	d050      	beq.n	800a3b2 <_dtoa_r+0xb72>
 800a310:	3201      	adds	r2, #1
 800a312:	701a      	strb	r2, [r3, #0]
 800a314:	e745      	b.n	800a1a2 <_dtoa_r+0x962>
 800a316:	2a00      	cmp	r2, #0
 800a318:	dd03      	ble.n	800a322 <_dtoa_r+0xae2>
 800a31a:	2b39      	cmp	r3, #57	; 0x39
 800a31c:	d0ee      	beq.n	800a2fc <_dtoa_r+0xabc>
 800a31e:	3301      	adds	r3, #1
 800a320:	e7c7      	b.n	800a2b2 <_dtoa_r+0xa72>
 800a322:	9a01      	ldr	r2, [sp, #4]
 800a324:	9907      	ldr	r1, [sp, #28]
 800a326:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a32a:	428a      	cmp	r2, r1
 800a32c:	d02a      	beq.n	800a384 <_dtoa_r+0xb44>
 800a32e:	4659      	mov	r1, fp
 800a330:	2300      	movs	r3, #0
 800a332:	220a      	movs	r2, #10
 800a334:	4620      	mov	r0, r4
 800a336:	f000 f96d 	bl	800a614 <__multadd>
 800a33a:	45b8      	cmp	r8, r7
 800a33c:	4683      	mov	fp, r0
 800a33e:	f04f 0300 	mov.w	r3, #0
 800a342:	f04f 020a 	mov.w	r2, #10
 800a346:	4641      	mov	r1, r8
 800a348:	4620      	mov	r0, r4
 800a34a:	d107      	bne.n	800a35c <_dtoa_r+0xb1c>
 800a34c:	f000 f962 	bl	800a614 <__multadd>
 800a350:	4680      	mov	r8, r0
 800a352:	4607      	mov	r7, r0
 800a354:	9b01      	ldr	r3, [sp, #4]
 800a356:	3301      	adds	r3, #1
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	e775      	b.n	800a248 <_dtoa_r+0xa08>
 800a35c:	f000 f95a 	bl	800a614 <__multadd>
 800a360:	4639      	mov	r1, r7
 800a362:	4680      	mov	r8, r0
 800a364:	2300      	movs	r3, #0
 800a366:	220a      	movs	r2, #10
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 f953 	bl	800a614 <__multadd>
 800a36e:	4607      	mov	r7, r0
 800a370:	e7f0      	b.n	800a354 <_dtoa_r+0xb14>
 800a372:	f1b9 0f00 	cmp.w	r9, #0
 800a376:	9a00      	ldr	r2, [sp, #0]
 800a378:	bfcc      	ite	gt
 800a37a:	464d      	movgt	r5, r9
 800a37c:	2501      	movle	r5, #1
 800a37e:	4415      	add	r5, r2
 800a380:	f04f 0800 	mov.w	r8, #0
 800a384:	4659      	mov	r1, fp
 800a386:	2201      	movs	r2, #1
 800a388:	4620      	mov	r0, r4
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	f000 faf2 	bl	800a974 <__lshift>
 800a390:	4631      	mov	r1, r6
 800a392:	4683      	mov	fp, r0
 800a394:	f000 fb5a 	bl	800aa4c <__mcmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	dcb2      	bgt.n	800a302 <_dtoa_r+0xac2>
 800a39c:	d102      	bne.n	800a3a4 <_dtoa_r+0xb64>
 800a39e:	9b01      	ldr	r3, [sp, #4]
 800a3a0:	07db      	lsls	r3, r3, #31
 800a3a2:	d4ae      	bmi.n	800a302 <_dtoa_r+0xac2>
 800a3a4:	462b      	mov	r3, r5
 800a3a6:	461d      	mov	r5, r3
 800a3a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ac:	2a30      	cmp	r2, #48	; 0x30
 800a3ae:	d0fa      	beq.n	800a3a6 <_dtoa_r+0xb66>
 800a3b0:	e6f7      	b.n	800a1a2 <_dtoa_r+0x962>
 800a3b2:	9a00      	ldr	r2, [sp, #0]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d1a5      	bne.n	800a304 <_dtoa_r+0xac4>
 800a3b8:	f10a 0a01 	add.w	sl, sl, #1
 800a3bc:	2331      	movs	r3, #49	; 0x31
 800a3be:	e779      	b.n	800a2b4 <_dtoa_r+0xa74>
 800a3c0:	4b13      	ldr	r3, [pc, #76]	; (800a410 <_dtoa_r+0xbd0>)
 800a3c2:	f7ff baaf 	b.w	8009924 <_dtoa_r+0xe4>
 800a3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f47f aa86 	bne.w	80098da <_dtoa_r+0x9a>
 800a3ce:	4b11      	ldr	r3, [pc, #68]	; (800a414 <_dtoa_r+0xbd4>)
 800a3d0:	f7ff baa8 	b.w	8009924 <_dtoa_r+0xe4>
 800a3d4:	f1b9 0f00 	cmp.w	r9, #0
 800a3d8:	dc03      	bgt.n	800a3e2 <_dtoa_r+0xba2>
 800a3da:	9b05      	ldr	r3, [sp, #20]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	f73f aec9 	bgt.w	800a174 <_dtoa_r+0x934>
 800a3e2:	9d00      	ldr	r5, [sp, #0]
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4658      	mov	r0, fp
 800a3e8:	f7ff f99e 	bl	8009728 <quorem>
 800a3ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3f4:	9a00      	ldr	r2, [sp, #0]
 800a3f6:	1aaa      	subs	r2, r5, r2
 800a3f8:	4591      	cmp	r9, r2
 800a3fa:	ddba      	ble.n	800a372 <_dtoa_r+0xb32>
 800a3fc:	4659      	mov	r1, fp
 800a3fe:	2300      	movs	r3, #0
 800a400:	220a      	movs	r2, #10
 800a402:	4620      	mov	r0, r4
 800a404:	f000 f906 	bl	800a614 <__multadd>
 800a408:	4683      	mov	fp, r0
 800a40a:	e7eb      	b.n	800a3e4 <_dtoa_r+0xba4>
 800a40c:	0800b2af 	.word	0x0800b2af
 800a410:	0800b208 	.word	0x0800b208
 800a414:	0800b22c 	.word	0x0800b22c

0800a418 <_localeconv_r>:
 800a418:	4800      	ldr	r0, [pc, #0]	; (800a41c <_localeconv_r+0x4>)
 800a41a:	4770      	bx	lr
 800a41c:	20000178 	.word	0x20000178

0800a420 <_lseek_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d07      	ldr	r5, [pc, #28]	; (800a440 <_lseek_r+0x20>)
 800a424:	4604      	mov	r4, r0
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	602a      	str	r2, [r5, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7f8 fc62 	bl	8002cf8 <_lseek>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_lseek_r+0x1e>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_lseek_r+0x1e>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20004ac8 	.word	0x20004ac8

0800a444 <__swhatbuf_r>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	460e      	mov	r6, r1
 800a448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44c:	2900      	cmp	r1, #0
 800a44e:	b096      	sub	sp, #88	; 0x58
 800a450:	4614      	mov	r4, r2
 800a452:	461d      	mov	r5, r3
 800a454:	da07      	bge.n	800a466 <__swhatbuf_r+0x22>
 800a456:	2300      	movs	r3, #0
 800a458:	602b      	str	r3, [r5, #0]
 800a45a:	89b3      	ldrh	r3, [r6, #12]
 800a45c:	061a      	lsls	r2, r3, #24
 800a45e:	d410      	bmi.n	800a482 <__swhatbuf_r+0x3e>
 800a460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a464:	e00e      	b.n	800a484 <__swhatbuf_r+0x40>
 800a466:	466a      	mov	r2, sp
 800a468:	f000 fd9a 	bl	800afa0 <_fstat_r>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	dbf2      	blt.n	800a456 <__swhatbuf_r+0x12>
 800a470:	9a01      	ldr	r2, [sp, #4]
 800a472:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a476:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a47a:	425a      	negs	r2, r3
 800a47c:	415a      	adcs	r2, r3
 800a47e:	602a      	str	r2, [r5, #0]
 800a480:	e7ee      	b.n	800a460 <__swhatbuf_r+0x1c>
 800a482:	2340      	movs	r3, #64	; 0x40
 800a484:	2000      	movs	r0, #0
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	b016      	add	sp, #88	; 0x58
 800a48a:	bd70      	pop	{r4, r5, r6, pc}

0800a48c <__smakebuf_r>:
 800a48c:	898b      	ldrh	r3, [r1, #12]
 800a48e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a490:	079d      	lsls	r5, r3, #30
 800a492:	4606      	mov	r6, r0
 800a494:	460c      	mov	r4, r1
 800a496:	d507      	bpl.n	800a4a8 <__smakebuf_r+0x1c>
 800a498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	6163      	str	r3, [r4, #20]
 800a4a4:	b002      	add	sp, #8
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	ab01      	add	r3, sp, #4
 800a4aa:	466a      	mov	r2, sp
 800a4ac:	f7ff ffca 	bl	800a444 <__swhatbuf_r>
 800a4b0:	9900      	ldr	r1, [sp, #0]
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7fe faaf 	bl	8008a18 <_malloc_r>
 800a4ba:	b948      	cbnz	r0, 800a4d0 <__smakebuf_r+0x44>
 800a4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c0:	059a      	lsls	r2, r3, #22
 800a4c2:	d4ef      	bmi.n	800a4a4 <__smakebuf_r+0x18>
 800a4c4:	f023 0303 	bic.w	r3, r3, #3
 800a4c8:	f043 0302 	orr.w	r3, r3, #2
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	e7e3      	b.n	800a498 <__smakebuf_r+0xc>
 800a4d0:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <__smakebuf_r+0x7c>)
 800a4d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	6020      	str	r0, [r4, #0]
 800a4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	9b00      	ldr	r3, [sp, #0]
 800a4e0:	6163      	str	r3, [r4, #20]
 800a4e2:	9b01      	ldr	r3, [sp, #4]
 800a4e4:	6120      	str	r0, [r4, #16]
 800a4e6:	b15b      	cbz	r3, 800a500 <__smakebuf_r+0x74>
 800a4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f000 fd69 	bl	800afc4 <_isatty_r>
 800a4f2:	b128      	cbz	r0, 800a500 <__smakebuf_r+0x74>
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	81a3      	strh	r3, [r4, #12]
 800a500:	89a0      	ldrh	r0, [r4, #12]
 800a502:	4305      	orrs	r5, r0
 800a504:	81a5      	strh	r5, [r4, #12]
 800a506:	e7cd      	b.n	800a4a4 <__smakebuf_r+0x18>
 800a508:	08008775 	.word	0x08008775

0800a50c <malloc>:
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <malloc+0xc>)
 800a50e:	4601      	mov	r1, r0
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	f7fe ba81 	b.w	8008a18 <_malloc_r>
 800a516:	bf00      	nop
 800a518:	20000024 	.word	0x20000024

0800a51c <memcpy>:
 800a51c:	440a      	add	r2, r1
 800a51e:	4291      	cmp	r1, r2
 800a520:	f100 33ff 	add.w	r3, r0, #4294967295
 800a524:	d100      	bne.n	800a528 <memcpy+0xc>
 800a526:	4770      	bx	lr
 800a528:	b510      	push	{r4, lr}
 800a52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a532:	4291      	cmp	r1, r2
 800a534:	d1f9      	bne.n	800a52a <memcpy+0xe>
 800a536:	bd10      	pop	{r4, pc}

0800a538 <__malloc_lock>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__malloc_lock+0x8>)
 800a53a:	f7fe ba12 	b.w	8008962 <__retarget_lock_acquire_recursive>
 800a53e:	bf00      	nop
 800a540:	20004ac0 	.word	0x20004ac0

0800a544 <__malloc_unlock>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__malloc_unlock+0x8>)
 800a546:	f7fe ba0d 	b.w	8008964 <__retarget_lock_release_recursive>
 800a54a:	bf00      	nop
 800a54c:	20004ac0 	.word	0x20004ac0

0800a550 <_Balloc>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a554:	4604      	mov	r4, r0
 800a556:	460d      	mov	r5, r1
 800a558:	b976      	cbnz	r6, 800a578 <_Balloc+0x28>
 800a55a:	2010      	movs	r0, #16
 800a55c:	f7ff ffd6 	bl	800a50c <malloc>
 800a560:	4602      	mov	r2, r0
 800a562:	6260      	str	r0, [r4, #36]	; 0x24
 800a564:	b920      	cbnz	r0, 800a570 <_Balloc+0x20>
 800a566:	4b18      	ldr	r3, [pc, #96]	; (800a5c8 <_Balloc+0x78>)
 800a568:	4818      	ldr	r0, [pc, #96]	; (800a5cc <_Balloc+0x7c>)
 800a56a:	2166      	movs	r1, #102	; 0x66
 800a56c:	f000 fce8 	bl	800af40 <__assert_func>
 800a570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a574:	6006      	str	r6, [r0, #0]
 800a576:	60c6      	str	r6, [r0, #12]
 800a578:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a57a:	68f3      	ldr	r3, [r6, #12]
 800a57c:	b183      	cbz	r3, 800a5a0 <_Balloc+0x50>
 800a57e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a586:	b9b8      	cbnz	r0, 800a5b8 <_Balloc+0x68>
 800a588:	2101      	movs	r1, #1
 800a58a:	fa01 f605 	lsl.w	r6, r1, r5
 800a58e:	1d72      	adds	r2, r6, #5
 800a590:	0092      	lsls	r2, r2, #2
 800a592:	4620      	mov	r0, r4
 800a594:	f000 fb5a 	bl	800ac4c <_calloc_r>
 800a598:	b160      	cbz	r0, 800a5b4 <_Balloc+0x64>
 800a59a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a59e:	e00e      	b.n	800a5be <_Balloc+0x6e>
 800a5a0:	2221      	movs	r2, #33	; 0x21
 800a5a2:	2104      	movs	r1, #4
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 fb51 	bl	800ac4c <_calloc_r>
 800a5aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ac:	60f0      	str	r0, [r6, #12]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e4      	bne.n	800a57e <_Balloc+0x2e>
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	6802      	ldr	r2, [r0, #0]
 800a5ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5c4:	e7f7      	b.n	800a5b6 <_Balloc+0x66>
 800a5c6:	bf00      	nop
 800a5c8:	0800b239 	.word	0x0800b239
 800a5cc:	0800b2c0 	.word	0x0800b2c0

0800a5d0 <_Bfree>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	b976      	cbnz	r6, 800a5f8 <_Bfree+0x28>
 800a5da:	2010      	movs	r0, #16
 800a5dc:	f7ff ff96 	bl	800a50c <malloc>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	6268      	str	r0, [r5, #36]	; 0x24
 800a5e4:	b920      	cbnz	r0, 800a5f0 <_Bfree+0x20>
 800a5e6:	4b09      	ldr	r3, [pc, #36]	; (800a60c <_Bfree+0x3c>)
 800a5e8:	4809      	ldr	r0, [pc, #36]	; (800a610 <_Bfree+0x40>)
 800a5ea:	218a      	movs	r1, #138	; 0x8a
 800a5ec:	f000 fca8 	bl	800af40 <__assert_func>
 800a5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5f4:	6006      	str	r6, [r0, #0]
 800a5f6:	60c6      	str	r6, [r0, #12]
 800a5f8:	b13c      	cbz	r4, 800a60a <_Bfree+0x3a>
 800a5fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5fc:	6862      	ldr	r2, [r4, #4]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a604:	6021      	str	r1, [r4, #0]
 800a606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	0800b239 	.word	0x0800b239
 800a610:	0800b2c0 	.word	0x0800b2c0

0800a614 <__multadd>:
 800a614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a618:	690e      	ldr	r6, [r1, #16]
 800a61a:	4607      	mov	r7, r0
 800a61c:	4698      	mov	r8, r3
 800a61e:	460c      	mov	r4, r1
 800a620:	f101 0014 	add.w	r0, r1, #20
 800a624:	2300      	movs	r3, #0
 800a626:	6805      	ldr	r5, [r0, #0]
 800a628:	b2a9      	uxth	r1, r5
 800a62a:	fb02 8101 	mla	r1, r2, r1, r8
 800a62e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a632:	0c2d      	lsrs	r5, r5, #16
 800a634:	fb02 c505 	mla	r5, r2, r5, ip
 800a638:	b289      	uxth	r1, r1
 800a63a:	3301      	adds	r3, #1
 800a63c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a640:	429e      	cmp	r6, r3
 800a642:	f840 1b04 	str.w	r1, [r0], #4
 800a646:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a64a:	dcec      	bgt.n	800a626 <__multadd+0x12>
 800a64c:	f1b8 0f00 	cmp.w	r8, #0
 800a650:	d022      	beq.n	800a698 <__multadd+0x84>
 800a652:	68a3      	ldr	r3, [r4, #8]
 800a654:	42b3      	cmp	r3, r6
 800a656:	dc19      	bgt.n	800a68c <__multadd+0x78>
 800a658:	6861      	ldr	r1, [r4, #4]
 800a65a:	4638      	mov	r0, r7
 800a65c:	3101      	adds	r1, #1
 800a65e:	f7ff ff77 	bl	800a550 <_Balloc>
 800a662:	4605      	mov	r5, r0
 800a664:	b928      	cbnz	r0, 800a672 <__multadd+0x5e>
 800a666:	4602      	mov	r2, r0
 800a668:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <__multadd+0x8c>)
 800a66a:	480e      	ldr	r0, [pc, #56]	; (800a6a4 <__multadd+0x90>)
 800a66c:	21b5      	movs	r1, #181	; 0xb5
 800a66e:	f000 fc67 	bl	800af40 <__assert_func>
 800a672:	6922      	ldr	r2, [r4, #16]
 800a674:	3202      	adds	r2, #2
 800a676:	f104 010c 	add.w	r1, r4, #12
 800a67a:	0092      	lsls	r2, r2, #2
 800a67c:	300c      	adds	r0, #12
 800a67e:	f7ff ff4d 	bl	800a51c <memcpy>
 800a682:	4621      	mov	r1, r4
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff ffa3 	bl	800a5d0 <_Bfree>
 800a68a:	462c      	mov	r4, r5
 800a68c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a690:	3601      	adds	r6, #1
 800a692:	f8c3 8014 	str.w	r8, [r3, #20]
 800a696:	6126      	str	r6, [r4, #16]
 800a698:	4620      	mov	r0, r4
 800a69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69e:	bf00      	nop
 800a6a0:	0800b2af 	.word	0x0800b2af
 800a6a4:	0800b2c0 	.word	0x0800b2c0

0800a6a8 <__hi0bits>:
 800a6a8:	0c03      	lsrs	r3, r0, #16
 800a6aa:	041b      	lsls	r3, r3, #16
 800a6ac:	b9d3      	cbnz	r3, 800a6e4 <__hi0bits+0x3c>
 800a6ae:	0400      	lsls	r0, r0, #16
 800a6b0:	2310      	movs	r3, #16
 800a6b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a6b6:	bf04      	itt	eq
 800a6b8:	0200      	lsleq	r0, r0, #8
 800a6ba:	3308      	addeq	r3, #8
 800a6bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a6c0:	bf04      	itt	eq
 800a6c2:	0100      	lsleq	r0, r0, #4
 800a6c4:	3304      	addeq	r3, #4
 800a6c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a6ca:	bf04      	itt	eq
 800a6cc:	0080      	lsleq	r0, r0, #2
 800a6ce:	3302      	addeq	r3, #2
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	db05      	blt.n	800a6e0 <__hi0bits+0x38>
 800a6d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a6d8:	f103 0301 	add.w	r3, r3, #1
 800a6dc:	bf08      	it	eq
 800a6de:	2320      	moveq	r3, #32
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	4770      	bx	lr
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	e7e4      	b.n	800a6b2 <__hi0bits+0xa>

0800a6e8 <__lo0bits>:
 800a6e8:	6803      	ldr	r3, [r0, #0]
 800a6ea:	f013 0207 	ands.w	r2, r3, #7
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	d00b      	beq.n	800a70a <__lo0bits+0x22>
 800a6f2:	07da      	lsls	r2, r3, #31
 800a6f4:	d424      	bmi.n	800a740 <__lo0bits+0x58>
 800a6f6:	0798      	lsls	r0, r3, #30
 800a6f8:	bf49      	itett	mi
 800a6fa:	085b      	lsrmi	r3, r3, #1
 800a6fc:	089b      	lsrpl	r3, r3, #2
 800a6fe:	2001      	movmi	r0, #1
 800a700:	600b      	strmi	r3, [r1, #0]
 800a702:	bf5c      	itt	pl
 800a704:	600b      	strpl	r3, [r1, #0]
 800a706:	2002      	movpl	r0, #2
 800a708:	4770      	bx	lr
 800a70a:	b298      	uxth	r0, r3
 800a70c:	b9b0      	cbnz	r0, 800a73c <__lo0bits+0x54>
 800a70e:	0c1b      	lsrs	r3, r3, #16
 800a710:	2010      	movs	r0, #16
 800a712:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a716:	bf04      	itt	eq
 800a718:	0a1b      	lsreq	r3, r3, #8
 800a71a:	3008      	addeq	r0, #8
 800a71c:	071a      	lsls	r2, r3, #28
 800a71e:	bf04      	itt	eq
 800a720:	091b      	lsreq	r3, r3, #4
 800a722:	3004      	addeq	r0, #4
 800a724:	079a      	lsls	r2, r3, #30
 800a726:	bf04      	itt	eq
 800a728:	089b      	lsreq	r3, r3, #2
 800a72a:	3002      	addeq	r0, #2
 800a72c:	07da      	lsls	r2, r3, #31
 800a72e:	d403      	bmi.n	800a738 <__lo0bits+0x50>
 800a730:	085b      	lsrs	r3, r3, #1
 800a732:	f100 0001 	add.w	r0, r0, #1
 800a736:	d005      	beq.n	800a744 <__lo0bits+0x5c>
 800a738:	600b      	str	r3, [r1, #0]
 800a73a:	4770      	bx	lr
 800a73c:	4610      	mov	r0, r2
 800a73e:	e7e8      	b.n	800a712 <__lo0bits+0x2a>
 800a740:	2000      	movs	r0, #0
 800a742:	4770      	bx	lr
 800a744:	2020      	movs	r0, #32
 800a746:	4770      	bx	lr

0800a748 <__i2b>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	460c      	mov	r4, r1
 800a74c:	2101      	movs	r1, #1
 800a74e:	f7ff feff 	bl	800a550 <_Balloc>
 800a752:	4602      	mov	r2, r0
 800a754:	b928      	cbnz	r0, 800a762 <__i2b+0x1a>
 800a756:	4b05      	ldr	r3, [pc, #20]	; (800a76c <__i2b+0x24>)
 800a758:	4805      	ldr	r0, [pc, #20]	; (800a770 <__i2b+0x28>)
 800a75a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a75e:	f000 fbef 	bl	800af40 <__assert_func>
 800a762:	2301      	movs	r3, #1
 800a764:	6144      	str	r4, [r0, #20]
 800a766:	6103      	str	r3, [r0, #16]
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	bf00      	nop
 800a76c:	0800b2af 	.word	0x0800b2af
 800a770:	0800b2c0 	.word	0x0800b2c0

0800a774 <__multiply>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	4614      	mov	r4, r2
 800a77a:	690a      	ldr	r2, [r1, #16]
 800a77c:	6923      	ldr	r3, [r4, #16]
 800a77e:	429a      	cmp	r2, r3
 800a780:	bfb8      	it	lt
 800a782:	460b      	movlt	r3, r1
 800a784:	460d      	mov	r5, r1
 800a786:	bfbc      	itt	lt
 800a788:	4625      	movlt	r5, r4
 800a78a:	461c      	movlt	r4, r3
 800a78c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a790:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a794:	68ab      	ldr	r3, [r5, #8]
 800a796:	6869      	ldr	r1, [r5, #4]
 800a798:	eb0a 0709 	add.w	r7, sl, r9
 800a79c:	42bb      	cmp	r3, r7
 800a79e:	b085      	sub	sp, #20
 800a7a0:	bfb8      	it	lt
 800a7a2:	3101      	addlt	r1, #1
 800a7a4:	f7ff fed4 	bl	800a550 <_Balloc>
 800a7a8:	b930      	cbnz	r0, 800a7b8 <__multiply+0x44>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	4b42      	ldr	r3, [pc, #264]	; (800a8b8 <__multiply+0x144>)
 800a7ae:	4843      	ldr	r0, [pc, #268]	; (800a8bc <__multiply+0x148>)
 800a7b0:	f240 115d 	movw	r1, #349	; 0x15d
 800a7b4:	f000 fbc4 	bl	800af40 <__assert_func>
 800a7b8:	f100 0614 	add.w	r6, r0, #20
 800a7bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a7c0:	4633      	mov	r3, r6
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4543      	cmp	r3, r8
 800a7c6:	d31e      	bcc.n	800a806 <__multiply+0x92>
 800a7c8:	f105 0c14 	add.w	ip, r5, #20
 800a7cc:	f104 0314 	add.w	r3, r4, #20
 800a7d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a7d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a7d8:	9202      	str	r2, [sp, #8]
 800a7da:	ebac 0205 	sub.w	r2, ip, r5
 800a7de:	3a15      	subs	r2, #21
 800a7e0:	f022 0203 	bic.w	r2, r2, #3
 800a7e4:	3204      	adds	r2, #4
 800a7e6:	f105 0115 	add.w	r1, r5, #21
 800a7ea:	458c      	cmp	ip, r1
 800a7ec:	bf38      	it	cc
 800a7ee:	2204      	movcc	r2, #4
 800a7f0:	9201      	str	r2, [sp, #4]
 800a7f2:	9a02      	ldr	r2, [sp, #8]
 800a7f4:	9303      	str	r3, [sp, #12]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d808      	bhi.n	800a80c <__multiply+0x98>
 800a7fa:	2f00      	cmp	r7, #0
 800a7fc:	dc55      	bgt.n	800a8aa <__multiply+0x136>
 800a7fe:	6107      	str	r7, [r0, #16]
 800a800:	b005      	add	sp, #20
 800a802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a806:	f843 2b04 	str.w	r2, [r3], #4
 800a80a:	e7db      	b.n	800a7c4 <__multiply+0x50>
 800a80c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a810:	f1ba 0f00 	cmp.w	sl, #0
 800a814:	d020      	beq.n	800a858 <__multiply+0xe4>
 800a816:	f105 0e14 	add.w	lr, r5, #20
 800a81a:	46b1      	mov	r9, r6
 800a81c:	2200      	movs	r2, #0
 800a81e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a822:	f8d9 b000 	ldr.w	fp, [r9]
 800a826:	b2a1      	uxth	r1, r4
 800a828:	fa1f fb8b 	uxth.w	fp, fp
 800a82c:	fb0a b101 	mla	r1, sl, r1, fp
 800a830:	4411      	add	r1, r2
 800a832:	f8d9 2000 	ldr.w	r2, [r9]
 800a836:	0c24      	lsrs	r4, r4, #16
 800a838:	0c12      	lsrs	r2, r2, #16
 800a83a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a83e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a842:	b289      	uxth	r1, r1
 800a844:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a848:	45f4      	cmp	ip, lr
 800a84a:	f849 1b04 	str.w	r1, [r9], #4
 800a84e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a852:	d8e4      	bhi.n	800a81e <__multiply+0xaa>
 800a854:	9901      	ldr	r1, [sp, #4]
 800a856:	5072      	str	r2, [r6, r1]
 800a858:	9a03      	ldr	r2, [sp, #12]
 800a85a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a85e:	3304      	adds	r3, #4
 800a860:	f1b9 0f00 	cmp.w	r9, #0
 800a864:	d01f      	beq.n	800a8a6 <__multiply+0x132>
 800a866:	6834      	ldr	r4, [r6, #0]
 800a868:	f105 0114 	add.w	r1, r5, #20
 800a86c:	46b6      	mov	lr, r6
 800a86e:	f04f 0a00 	mov.w	sl, #0
 800a872:	880a      	ldrh	r2, [r1, #0]
 800a874:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a878:	fb09 b202 	mla	r2, r9, r2, fp
 800a87c:	4492      	add	sl, r2
 800a87e:	b2a4      	uxth	r4, r4
 800a880:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a884:	f84e 4b04 	str.w	r4, [lr], #4
 800a888:	f851 4b04 	ldr.w	r4, [r1], #4
 800a88c:	f8be 2000 	ldrh.w	r2, [lr]
 800a890:	0c24      	lsrs	r4, r4, #16
 800a892:	fb09 2404 	mla	r4, r9, r4, r2
 800a896:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a89a:	458c      	cmp	ip, r1
 800a89c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a8a0:	d8e7      	bhi.n	800a872 <__multiply+0xfe>
 800a8a2:	9a01      	ldr	r2, [sp, #4]
 800a8a4:	50b4      	str	r4, [r6, r2]
 800a8a6:	3604      	adds	r6, #4
 800a8a8:	e7a3      	b.n	800a7f2 <__multiply+0x7e>
 800a8aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1a5      	bne.n	800a7fe <__multiply+0x8a>
 800a8b2:	3f01      	subs	r7, #1
 800a8b4:	e7a1      	b.n	800a7fa <__multiply+0x86>
 800a8b6:	bf00      	nop
 800a8b8:	0800b2af 	.word	0x0800b2af
 800a8bc:	0800b2c0 	.word	0x0800b2c0

0800a8c0 <__pow5mult>:
 800a8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c4:	4615      	mov	r5, r2
 800a8c6:	f012 0203 	ands.w	r2, r2, #3
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	460f      	mov	r7, r1
 800a8ce:	d007      	beq.n	800a8e0 <__pow5mult+0x20>
 800a8d0:	4c25      	ldr	r4, [pc, #148]	; (800a968 <__pow5mult+0xa8>)
 800a8d2:	3a01      	subs	r2, #1
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8da:	f7ff fe9b 	bl	800a614 <__multadd>
 800a8de:	4607      	mov	r7, r0
 800a8e0:	10ad      	asrs	r5, r5, #2
 800a8e2:	d03d      	beq.n	800a960 <__pow5mult+0xa0>
 800a8e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a8e6:	b97c      	cbnz	r4, 800a908 <__pow5mult+0x48>
 800a8e8:	2010      	movs	r0, #16
 800a8ea:	f7ff fe0f 	bl	800a50c <malloc>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	6270      	str	r0, [r6, #36]	; 0x24
 800a8f2:	b928      	cbnz	r0, 800a900 <__pow5mult+0x40>
 800a8f4:	4b1d      	ldr	r3, [pc, #116]	; (800a96c <__pow5mult+0xac>)
 800a8f6:	481e      	ldr	r0, [pc, #120]	; (800a970 <__pow5mult+0xb0>)
 800a8f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a8fc:	f000 fb20 	bl	800af40 <__assert_func>
 800a900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a904:	6004      	str	r4, [r0, #0]
 800a906:	60c4      	str	r4, [r0, #12]
 800a908:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a90c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a910:	b94c      	cbnz	r4, 800a926 <__pow5mult+0x66>
 800a912:	f240 2171 	movw	r1, #625	; 0x271
 800a916:	4630      	mov	r0, r6
 800a918:	f7ff ff16 	bl	800a748 <__i2b>
 800a91c:	2300      	movs	r3, #0
 800a91e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a922:	4604      	mov	r4, r0
 800a924:	6003      	str	r3, [r0, #0]
 800a926:	f04f 0900 	mov.w	r9, #0
 800a92a:	07eb      	lsls	r3, r5, #31
 800a92c:	d50a      	bpl.n	800a944 <__pow5mult+0x84>
 800a92e:	4639      	mov	r1, r7
 800a930:	4622      	mov	r2, r4
 800a932:	4630      	mov	r0, r6
 800a934:	f7ff ff1e 	bl	800a774 <__multiply>
 800a938:	4639      	mov	r1, r7
 800a93a:	4680      	mov	r8, r0
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7ff fe47 	bl	800a5d0 <_Bfree>
 800a942:	4647      	mov	r7, r8
 800a944:	106d      	asrs	r5, r5, #1
 800a946:	d00b      	beq.n	800a960 <__pow5mult+0xa0>
 800a948:	6820      	ldr	r0, [r4, #0]
 800a94a:	b938      	cbnz	r0, 800a95c <__pow5mult+0x9c>
 800a94c:	4622      	mov	r2, r4
 800a94e:	4621      	mov	r1, r4
 800a950:	4630      	mov	r0, r6
 800a952:	f7ff ff0f 	bl	800a774 <__multiply>
 800a956:	6020      	str	r0, [r4, #0]
 800a958:	f8c0 9000 	str.w	r9, [r0]
 800a95c:	4604      	mov	r4, r0
 800a95e:	e7e4      	b.n	800a92a <__pow5mult+0x6a>
 800a960:	4638      	mov	r0, r7
 800a962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a966:	bf00      	nop
 800a968:	0800b410 	.word	0x0800b410
 800a96c:	0800b239 	.word	0x0800b239
 800a970:	0800b2c0 	.word	0x0800b2c0

0800a974 <__lshift>:
 800a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a978:	460c      	mov	r4, r1
 800a97a:	6849      	ldr	r1, [r1, #4]
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a982:	68a3      	ldr	r3, [r4, #8]
 800a984:	4607      	mov	r7, r0
 800a986:	4691      	mov	r9, r2
 800a988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a98c:	f108 0601 	add.w	r6, r8, #1
 800a990:	42b3      	cmp	r3, r6
 800a992:	db0b      	blt.n	800a9ac <__lshift+0x38>
 800a994:	4638      	mov	r0, r7
 800a996:	f7ff fddb 	bl	800a550 <_Balloc>
 800a99a:	4605      	mov	r5, r0
 800a99c:	b948      	cbnz	r0, 800a9b2 <__lshift+0x3e>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	4b28      	ldr	r3, [pc, #160]	; (800aa44 <__lshift+0xd0>)
 800a9a2:	4829      	ldr	r0, [pc, #164]	; (800aa48 <__lshift+0xd4>)
 800a9a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a9a8:	f000 faca 	bl	800af40 <__assert_func>
 800a9ac:	3101      	adds	r1, #1
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	e7ee      	b.n	800a990 <__lshift+0x1c>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f100 0114 	add.w	r1, r0, #20
 800a9b8:	f100 0210 	add.w	r2, r0, #16
 800a9bc:	4618      	mov	r0, r3
 800a9be:	4553      	cmp	r3, sl
 800a9c0:	db33      	blt.n	800aa2a <__lshift+0xb6>
 800a9c2:	6920      	ldr	r0, [r4, #16]
 800a9c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9c8:	f104 0314 	add.w	r3, r4, #20
 800a9cc:	f019 091f 	ands.w	r9, r9, #31
 800a9d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9d8:	d02b      	beq.n	800aa32 <__lshift+0xbe>
 800a9da:	f1c9 0e20 	rsb	lr, r9, #32
 800a9de:	468a      	mov	sl, r1
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	fa00 f009 	lsl.w	r0, r0, r9
 800a9e8:	4302      	orrs	r2, r0
 800a9ea:	f84a 2b04 	str.w	r2, [sl], #4
 800a9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f2:	459c      	cmp	ip, r3
 800a9f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9f8:	d8f3      	bhi.n	800a9e2 <__lshift+0x6e>
 800a9fa:	ebac 0304 	sub.w	r3, ip, r4
 800a9fe:	3b15      	subs	r3, #21
 800aa00:	f023 0303 	bic.w	r3, r3, #3
 800aa04:	3304      	adds	r3, #4
 800aa06:	f104 0015 	add.w	r0, r4, #21
 800aa0a:	4584      	cmp	ip, r0
 800aa0c:	bf38      	it	cc
 800aa0e:	2304      	movcc	r3, #4
 800aa10:	50ca      	str	r2, [r1, r3]
 800aa12:	b10a      	cbz	r2, 800aa18 <__lshift+0xa4>
 800aa14:	f108 0602 	add.w	r6, r8, #2
 800aa18:	3e01      	subs	r6, #1
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	612e      	str	r6, [r5, #16]
 800aa1e:	4621      	mov	r1, r4
 800aa20:	f7ff fdd6 	bl	800a5d0 <_Bfree>
 800aa24:	4628      	mov	r0, r5
 800aa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa2e:	3301      	adds	r3, #1
 800aa30:	e7c5      	b.n	800a9be <__lshift+0x4a>
 800aa32:	3904      	subs	r1, #4
 800aa34:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa38:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa3c:	459c      	cmp	ip, r3
 800aa3e:	d8f9      	bhi.n	800aa34 <__lshift+0xc0>
 800aa40:	e7ea      	b.n	800aa18 <__lshift+0xa4>
 800aa42:	bf00      	nop
 800aa44:	0800b2af 	.word	0x0800b2af
 800aa48:	0800b2c0 	.word	0x0800b2c0

0800aa4c <__mcmp>:
 800aa4c:	b530      	push	{r4, r5, lr}
 800aa4e:	6902      	ldr	r2, [r0, #16]
 800aa50:	690c      	ldr	r4, [r1, #16]
 800aa52:	1b12      	subs	r2, r2, r4
 800aa54:	d10e      	bne.n	800aa74 <__mcmp+0x28>
 800aa56:	f100 0314 	add.w	r3, r0, #20
 800aa5a:	3114      	adds	r1, #20
 800aa5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa6c:	42a5      	cmp	r5, r4
 800aa6e:	d003      	beq.n	800aa78 <__mcmp+0x2c>
 800aa70:	d305      	bcc.n	800aa7e <__mcmp+0x32>
 800aa72:	2201      	movs	r2, #1
 800aa74:	4610      	mov	r0, r2
 800aa76:	bd30      	pop	{r4, r5, pc}
 800aa78:	4283      	cmp	r3, r0
 800aa7a:	d3f3      	bcc.n	800aa64 <__mcmp+0x18>
 800aa7c:	e7fa      	b.n	800aa74 <__mcmp+0x28>
 800aa7e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa82:	e7f7      	b.n	800aa74 <__mcmp+0x28>

0800aa84 <__mdiff>:
 800aa84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	460c      	mov	r4, r1
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	4620      	mov	r0, r4
 800aa90:	4617      	mov	r7, r2
 800aa92:	f7ff ffdb 	bl	800aa4c <__mcmp>
 800aa96:	1e05      	subs	r5, r0, #0
 800aa98:	d110      	bne.n	800aabc <__mdiff+0x38>
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff fd57 	bl	800a550 <_Balloc>
 800aaa2:	b930      	cbnz	r0, 800aab2 <__mdiff+0x2e>
 800aaa4:	4b39      	ldr	r3, [pc, #228]	; (800ab8c <__mdiff+0x108>)
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	f240 2132 	movw	r1, #562	; 0x232
 800aaac:	4838      	ldr	r0, [pc, #224]	; (800ab90 <__mdiff+0x10c>)
 800aaae:	f000 fa47 	bl	800af40 <__assert_func>
 800aab2:	2301      	movs	r3, #1
 800aab4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabc:	bfa4      	itt	ge
 800aabe:	463b      	movge	r3, r7
 800aac0:	4627      	movge	r7, r4
 800aac2:	4630      	mov	r0, r6
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	bfa6      	itte	ge
 800aac8:	461c      	movge	r4, r3
 800aaca:	2500      	movge	r5, #0
 800aacc:	2501      	movlt	r5, #1
 800aace:	f7ff fd3f 	bl	800a550 <_Balloc>
 800aad2:	b920      	cbnz	r0, 800aade <__mdiff+0x5a>
 800aad4:	4b2d      	ldr	r3, [pc, #180]	; (800ab8c <__mdiff+0x108>)
 800aad6:	4602      	mov	r2, r0
 800aad8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aadc:	e7e6      	b.n	800aaac <__mdiff+0x28>
 800aade:	693e      	ldr	r6, [r7, #16]
 800aae0:	60c5      	str	r5, [r0, #12]
 800aae2:	6925      	ldr	r5, [r4, #16]
 800aae4:	f107 0114 	add.w	r1, r7, #20
 800aae8:	f104 0914 	add.w	r9, r4, #20
 800aaec:	f100 0e14 	add.w	lr, r0, #20
 800aaf0:	f107 0210 	add.w	r2, r7, #16
 800aaf4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aaf8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aafc:	46f2      	mov	sl, lr
 800aafe:	2700      	movs	r7, #0
 800ab00:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab08:	fa1f f883 	uxth.w	r8, r3
 800ab0c:	fa17 f78b 	uxtah	r7, r7, fp
 800ab10:	0c1b      	lsrs	r3, r3, #16
 800ab12:	eba7 0808 	sub.w	r8, r7, r8
 800ab16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab1e:	fa1f f888 	uxth.w	r8, r8
 800ab22:	141f      	asrs	r7, r3, #16
 800ab24:	454d      	cmp	r5, r9
 800ab26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab2a:	f84a 3b04 	str.w	r3, [sl], #4
 800ab2e:	d8e7      	bhi.n	800ab00 <__mdiff+0x7c>
 800ab30:	1b2b      	subs	r3, r5, r4
 800ab32:	3b15      	subs	r3, #21
 800ab34:	f023 0303 	bic.w	r3, r3, #3
 800ab38:	3304      	adds	r3, #4
 800ab3a:	3415      	adds	r4, #21
 800ab3c:	42a5      	cmp	r5, r4
 800ab3e:	bf38      	it	cc
 800ab40:	2304      	movcc	r3, #4
 800ab42:	4419      	add	r1, r3
 800ab44:	4473      	add	r3, lr
 800ab46:	469e      	mov	lr, r3
 800ab48:	460d      	mov	r5, r1
 800ab4a:	4565      	cmp	r5, ip
 800ab4c:	d30e      	bcc.n	800ab6c <__mdiff+0xe8>
 800ab4e:	f10c 0203 	add.w	r2, ip, #3
 800ab52:	1a52      	subs	r2, r2, r1
 800ab54:	f022 0203 	bic.w	r2, r2, #3
 800ab58:	3903      	subs	r1, #3
 800ab5a:	458c      	cmp	ip, r1
 800ab5c:	bf38      	it	cc
 800ab5e:	2200      	movcc	r2, #0
 800ab60:	441a      	add	r2, r3
 800ab62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ab66:	b17b      	cbz	r3, 800ab88 <__mdiff+0x104>
 800ab68:	6106      	str	r6, [r0, #16]
 800ab6a:	e7a5      	b.n	800aab8 <__mdiff+0x34>
 800ab6c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ab70:	fa17 f488 	uxtah	r4, r7, r8
 800ab74:	1422      	asrs	r2, r4, #16
 800ab76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ab7a:	b2a4      	uxth	r4, r4
 800ab7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ab80:	f84e 4b04 	str.w	r4, [lr], #4
 800ab84:	1417      	asrs	r7, r2, #16
 800ab86:	e7e0      	b.n	800ab4a <__mdiff+0xc6>
 800ab88:	3e01      	subs	r6, #1
 800ab8a:	e7ea      	b.n	800ab62 <__mdiff+0xde>
 800ab8c:	0800b2af 	.word	0x0800b2af
 800ab90:	0800b2c0 	.word	0x0800b2c0

0800ab94 <__d2b>:
 800ab94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab98:	4689      	mov	r9, r1
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	ec57 6b10 	vmov	r6, r7, d0
 800aba0:	4690      	mov	r8, r2
 800aba2:	f7ff fcd5 	bl	800a550 <_Balloc>
 800aba6:	4604      	mov	r4, r0
 800aba8:	b930      	cbnz	r0, 800abb8 <__d2b+0x24>
 800abaa:	4602      	mov	r2, r0
 800abac:	4b25      	ldr	r3, [pc, #148]	; (800ac44 <__d2b+0xb0>)
 800abae:	4826      	ldr	r0, [pc, #152]	; (800ac48 <__d2b+0xb4>)
 800abb0:	f240 310a 	movw	r1, #778	; 0x30a
 800abb4:	f000 f9c4 	bl	800af40 <__assert_func>
 800abb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800abbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800abc0:	bb35      	cbnz	r5, 800ac10 <__d2b+0x7c>
 800abc2:	2e00      	cmp	r6, #0
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	d028      	beq.n	800ac1a <__d2b+0x86>
 800abc8:	4668      	mov	r0, sp
 800abca:	9600      	str	r6, [sp, #0]
 800abcc:	f7ff fd8c 	bl	800a6e8 <__lo0bits>
 800abd0:	9900      	ldr	r1, [sp, #0]
 800abd2:	b300      	cbz	r0, 800ac16 <__d2b+0x82>
 800abd4:	9a01      	ldr	r2, [sp, #4]
 800abd6:	f1c0 0320 	rsb	r3, r0, #32
 800abda:	fa02 f303 	lsl.w	r3, r2, r3
 800abde:	430b      	orrs	r3, r1
 800abe0:	40c2      	lsrs	r2, r0
 800abe2:	6163      	str	r3, [r4, #20]
 800abe4:	9201      	str	r2, [sp, #4]
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	61a3      	str	r3, [r4, #24]
 800abea:	2b00      	cmp	r3, #0
 800abec:	bf14      	ite	ne
 800abee:	2202      	movne	r2, #2
 800abf0:	2201      	moveq	r2, #1
 800abf2:	6122      	str	r2, [r4, #16]
 800abf4:	b1d5      	cbz	r5, 800ac2c <__d2b+0x98>
 800abf6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800abfa:	4405      	add	r5, r0
 800abfc:	f8c9 5000 	str.w	r5, [r9]
 800ac00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac04:	f8c8 0000 	str.w	r0, [r8]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	b003      	add	sp, #12
 800ac0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac14:	e7d5      	b.n	800abc2 <__d2b+0x2e>
 800ac16:	6161      	str	r1, [r4, #20]
 800ac18:	e7e5      	b.n	800abe6 <__d2b+0x52>
 800ac1a:	a801      	add	r0, sp, #4
 800ac1c:	f7ff fd64 	bl	800a6e8 <__lo0bits>
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	6163      	str	r3, [r4, #20]
 800ac24:	2201      	movs	r2, #1
 800ac26:	6122      	str	r2, [r4, #16]
 800ac28:	3020      	adds	r0, #32
 800ac2a:	e7e3      	b.n	800abf4 <__d2b+0x60>
 800ac2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac34:	f8c9 0000 	str.w	r0, [r9]
 800ac38:	6918      	ldr	r0, [r3, #16]
 800ac3a:	f7ff fd35 	bl	800a6a8 <__hi0bits>
 800ac3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac42:	e7df      	b.n	800ac04 <__d2b+0x70>
 800ac44:	0800b2af 	.word	0x0800b2af
 800ac48:	0800b2c0 	.word	0x0800b2c0

0800ac4c <_calloc_r>:
 800ac4c:	b513      	push	{r0, r1, r4, lr}
 800ac4e:	434a      	muls	r2, r1
 800ac50:	4611      	mov	r1, r2
 800ac52:	9201      	str	r2, [sp, #4]
 800ac54:	f7fd fee0 	bl	8008a18 <_malloc_r>
 800ac58:	4604      	mov	r4, r0
 800ac5a:	b118      	cbz	r0, 800ac64 <_calloc_r+0x18>
 800ac5c:	9a01      	ldr	r2, [sp, #4]
 800ac5e:	2100      	movs	r1, #0
 800ac60:	f7fd fe81 	bl	8008966 <memset>
 800ac64:	4620      	mov	r0, r4
 800ac66:	b002      	add	sp, #8
 800ac68:	bd10      	pop	{r4, pc}

0800ac6a <__sfputc_r>:
 800ac6a:	6893      	ldr	r3, [r2, #8]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	b410      	push	{r4}
 800ac72:	6093      	str	r3, [r2, #8]
 800ac74:	da08      	bge.n	800ac88 <__sfputc_r+0x1e>
 800ac76:	6994      	ldr	r4, [r2, #24]
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	db01      	blt.n	800ac80 <__sfputc_r+0x16>
 800ac7c:	290a      	cmp	r1, #10
 800ac7e:	d103      	bne.n	800ac88 <__sfputc_r+0x1e>
 800ac80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac84:	f7fe bc6e 	b.w	8009564 <__swbuf_r>
 800ac88:	6813      	ldr	r3, [r2, #0]
 800ac8a:	1c58      	adds	r0, r3, #1
 800ac8c:	6010      	str	r0, [r2, #0]
 800ac8e:	7019      	strb	r1, [r3, #0]
 800ac90:	4608      	mov	r0, r1
 800ac92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <__sfputs_r>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	4614      	mov	r4, r2
 800aca0:	18d5      	adds	r5, r2, r3
 800aca2:	42ac      	cmp	r4, r5
 800aca4:	d101      	bne.n	800acaa <__sfputs_r+0x12>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e007      	b.n	800acba <__sfputs_r+0x22>
 800acaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acae:	463a      	mov	r2, r7
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff ffda 	bl	800ac6a <__sfputc_r>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	d1f3      	bne.n	800aca2 <__sfputs_r+0xa>
 800acba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800acbc <_vfiprintf_r>:
 800acbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc0:	460d      	mov	r5, r1
 800acc2:	b09d      	sub	sp, #116	; 0x74
 800acc4:	4614      	mov	r4, r2
 800acc6:	4698      	mov	r8, r3
 800acc8:	4606      	mov	r6, r0
 800acca:	b118      	cbz	r0, 800acd4 <_vfiprintf_r+0x18>
 800accc:	6983      	ldr	r3, [r0, #24]
 800acce:	b90b      	cbnz	r3, 800acd4 <_vfiprintf_r+0x18>
 800acd0:	f7fd fd84 	bl	80087dc <__sinit>
 800acd4:	4b89      	ldr	r3, [pc, #548]	; (800aefc <_vfiprintf_r+0x240>)
 800acd6:	429d      	cmp	r5, r3
 800acd8:	d11b      	bne.n	800ad12 <_vfiprintf_r+0x56>
 800acda:	6875      	ldr	r5, [r6, #4]
 800acdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acde:	07d9      	lsls	r1, r3, #31
 800ace0:	d405      	bmi.n	800acee <_vfiprintf_r+0x32>
 800ace2:	89ab      	ldrh	r3, [r5, #12]
 800ace4:	059a      	lsls	r2, r3, #22
 800ace6:	d402      	bmi.n	800acee <_vfiprintf_r+0x32>
 800ace8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acea:	f7fd fe3a 	bl	8008962 <__retarget_lock_acquire_recursive>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	071b      	lsls	r3, r3, #28
 800acf2:	d501      	bpl.n	800acf8 <_vfiprintf_r+0x3c>
 800acf4:	692b      	ldr	r3, [r5, #16]
 800acf6:	b9eb      	cbnz	r3, 800ad34 <_vfiprintf_r+0x78>
 800acf8:	4629      	mov	r1, r5
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7fe fc96 	bl	800962c <__swsetup_r>
 800ad00:	b1c0      	cbz	r0, 800ad34 <_vfiprintf_r+0x78>
 800ad02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad04:	07dc      	lsls	r4, r3, #31
 800ad06:	d50e      	bpl.n	800ad26 <_vfiprintf_r+0x6a>
 800ad08:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0c:	b01d      	add	sp, #116	; 0x74
 800ad0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad12:	4b7b      	ldr	r3, [pc, #492]	; (800af00 <_vfiprintf_r+0x244>)
 800ad14:	429d      	cmp	r5, r3
 800ad16:	d101      	bne.n	800ad1c <_vfiprintf_r+0x60>
 800ad18:	68b5      	ldr	r5, [r6, #8]
 800ad1a:	e7df      	b.n	800acdc <_vfiprintf_r+0x20>
 800ad1c:	4b79      	ldr	r3, [pc, #484]	; (800af04 <_vfiprintf_r+0x248>)
 800ad1e:	429d      	cmp	r5, r3
 800ad20:	bf08      	it	eq
 800ad22:	68f5      	ldreq	r5, [r6, #12]
 800ad24:	e7da      	b.n	800acdc <_vfiprintf_r+0x20>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	0598      	lsls	r0, r3, #22
 800ad2a:	d4ed      	bmi.n	800ad08 <_vfiprintf_r+0x4c>
 800ad2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad2e:	f7fd fe19 	bl	8008964 <__retarget_lock_release_recursive>
 800ad32:	e7e9      	b.n	800ad08 <_vfiprintf_r+0x4c>
 800ad34:	2300      	movs	r3, #0
 800ad36:	9309      	str	r3, [sp, #36]	; 0x24
 800ad38:	2320      	movs	r3, #32
 800ad3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad42:	2330      	movs	r3, #48	; 0x30
 800ad44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af08 <_vfiprintf_r+0x24c>
 800ad48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad4c:	f04f 0901 	mov.w	r9, #1
 800ad50:	4623      	mov	r3, r4
 800ad52:	469a      	mov	sl, r3
 800ad54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad58:	b10a      	cbz	r2, 800ad5e <_vfiprintf_r+0xa2>
 800ad5a:	2a25      	cmp	r2, #37	; 0x25
 800ad5c:	d1f9      	bne.n	800ad52 <_vfiprintf_r+0x96>
 800ad5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad62:	d00b      	beq.n	800ad7c <_vfiprintf_r+0xc0>
 800ad64:	465b      	mov	r3, fp
 800ad66:	4622      	mov	r2, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f7ff ff94 	bl	800ac98 <__sfputs_r>
 800ad70:	3001      	adds	r0, #1
 800ad72:	f000 80aa 	beq.w	800aeca <_vfiprintf_r+0x20e>
 800ad76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad78:	445a      	add	r2, fp
 800ad7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 80a2 	beq.w	800aeca <_vfiprintf_r+0x20e>
 800ad86:	2300      	movs	r3, #0
 800ad88:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad90:	f10a 0a01 	add.w	sl, sl, #1
 800ad94:	9304      	str	r3, [sp, #16]
 800ad96:	9307      	str	r3, [sp, #28]
 800ad98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad9e:	4654      	mov	r4, sl
 800ada0:	2205      	movs	r2, #5
 800ada2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada6:	4858      	ldr	r0, [pc, #352]	; (800af08 <_vfiprintf_r+0x24c>)
 800ada8:	f7f5 fa3a 	bl	8000220 <memchr>
 800adac:	9a04      	ldr	r2, [sp, #16]
 800adae:	b9d8      	cbnz	r0, 800ade8 <_vfiprintf_r+0x12c>
 800adb0:	06d1      	lsls	r1, r2, #27
 800adb2:	bf44      	itt	mi
 800adb4:	2320      	movmi	r3, #32
 800adb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adba:	0713      	lsls	r3, r2, #28
 800adbc:	bf44      	itt	mi
 800adbe:	232b      	movmi	r3, #43	; 0x2b
 800adc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc4:	f89a 3000 	ldrb.w	r3, [sl]
 800adc8:	2b2a      	cmp	r3, #42	; 0x2a
 800adca:	d015      	beq.n	800adf8 <_vfiprintf_r+0x13c>
 800adcc:	9a07      	ldr	r2, [sp, #28]
 800adce:	4654      	mov	r4, sl
 800add0:	2000      	movs	r0, #0
 800add2:	f04f 0c0a 	mov.w	ip, #10
 800add6:	4621      	mov	r1, r4
 800add8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800addc:	3b30      	subs	r3, #48	; 0x30
 800adde:	2b09      	cmp	r3, #9
 800ade0:	d94e      	bls.n	800ae80 <_vfiprintf_r+0x1c4>
 800ade2:	b1b0      	cbz	r0, 800ae12 <_vfiprintf_r+0x156>
 800ade4:	9207      	str	r2, [sp, #28]
 800ade6:	e014      	b.n	800ae12 <_vfiprintf_r+0x156>
 800ade8:	eba0 0308 	sub.w	r3, r0, r8
 800adec:	fa09 f303 	lsl.w	r3, r9, r3
 800adf0:	4313      	orrs	r3, r2
 800adf2:	9304      	str	r3, [sp, #16]
 800adf4:	46a2      	mov	sl, r4
 800adf6:	e7d2      	b.n	800ad9e <_vfiprintf_r+0xe2>
 800adf8:	9b03      	ldr	r3, [sp, #12]
 800adfa:	1d19      	adds	r1, r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	9103      	str	r1, [sp, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfbb      	ittet	lt
 800ae04:	425b      	neglt	r3, r3
 800ae06:	f042 0202 	orrlt.w	r2, r2, #2
 800ae0a:	9307      	strge	r3, [sp, #28]
 800ae0c:	9307      	strlt	r3, [sp, #28]
 800ae0e:	bfb8      	it	lt
 800ae10:	9204      	strlt	r2, [sp, #16]
 800ae12:	7823      	ldrb	r3, [r4, #0]
 800ae14:	2b2e      	cmp	r3, #46	; 0x2e
 800ae16:	d10c      	bne.n	800ae32 <_vfiprintf_r+0x176>
 800ae18:	7863      	ldrb	r3, [r4, #1]
 800ae1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae1c:	d135      	bne.n	800ae8a <_vfiprintf_r+0x1ce>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	1d1a      	adds	r2, r3, #4
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	9203      	str	r2, [sp, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfb8      	it	lt
 800ae2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae2e:	3402      	adds	r4, #2
 800ae30:	9305      	str	r3, [sp, #20]
 800ae32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af18 <_vfiprintf_r+0x25c>
 800ae36:	7821      	ldrb	r1, [r4, #0]
 800ae38:	2203      	movs	r2, #3
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	f7f5 f9f0 	bl	8000220 <memchr>
 800ae40:	b140      	cbz	r0, 800ae54 <_vfiprintf_r+0x198>
 800ae42:	2340      	movs	r3, #64	; 0x40
 800ae44:	eba0 000a 	sub.w	r0, r0, sl
 800ae48:	fa03 f000 	lsl.w	r0, r3, r0
 800ae4c:	9b04      	ldr	r3, [sp, #16]
 800ae4e:	4303      	orrs	r3, r0
 800ae50:	3401      	adds	r4, #1
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae58:	482c      	ldr	r0, [pc, #176]	; (800af0c <_vfiprintf_r+0x250>)
 800ae5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae5e:	2206      	movs	r2, #6
 800ae60:	f7f5 f9de 	bl	8000220 <memchr>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d03f      	beq.n	800aee8 <_vfiprintf_r+0x22c>
 800ae68:	4b29      	ldr	r3, [pc, #164]	; (800af10 <_vfiprintf_r+0x254>)
 800ae6a:	bb1b      	cbnz	r3, 800aeb4 <_vfiprintf_r+0x1f8>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	3307      	adds	r3, #7
 800ae70:	f023 0307 	bic.w	r3, r3, #7
 800ae74:	3308      	adds	r3, #8
 800ae76:	9303      	str	r3, [sp, #12]
 800ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7a:	443b      	add	r3, r7
 800ae7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7e:	e767      	b.n	800ad50 <_vfiprintf_r+0x94>
 800ae80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae84:	460c      	mov	r4, r1
 800ae86:	2001      	movs	r0, #1
 800ae88:	e7a5      	b.n	800add6 <_vfiprintf_r+0x11a>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	3401      	adds	r4, #1
 800ae8e:	9305      	str	r3, [sp, #20]
 800ae90:	4619      	mov	r1, r3
 800ae92:	f04f 0c0a 	mov.w	ip, #10
 800ae96:	4620      	mov	r0, r4
 800ae98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae9c:	3a30      	subs	r2, #48	; 0x30
 800ae9e:	2a09      	cmp	r2, #9
 800aea0:	d903      	bls.n	800aeaa <_vfiprintf_r+0x1ee>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0c5      	beq.n	800ae32 <_vfiprintf_r+0x176>
 800aea6:	9105      	str	r1, [sp, #20]
 800aea8:	e7c3      	b.n	800ae32 <_vfiprintf_r+0x176>
 800aeaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeae:	4604      	mov	r4, r0
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e7f0      	b.n	800ae96 <_vfiprintf_r+0x1da>
 800aeb4:	ab03      	add	r3, sp, #12
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4b16      	ldr	r3, [pc, #88]	; (800af14 <_vfiprintf_r+0x258>)
 800aebc:	a904      	add	r1, sp, #16
 800aebe:	4630      	mov	r0, r6
 800aec0:	f7fd fea4 	bl	8008c0c <_printf_float>
 800aec4:	4607      	mov	r7, r0
 800aec6:	1c78      	adds	r0, r7, #1
 800aec8:	d1d6      	bne.n	800ae78 <_vfiprintf_r+0x1bc>
 800aeca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aecc:	07d9      	lsls	r1, r3, #31
 800aece:	d405      	bmi.n	800aedc <_vfiprintf_r+0x220>
 800aed0:	89ab      	ldrh	r3, [r5, #12]
 800aed2:	059a      	lsls	r2, r3, #22
 800aed4:	d402      	bmi.n	800aedc <_vfiprintf_r+0x220>
 800aed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aed8:	f7fd fd44 	bl	8008964 <__retarget_lock_release_recursive>
 800aedc:	89ab      	ldrh	r3, [r5, #12]
 800aede:	065b      	lsls	r3, r3, #25
 800aee0:	f53f af12 	bmi.w	800ad08 <_vfiprintf_r+0x4c>
 800aee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aee6:	e711      	b.n	800ad0c <_vfiprintf_r+0x50>
 800aee8:	ab03      	add	r3, sp, #12
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	462a      	mov	r2, r5
 800aeee:	4b09      	ldr	r3, [pc, #36]	; (800af14 <_vfiprintf_r+0x258>)
 800aef0:	a904      	add	r1, sp, #16
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7fe f92e 	bl	8009154 <_printf_i>
 800aef8:	e7e4      	b.n	800aec4 <_vfiprintf_r+0x208>
 800aefa:	bf00      	nop
 800aefc:	0800b1b4 	.word	0x0800b1b4
 800af00:	0800b1d4 	.word	0x0800b1d4
 800af04:	0800b194 	.word	0x0800b194
 800af08:	0800b41c 	.word	0x0800b41c
 800af0c:	0800b426 	.word	0x0800b426
 800af10:	08008c0d 	.word	0x08008c0d
 800af14:	0800ac99 	.word	0x0800ac99
 800af18:	0800b422 	.word	0x0800b422

0800af1c <_read_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4d07      	ldr	r5, [pc, #28]	; (800af3c <_read_r+0x20>)
 800af20:	4604      	mov	r4, r0
 800af22:	4608      	mov	r0, r1
 800af24:	4611      	mov	r1, r2
 800af26:	2200      	movs	r2, #0
 800af28:	602a      	str	r2, [r5, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	f7f7 fea0 	bl	8002c70 <_read>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_read_r+0x1e>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_read_r+0x1e>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	20004ac8 	.word	0x20004ac8

0800af40 <__assert_func>:
 800af40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af42:	4614      	mov	r4, r2
 800af44:	461a      	mov	r2, r3
 800af46:	4b09      	ldr	r3, [pc, #36]	; (800af6c <__assert_func+0x2c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4605      	mov	r5, r0
 800af4c:	68d8      	ldr	r0, [r3, #12]
 800af4e:	b14c      	cbz	r4, 800af64 <__assert_func+0x24>
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <__assert_func+0x30>)
 800af52:	9100      	str	r1, [sp, #0]
 800af54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af58:	4906      	ldr	r1, [pc, #24]	; (800af74 <__assert_func+0x34>)
 800af5a:	462b      	mov	r3, r5
 800af5c:	f000 f80e 	bl	800af7c <fiprintf>
 800af60:	f000 f85f 	bl	800b022 <abort>
 800af64:	4b04      	ldr	r3, [pc, #16]	; (800af78 <__assert_func+0x38>)
 800af66:	461c      	mov	r4, r3
 800af68:	e7f3      	b.n	800af52 <__assert_func+0x12>
 800af6a:	bf00      	nop
 800af6c:	20000024 	.word	0x20000024
 800af70:	0800b42d 	.word	0x0800b42d
 800af74:	0800b43a 	.word	0x0800b43a
 800af78:	0800b468 	.word	0x0800b468

0800af7c <fiprintf>:
 800af7c:	b40e      	push	{r1, r2, r3}
 800af7e:	b503      	push	{r0, r1, lr}
 800af80:	4601      	mov	r1, r0
 800af82:	ab03      	add	r3, sp, #12
 800af84:	4805      	ldr	r0, [pc, #20]	; (800af9c <fiprintf+0x20>)
 800af86:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8a:	6800      	ldr	r0, [r0, #0]
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	f7ff fe95 	bl	800acbc <_vfiprintf_r>
 800af92:	b002      	add	sp, #8
 800af94:	f85d eb04 	ldr.w	lr, [sp], #4
 800af98:	b003      	add	sp, #12
 800af9a:	4770      	bx	lr
 800af9c:	20000024 	.word	0x20000024

0800afa0 <_fstat_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d07      	ldr	r5, [pc, #28]	; (800afc0 <_fstat_r+0x20>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	4611      	mov	r1, r2
 800afac:	602b      	str	r3, [r5, #0]
 800afae:	f7f7 fe88 	bl	8002cc2 <_fstat>
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	d102      	bne.n	800afbc <_fstat_r+0x1c>
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	b103      	cbz	r3, 800afbc <_fstat_r+0x1c>
 800afba:	6023      	str	r3, [r4, #0]
 800afbc:	bd38      	pop	{r3, r4, r5, pc}
 800afbe:	bf00      	nop
 800afc0:	20004ac8 	.word	0x20004ac8

0800afc4 <_isatty_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4d06      	ldr	r5, [pc, #24]	; (800afe0 <_isatty_r+0x1c>)
 800afc8:	2300      	movs	r3, #0
 800afca:	4604      	mov	r4, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	602b      	str	r3, [r5, #0]
 800afd0:	f7f7 fe87 	bl	8002ce2 <_isatty>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_isatty_r+0x1a>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_isatty_r+0x1a>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	20004ac8 	.word	0x20004ac8

0800afe4 <__ascii_mbtowc>:
 800afe4:	b082      	sub	sp, #8
 800afe6:	b901      	cbnz	r1, 800afea <__ascii_mbtowc+0x6>
 800afe8:	a901      	add	r1, sp, #4
 800afea:	b142      	cbz	r2, 800affe <__ascii_mbtowc+0x1a>
 800afec:	b14b      	cbz	r3, 800b002 <__ascii_mbtowc+0x1e>
 800afee:	7813      	ldrb	r3, [r2, #0]
 800aff0:	600b      	str	r3, [r1, #0]
 800aff2:	7812      	ldrb	r2, [r2, #0]
 800aff4:	1e10      	subs	r0, r2, #0
 800aff6:	bf18      	it	ne
 800aff8:	2001      	movne	r0, #1
 800affa:	b002      	add	sp, #8
 800affc:	4770      	bx	lr
 800affe:	4610      	mov	r0, r2
 800b000:	e7fb      	b.n	800affa <__ascii_mbtowc+0x16>
 800b002:	f06f 0001 	mvn.w	r0, #1
 800b006:	e7f8      	b.n	800affa <__ascii_mbtowc+0x16>

0800b008 <__ascii_wctomb>:
 800b008:	b149      	cbz	r1, 800b01e <__ascii_wctomb+0x16>
 800b00a:	2aff      	cmp	r2, #255	; 0xff
 800b00c:	bf85      	ittet	hi
 800b00e:	238a      	movhi	r3, #138	; 0x8a
 800b010:	6003      	strhi	r3, [r0, #0]
 800b012:	700a      	strbls	r2, [r1, #0]
 800b014:	f04f 30ff 	movhi.w	r0, #4294967295
 800b018:	bf98      	it	ls
 800b01a:	2001      	movls	r0, #1
 800b01c:	4770      	bx	lr
 800b01e:	4608      	mov	r0, r1
 800b020:	4770      	bx	lr

0800b022 <abort>:
 800b022:	b508      	push	{r3, lr}
 800b024:	2006      	movs	r0, #6
 800b026:	f000 f82b 	bl	800b080 <raise>
 800b02a:	2001      	movs	r0, #1
 800b02c:	f7f7 fe16 	bl	8002c5c <_exit>

0800b030 <_raise_r>:
 800b030:	291f      	cmp	r1, #31
 800b032:	b538      	push	{r3, r4, r5, lr}
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	d904      	bls.n	800b044 <_raise_r+0x14>
 800b03a:	2316      	movs	r3, #22
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b046:	b112      	cbz	r2, 800b04e <_raise_r+0x1e>
 800b048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b04c:	b94b      	cbnz	r3, 800b062 <_raise_r+0x32>
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 f830 	bl	800b0b4 <_getpid_r>
 800b054:	462a      	mov	r2, r5
 800b056:	4601      	mov	r1, r0
 800b058:	4620      	mov	r0, r4
 800b05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b05e:	f000 b817 	b.w	800b090 <_kill_r>
 800b062:	2b01      	cmp	r3, #1
 800b064:	d00a      	beq.n	800b07c <_raise_r+0x4c>
 800b066:	1c59      	adds	r1, r3, #1
 800b068:	d103      	bne.n	800b072 <_raise_r+0x42>
 800b06a:	2316      	movs	r3, #22
 800b06c:	6003      	str	r3, [r0, #0]
 800b06e:	2001      	movs	r0, #1
 800b070:	e7e7      	b.n	800b042 <_raise_r+0x12>
 800b072:	2400      	movs	r4, #0
 800b074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b078:	4628      	mov	r0, r5
 800b07a:	4798      	blx	r3
 800b07c:	2000      	movs	r0, #0
 800b07e:	e7e0      	b.n	800b042 <_raise_r+0x12>

0800b080 <raise>:
 800b080:	4b02      	ldr	r3, [pc, #8]	; (800b08c <raise+0xc>)
 800b082:	4601      	mov	r1, r0
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	f7ff bfd3 	b.w	800b030 <_raise_r>
 800b08a:	bf00      	nop
 800b08c:	20000024 	.word	0x20000024

0800b090 <_kill_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d07      	ldr	r5, [pc, #28]	; (800b0b0 <_kill_r+0x20>)
 800b094:	2300      	movs	r3, #0
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	f7f7 fdcd 	bl	8002c3c <_kill>
 800b0a2:	1c43      	adds	r3, r0, #1
 800b0a4:	d102      	bne.n	800b0ac <_kill_r+0x1c>
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	b103      	cbz	r3, 800b0ac <_kill_r+0x1c>
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	bd38      	pop	{r3, r4, r5, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20004ac8 	.word	0x20004ac8

0800b0b4 <_getpid_r>:
 800b0b4:	f7f7 bdba 	b.w	8002c2c <_getpid>

0800b0b8 <_init>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr

0800b0c4 <_fini>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	bf00      	nop
 800b0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ca:	bc08      	pop	{r3}
 800b0cc:	469e      	mov	lr, r3
 800b0ce:	4770      	bx	lr
